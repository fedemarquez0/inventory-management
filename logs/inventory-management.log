2025-10-06 19:27:39 [restartedMain] INFO  c.m.i.InventoryManagementApplication - Starting InventoryManagementApplication using Java 21.0.8 with PID 42192 (C:\Users\fedem\Documents\Github\inventory-management\target\classes started by fedem in C:\Users\fedem\Documents\Github\inventory-management)
2025-10-06 19:27:39 [restartedMain] DEBUG c.m.i.InventoryManagementApplication - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-06 19:27:39 [restartedMain] INFO  c.m.i.InventoryManagementApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-06 19:27:39 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-06 19:27:39 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-06 19:27:40 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data R2DBC repositories in DEFAULT mode.
2025-10-06 19:27:40 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 97 ms. Found 4 R2DBC repository interfaces.
2025-10-06 19:27:41 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-06 19:27:42 [restartedMain] INFO  c.m.i.i.config.R2dbcConfig - Database initialization configured
2025-10-06 19:27:42 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:27:42 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@26cbf385 columns: 1 rows: 1 pos: -1
2025-10-06 19:27:42 [single-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:27:42 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:27:42 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4052b463 columns: 1 rows: 1 pos: -1
2025-10-06 19:27:42 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:27:42 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2f90e47a columns: 1 rows: 1 pos: -1
2025-10-06 19:27:42 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:27:42 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@235ce7f7 columns: 1 rows: 1 pos: -1
2025-10-06 19:27:42 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:27:42 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@46e91ce9 columns: 1 rows: 1 pos: -1
2025-10-06 19:27:42 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:27:42 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2164430 columns: 1 rows: 1 pos: -1
2025-10-06 19:27:42 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:27:42 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS inventory
2025-10-06 19:27:42 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2a8dd33c columns: 1 rows: 1 pos: -1
2025-10-06 19:27:42 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:27:42 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6eaafac5 columns: 1 rows: 1 pos: -1
2025-10-06 19:27:42 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS user_store_permissions
2025-10-06 19:27:42 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:27:42 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@602abdad columns: 1 rows: 1 pos: -1
2025-10-06 19:27:42 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS products
2025-10-06 19:27:42 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:27:42 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@502d425c columns: 1 rows: 1 pos: -1
2025-10-06 19:27:42 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS stores
2025-10-06 19:27:42 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:27:42 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@14fd6f56 columns: 1 rows: 1 pos: -1
2025-10-06 19:27:42 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS users
2025-10-06 19:27:42 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS products ( id BIGINT AUTO_INCREMENT PRIMARY KEY, sku VARCHAR(50) NOT NULL UNIQUE, name VARCHAR(200) NOT NULL, description VARCHAR(500), is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 19:27:42 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS stores ( id BIGINT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100) NOT NULL UNIQUE, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 19:27:42 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS users ( id BIGINT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(50) NOT NULL UNIQUE, password_hash VARCHAR(255) NOT NULL, role VARCHAR(20) NOT NULL, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 19:27:42 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS inventory ( id BIGINT AUTO_INCREMENT PRIMARY KEY, product_id BIGINT NOT NULL, store_id BIGINT NOT NULL, available_qty INT NOT NULL DEFAULT 0, version INT NOT NULL DEFAULT 0, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (product_id) REFERENCES products(id), FOREIGN KEY (store_id) REFERENCES stores(id), UNIQUE(product_id, store_id) )
2025-10-06 19:27:42 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS user_store_permissions ( id BIGINT AUTO_INCREMENT PRIMARY KEY, user_id BIGINT NOT NULL, store_id BIGINT NOT NULL, FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (store_id) REFERENCES stores(id), UNIQUE(user_id, store_id) )
2025-10-06 19:27:42 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_inventory_product_id ON inventory(product_id)
2025-10-06 19:27:42 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_inventory_store_id ON inventory(store_id)
2025-10-06 19:27:42 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_user_store_permissions_user_id ON user_store_permissions(user_id)
2025-10-06 19:27:42 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_user_store_permissions_store_id ON user_store_permissions(store_id)
2025-10-06 19:27:42 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_products_sku ON products(sku)
2025-10-06 19:27:42 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_users_username ON users(username)
2025-10-06 19:27:42 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO stores (id, name, is_active, created_at, updated_at) VALUES (1, 'Shopping Dinosaurio Mall', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'Centro Maipu 712', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'Nuevo Centro Shopping', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 19:27:42 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO users (id, username, password_hash, role, is_active, created_at, updated_at) VALUES (1, 'admin', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'ADMIN', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'user_dinosaurio', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'user_maipu', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (4, 'user_nuevo_centro', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 19:27:42 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO user_store_permissions (id, user_id, store_id) VALUES (1, 2, 1), (2, 3, 2), (3, 4, 3)
2025-10-06 19:27:42 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO products (id, sku, name, description, is_active, created_at, updated_at) VALUES (1, 'REM-001-BL-M', 'Remera Básica Blanca M', 'Remera de algodón peinado 160gsm', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'REM-002-NG-L', 'Remera Básica Negra L', 'Remera cuello redondo negra', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'REM-003-AZ-S', 'Remera Azul S', 'Remera azul marino corte clásico', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (4, 'BUZ-001-GR-M', 'Buzo Hoodie Gris M', 'Buzo frisa liviano con capucha', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (5, 'BUZ-002-NG-L', 'Buzo Hoodie Negro L', 'Buzo de algodón grueso con bolsillo canguro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (6, 'PAN-001-NG-32', 'Pantalón Chino Negro 32', 'Pantalón tipo chino con elastano', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (7, 'PAN-002-AZ-34', 'Jeans Azul 34', 'Jeans corte slim fit azul oscuro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (8, 'BER-001-KH-M', 'Bermuda Cargo Khaki M', 'Bermuda con bolsillos laterales', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (9, 'BER-002-AZ-L', 'Bermuda Denim Azul L', 'Bermuda de jean azul clásico', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (10, 'CAM-001-BL-M', 'Camisa Blanca Oxford M', 'Camisa manga larga oxford blanco', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (11, 'CAM-002-CE-L', 'Camisa Celeste L', 'Camisa de poplin celeste claro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (12, 'CMP-001-NG-M', 'Campera Rompeviento Negra M', 'Campera liviana impermeable con cierre', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (13, 'CMP-002-AZ-L', 'Campera Puffer Azul L', 'Campera acolchada pluma sintética', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (14, 'ZAP-001-NG-42', 'Zapatillas Urbanas Negras 42', 'Zapatillas urbanas con suela EVA', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (15, 'ZAP-002-BL-41', 'Zapatillas Running Blancas 41', 'Zapatillas deportivas livianas', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (16, 'GOR-001-NG-U', 'Gorra Negra U', 'Gorra ajustable negra con visera curva', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (17, 'MED-001-BL-U', 'Pack Medias Blancas U', 'Pack x3 medias tobillera blancas', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 19:27:42 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO inventory (id, product_id, store_id, available_qty, version, updated_at) VALUES (1, 1, 1, 25, 0, CURRENT_TIMESTAMP), (2, 1, 2, 18, 0, CURRENT_TIMESTAMP), (3, 1, 3, 35, 0, CURRENT_TIMESTAMP), (4, 2, 1, 20, 0, CURRENT_TIMESTAMP), (5, 2, 2, 15, 0, CURRENT_TIMESTAMP), (6, 2, 3, 30, 0, CURRENT_TIMESTAMP), (7, 3, 1, 14, 0, CURRENT_TIMESTAMP), (8, 3, 2, 22, 0, CURRENT_TIMESTAMP), (9, 3, 3, 28, 0, CURRENT_TIMESTAMP), (10, 4, 1, 10, 0, CURRENT_TIMESTAMP), (11, 4, 2, 12, 0, CURRENT_TIMESTAMP), (12, 4, 3, 20, 0, CURRENT_TIMESTAMP), (13, 5, 1, 8, 0, CURRENT_TIMESTAMP), (14, 5, 2, 11, 0, CURRENT_TIMESTAMP), (15, 5, 3, 16, 0, CURRENT_TIMESTAMP), (16, 6, 1, 12, 0, CURRENT_TIMESTAMP), (17, 6, 2, 10, 0, CURRENT_TIMESTAMP), (18, 6, 3, 18, 0, CURRENT_TIMESTAMP), (19, 7, 1, 14, 0, CURRENT_TIMESTAMP), (20, 7, 2, 13, 0, CURRENT_TIMESTAMP), (21, 7, 3, 22, 0, CURRENT_TIMESTAMP), (22, 8, 1, 16, 0, CURRENT_TIMESTAMP), (23, 8, 2, 12, 0, CURRENT_TIMESTAMP), (24, 8, 3, 24, 0, CURRENT_TIMESTAMP), (25, 9, 1, 10, 0, CURRENT_TIMESTAMP), (26, 9, 2, 14, 0, CURRENT_TIMESTAMP), (27, 9, 3, 20, 0, CURRENT_TIMESTAMP), (28, 10, 1, 11, 0, CURRENT_TIMESTAMP), (29, 10, 2, 10, 0, CURRENT_TIMESTAMP), (30, 10, 3, 19, 0, CURRENT_TIMESTAMP), (31, 11, 1, 9, 0, CURRENT_TIMESTAMP), (32, 11, 2, 12, 0, CURRENT_TIMESTAMP), (33, 11, 3, 18, 0, CURRENT_TIMESTAMP), (34, 12, 1, 6, 0, CURRENT_TIMESTAMP), (35, 12, 2, 7, 0, CURRENT_TIMESTAMP), (36, 12, 3, 12, 0, CURRENT_TIMESTAMP), (37, 13, 1, 5, 0, CURRENT_TIMESTAMP), (38, 13, 2, 6, 0, CURRENT_TIMESTAMP), (39, 13, 3, 10, 0, CURRENT_TIMESTAMP), (40, 14, 1, 8, 0, CURRENT_TIMESTAMP), (41, 14, 2, 10, 0, CURRENT_TIMESTAMP), (42, 14, 3, 15, 0, CURRENT_TIMESTAMP), (43, 15, 1, 7, 0, CURRENT_TIMESTAMP), (44, 15, 2, 9, 0, CURRENT_TIMESTAMP), (45, 15, 3, 14, 0, CURRENT_TIMESTAMP), (46, 16, 1, 20, 0, CURRENT_TIMESTAMP), (47, 16, 2, 18, 0, CURRENT_TIMESTAMP), (48, 16, 3, 30, 0, CURRENT_TIMESTAMP), (49, 17, 1, 35, 0, CURRENT_TIMESTAMP), (50, 17, 2, 28, 0, CURRENT_TIMESTAMP), (51, 17, 3, 50, 0, CURRENT_TIMESTAMP)
2025-10-06 19:27:42 [Thread-18] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:27:42 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:27:42 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1d01b3fc columns: 1 rows: 1 pos: -1
2025-10-06 19:27:42 [restartedMain] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: 5f72bfbc-1502-4716-9eb7-5edd09dc7426

2025-10-06 19:27:42 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 4 endpoints beneath base path '/actuator'
2025-10-06 19:27:43 [restartedMain] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080 (http)
2025-10-06 19:27:43 [restartedMain] INFO  c.m.i.InventoryManagementApplication - Started InventoryManagementApplication in 3.681 seconds (process running for 4.286)
2025-10-06 19:27:43 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:27:43 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:27:43 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3c249d73 columns: 1 rows: 1 pos: -1
2025-10-06 19:27:43 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:27:43 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@29f5552c columns: 1 rows: 1 pos: -1
2025-10-06 19:27:43 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:27:43 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:27:43 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4972e52c columns: 1 rows: 1 pos: -1
2025-10-06 19:28:32 [reactor-http-nio-3] INFO  c.m.i.i.a.input.rest.AuthController - POST /api/auth/login - Username: admin - IP: 0:0:0:0:0:0:0:1 - User-Agent: PostmanRuntime/7.48.0 - Authentication attempt
2025-10-06 19:28:32 [reactor-http-nio-3] INFO  c.m.i.a.service.AuthService - Authentication attempt for user: admin
2025-10-06 19:28:32 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:28:32 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:28:32 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1a5929b4 columns: 1 rows: 1 pos: -1
2025-10-06 19:28:32 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:28:32 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5d085e02 columns: 7 rows: 1 pos: -1
2025-10-06 19:28:33 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:28:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:28:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@42989f4a columns: 1 rows: 1 pos: -1
2025-10-06 19:28:33 [reactor-http-nio-3] INFO  c.m.i.i.security.JwtUtil - JWT token generated successfully for user: admin - Token expires in 86400000 ms
2025-10-06 19:28:33 [reactor-http-nio-3] INFO  c.m.i.a.service.AuthService - Authentication successful for user: admin
2025-10-06 19:28:33 [reactor-http-nio-3] INFO  c.m.i.i.a.input.rest.AuthController - Authentication successful - Username: admin - IP: 0:0:0:0:0:0:0:1 - Token generated successfully
2025-10-06 19:28:50 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:28:50 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:28:50 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@295fa015 columns: 1 rows: 1 pos: -1
2025-10-06 19:28:50 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:28:50 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1ed30384 columns: 7 rows: 1 pos: -1
2025-10-06 19:28:50 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:28:50 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:28:50 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3d3bd669 columns: 1 rows: 1 pos: -1
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3c1c76c columns: 1 rows: 1 pos: -1
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@596e74a1 columns: 7 rows: 1 pos: -1
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6987d498 columns: 1 rows: 1 pos: -1
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@18e36a8f columns: 1 rows: 1 pos: -1
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@f2a2592 columns: 7 rows: 1 pos: -1
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@50c2ff88 columns: 1 rows: 1 pos: -1
2025-10-06 19:28:50 [parallel-7] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/REM-001-BL-M/stores/4 - User: admin - IP: 0:0:0:0:0:0:0:1 - Store-specific inventory query
2025-10-06 19:28:50 [parallel-7] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: REM-001-BL-M in store: 4
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2dc109be columns: 1 rows: 1 pos: -1
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT 1 FROM stores WHERE stores.ID = $1 LIMIT 1 {1: CAST(4 AS BIGINT)}
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3fdd3d99 columns: 1 rows: 0 pos: -1
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7346cc71 columns: 1 rows: 1 pos: -1
2025-10-06 19:28:50 [parallel-7] ERROR c.m.i.a.service.InventoryService - Database error while fetching inventory for SKU REM-001-BL-M and store 4: Store not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Store not found
	at com.meli.inventorymanagement.application.service.InventoryService.lambda$validateStoreExists$23(InventoryService.java:188)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoUsingWhen$MonoUsingWhenSubscriber.deferredComplete(MonoUsingWhen.java:268)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoHasElement$HasElementSubscriber.onComplete(MonoHasElement.java:96)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:549)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
	at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
	at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
	at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
	at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
	at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
	at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
	at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:205)
	at reactor.core.publisher.MonoFlatMap.subscribeOrReturn(MonoFlatMap.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:63)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
	at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
	at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
	at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:28:50 [parallel-7] ERROR c.m.i.i.a.i.rest.InventoryController - Failed to retrieve inventory for product REM-001-BL-M in store 4 - User: admin - IP: 0:0:0:0:0:0:0:1 - Error: Store not found
2025-10-06 19:28:50 [parallel-7] ERROR c.m.i.i.s.JwtAuthenticationFilter - Error during JWT authentication: Store not found
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3036450d columns: 1 rows: 1 pos: -1
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6789724d columns: 7 rows: 1 pos: -1
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@54589a6d columns: 1 rows: 1 pos: -1
2025-10-06 19:28:50 [parallel-7] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/REM-001-BL-M/stores/4 - User: admin - IP: 0:0:0:0:0:0:0:1 - Store-specific inventory query
2025-10-06 19:28:50 [parallel-7] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: REM-001-BL-M in store: 4
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5073314 columns: 1 rows: 1 pos: -1
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT 1 FROM stores WHERE stores.ID = $1 LIMIT 1 {1: CAST(4 AS BIGINT)}
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@762eeaf1 columns: 1 rows: 0 pos: -1
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@66d26202 columns: 1 rows: 1 pos: -1
2025-10-06 19:28:50 [parallel-7] ERROR c.m.i.a.service.InventoryService - Database error while fetching inventory for SKU REM-001-BL-M and store 4: Store not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Store not found
	at com.meli.inventorymanagement.application.service.InventoryService.lambda$validateStoreExists$23(InventoryService.java:188)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoUsingWhen$MonoUsingWhenSubscriber.deferredComplete(MonoUsingWhen.java:268)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoHasElement$HasElementSubscriber.onComplete(MonoHasElement.java:96)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:549)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
	at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
	at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
	at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
	at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
	at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
	at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
	at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:205)
	at reactor.core.publisher.MonoFlatMap.subscribeOrReturn(MonoFlatMap.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:63)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
	at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
	at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
	at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:28:50 [parallel-7] ERROR c.m.i.i.a.i.rest.InventoryController - Failed to retrieve inventory for product REM-001-BL-M in store 4 - User: admin - IP: 0:0:0:0:0:0:0:1 - Error: Store not found
2025-10-06 19:28:50 [parallel-7] ERROR c.m.i.i.s.JwtAuthenticationFilter - Error extracting username from token: Store not found
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3f854d31 columns: 1 rows: 1 pos: -1
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5b6d3e1a columns: 7 rows: 1 pos: -1
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1da9cffd columns: 1 rows: 1 pos: -1
2025-10-06 19:28:50 [parallel-7] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/REM-001-BL-M/stores/4 - User: admin - IP: 0:0:0:0:0:0:0:1 - Store-specific inventory query
2025-10-06 19:28:50 [parallel-7] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: REM-001-BL-M in store: 4
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5f503dee columns: 1 rows: 1 pos: -1
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT 1 FROM stores WHERE stores.ID = $1 LIMIT 1 {1: CAST(4 AS BIGINT)}
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@cd5d7de columns: 1 rows: 0 pos: -1
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:28:50 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@45a47c5c columns: 1 rows: 1 pos: -1
2025-10-06 19:28:50 [parallel-7] ERROR c.m.i.a.service.InventoryService - Database error while fetching inventory for SKU REM-001-BL-M and store 4: Store not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Store not found
	at com.meli.inventorymanagement.application.service.InventoryService.lambda$validateStoreExists$23(InventoryService.java:188)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoUsingWhen$MonoUsingWhenSubscriber.deferredComplete(MonoUsingWhen.java:268)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoHasElement$HasElementSubscriber.onComplete(MonoHasElement.java:96)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:549)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
	at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
	at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
	at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
	at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
	at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
	at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
	at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:205)
	at reactor.core.publisher.MonoFlatMap.subscribeOrReturn(MonoFlatMap.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:63)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
	at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
	at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
	at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:28:50 [parallel-7] ERROR c.m.i.i.a.i.rest.InventoryController - Failed to retrieve inventory for product REM-001-BL-M in store 4 - User: admin - IP: 0:0:0:0:0:0:0:1 - Error: Store not found
2025-10-06 19:28:50 [parallel-7] ERROR c.m.i.i.s.JwtAuthenticationFilter - Error during JWT authentication: Store not found
2025-10-06 19:30:45 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:30:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@19e9bf16 columns: 1 rows: 1 pos: -1
2025-10-06 19:30:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:30:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1bbb00ae columns: 7 rows: 1 pos: -1
2025-10-06 19:30:45 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:30:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@35abde82 columns: 1 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7771c7c0 columns: 1 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3cf01a60 columns: 7 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1ea636b6 columns: 1 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@79a77e0b columns: 1 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@228599b columns: 7 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@30c8717f columns: 1 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/REM-001-BL-M/stores - User: admin - IP: 0:0:0:0:0:0:0:1 - Admin inventory query for all stores
2025-10-06 19:30:45 [parallel-4] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: REM-001-BL-M
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2f6e8ad8 columns: 1 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.ID, products.sku, products.name, products.description, products.is_active, products.created_at, products.updated_at FROM products WHERE products.sku = $1 {1: 'REM-001-BL-M'}
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1f0eb843 columns: 7 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@e7a9894 columns: 1 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1]
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3f4a4341 columns: 1 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 {1: 'REM-001-BL-M'}
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@49a6646a columns: 6 rows: 3 pos: -1
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@31c86ce columns: 1 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@285b2d34 columns: 1 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@63a92019 columns: 7 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@79591a47 columns: 1 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2219ea27 columns: 1 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@15cd870 columns: 5 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@64469bd6 columns: 1 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@59537414 columns: 1 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1e5f794 columns: 7 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@11c33b33 columns: 1 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7d050a76 columns: 1 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(2 AS BIGINT)}
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@e13ede2 columns: 5 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@454617fd columns: 1 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@128708e columns: 1 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@d8889de columns: 7 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4762e3cf columns: 1 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4c83e8ab columns: 1 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(3 AS BIGINT)}
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@10a8e0b0 columns: 5 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:45 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@27521363 columns: 1 rows: 1 pos: -1
2025-10-06 19:30:45 [parallel-4] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully retrieved inventory for product REM-001-BL-M - User: admin - IP: 0:0:0:0:0:0:0:1
2025-10-06 19:30:51 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:30:51 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:51 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@79b9e4ca columns: 1 rows: 1 pos: -1
2025-10-06 19:30:51 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:30:51 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@75df044a columns: 7 rows: 1 pos: -1
2025-10-06 19:30:51 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:30:51 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:51 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@61f3cdd3 columns: 1 rows: 1 pos: -1
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2a72b7e1 columns: 1 rows: 1 pos: -1
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@f6dd14a columns: 7 rows: 1 pos: -1
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7a5c509f columns: 1 rows: 1 pos: -1
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@55ac218 columns: 1 rows: 1 pos: -1
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5170e0b0 columns: 7 rows: 1 pos: -1
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@67dac576 columns: 1 rows: 1 pos: -1
2025-10-06 19:30:51 [parallel-4] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/REM-001-BL-M/stores/1 - User: admin - IP: 0:0:0:0:0:0:0:1 - Store-specific inventory query
2025-10-06 19:30:51 [parallel-4] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: REM-001-BL-M in store: 1
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4038298 columns: 1 rows: 1 pos: -1
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT 1 FROM stores WHERE stores.ID = $1 LIMIT 1 {1: CAST(1 AS BIGINT)}
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@35c3061b columns: 1 rows: 1 pos: -1
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7b34698c columns: 1 rows: 1 pos: -1
2025-10-06 19:30:51 [parallel-4] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4ee51292 columns: 1 rows: 1 pos: -1
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'REM-001-BL-M', 2: CAST(1 AS BIGINT)}
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5c89ad29 columns: 6 rows: 1 pos: -1
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@26cbffbe columns: 1 rows: 1 pos: -1
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@b237a45 columns: 1 rows: 1 pos: -1
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@47cfa3bc columns: 7 rows: 1 pos: -1
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@20603e5 columns: 1 rows: 1 pos: -1
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@280f2301 columns: 1 rows: 1 pos: -1
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@21ec0c6 columns: 5 rows: 1 pos: -1
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:30:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1f7826cf columns: 1 rows: 1 pos: -1
2025-10-06 19:30:51 [parallel-4] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully retrieved inventory for product REM-001-BL-M in store 1 - Quantity: 25 - User: admin - IP: 0:0:0:0:0:0:0:1
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@e60b25c columns: 1 rows: 1 pos: -1
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5f55779f columns: 7 rows: 1 pos: -1
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6b35503 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:02 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:02 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:02 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1b420279 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:02 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:31:02 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3a998da1 columns: 7 rows: 1 pos: -1
2025-10-06 19:31:02 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:02 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:02 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@a2112ab columns: 1 rows: 1 pos: -1
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@a5e071d columns: 1 rows: 1 pos: -1
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@17796865 columns: 7 rows: 1 pos: -1
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6e8275e8 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:02 [reactor-http-nio-5] INFO  c.m.i.i.a.i.rest.InventoryController - PUT /api/inventory/REM-001-BL-M/stores/1 - User: admin - IP: 0:0:0:0:0:0:0:1 - Setting absolute quantity to: 9
2025-10-06 19:31:02 [reactor-http-nio-5] INFO  c.m.i.a.service.InventoryService - Updating inventory for product SKU: REM-001-BL-M in store: 1 with quantity: 9
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@27711f51 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.ID, products.sku, products.name, products.description, products.is_active, products.created_at, products.updated_at FROM products WHERE products.sku = $1 {1: 'REM-001-BL-M'}
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@65c1c015 columns: 7 rows: 1 pos: -1
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5f061db8 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1b88bde7 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3dc31561 columns: 5 rows: 1 pos: -1
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@32d1a290 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i WHERE i.product_id = :productId AND i.store_id = :storeId] to [SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2]
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3325baf6 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2 {1: CAST(1 AS BIGINT), 2: CAST(1 AS BIGINT)}
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@53929d2d columns: 6 rows: 1 pos: -1
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3b1fab5d columns: 1 rows: 1 pos: -1
2025-10-06 19:31:02 [reactor-http-nio-5] INFO  c.m.i.a.service.InventoryService - Updating existing inventory ID: 1
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@ddc9130 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  UPDATE inventory SET product_id = $1, store_id = $2, available_qty = $3, VERSION = $4, updated_at = $5 WHERE inventory.ID = $6 AND (inventory.VERSION = $7) {1: CAST(1 AS BIGINT), 2: CAST(1 AS BIGINT), 3: 9, 4: 1, 5: TIMESTAMP '2025-10-06 19:31:02.3124747', 6: CAST(1 AS BIGINT), 7: 0}
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@41228449 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@73a2530b columns: 1 rows: 1 pos: -1
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@10721dbe columns: 7 rows: 1 pos: -1
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2b7ea7e4 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4abaf88c columns: 1 rows: 1 pos: -1
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3336b37a columns: 5 rows: 1 pos: -1
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@bf61c8a columns: 1 rows: 1 pos: -1
2025-10-06 19:31:02 [reactor-http-nio-5] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully updated inventory for product REM-001-BL-M in store 1 - New quantity: 9 - User: admin - IP: 0:0:0:0:0:0:0:1
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@49465074 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@23c35c0a columns: 7 rows: 1 pos: -1
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4b5e2fec columns: 1 rows: 1 pos: -1
2025-10-06 19:31:17 [parallel-10] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:17 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:17 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@a10b2fb columns: 1 rows: 1 pos: -1
2025-10-06 19:31:17 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:31:17 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2509b704 columns: 7 rows: 1 pos: -1
2025-10-06 19:31:17 [parallel-10] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:17 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:17 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5d4eee90 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@58e2a5e8 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@279ec8f5 columns: 7 rows: 1 pos: -1
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@71dea94e columns: 1 rows: 1 pos: -1
2025-10-06 19:31:17 [reactor-http-nio-5] INFO  c.m.i.i.a.i.rest.InventoryController - PUT /api/inventory/REM-001-BL-M/stores/1 - User: admin - IP: 0:0:0:0:0:0:0:1 - Setting absolute quantity to: 20
2025-10-06 19:31:17 [reactor-http-nio-5] INFO  c.m.i.a.service.InventoryService - Updating inventory for product SKU: REM-001-BL-M in store: 1 with quantity: 20
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1659fbb0 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.ID, products.sku, products.name, products.description, products.is_active, products.created_at, products.updated_at FROM products WHERE products.sku = $1 {1: 'REM-001-BL-M'}
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5eb4834c columns: 7 rows: 1 pos: -1
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5d807a11 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7e09c34e columns: 1 rows: 1 pos: -1
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5633f2ce columns: 5 rows: 1 pos: -1
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@60fbab58 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i WHERE i.product_id = :productId AND i.store_id = :storeId] to [SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2]
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@19343afd columns: 1 rows: 1 pos: -1
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2 {1: CAST(1 AS BIGINT), 2: CAST(1 AS BIGINT)}
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7b3cc132 columns: 6 rows: 1 pos: -1
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@56d52ecf columns: 1 rows: 1 pos: -1
2025-10-06 19:31:17 [reactor-http-nio-5] INFO  c.m.i.a.service.InventoryService - Updating existing inventory ID: 1
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6e540968 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  UPDATE inventory SET product_id = $1, store_id = $2, available_qty = $3, VERSION = $4, updated_at = $5 WHERE inventory.ID = $6 AND (inventory.VERSION = $7) {1: CAST(1 AS BIGINT), 2: CAST(1 AS BIGINT), 3: 20, 4: 2, 5: TIMESTAMP '2025-10-06 19:31:17.6840964', 6: CAST(1 AS BIGINT), 7: 1}
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6e7903ed columns: 1 rows: 1 pos: -1
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5631bc07 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@732caf4d columns: 7 rows: 1 pos: -1
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6f4e905f columns: 1 rows: 1 pos: -1
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@22844f37 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@469c7f7f columns: 5 rows: 1 pos: -1
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:17 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4fdcbd67 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:17 [reactor-http-nio-5] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully updated inventory for product REM-001-BL-M in store 1 - New quantity: 20 - User: admin - IP: 0:0:0:0:0:0:0:1
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@792fa93f columns: 1 rows: 1 pos: -1
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@50e7155 columns: 7 rows: 1 pos: -1
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@ed95ea9 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:29 [parallel-8] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:29 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:29 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@517b3af1 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:29 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:31:29 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@95bc076 columns: 7 rows: 1 pos: -1
2025-10-06 19:31:29 [parallel-8] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:29 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:29 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3b253f13 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@8b73e36 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@e0b5bea columns: 7 rows: 1 pos: -1
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@35d2216c columns: 1 rows: 1 pos: -1
2025-10-06 19:31:29 [reactor-http-nio-5] INFO  c.m.i.i.a.i.rest.InventoryController - POST /api/inventory/REM-001-BL-M/stores/1/adjustments - User: admin - IP: 0:0:0:0:0:0:0:1 - Adjusting by: 10
2025-10-06 19:31:29 [reactor-http-nio-5] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: REM-001-BL-M in store: 1 by: 10
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3da239e3 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'REM-001-BL-M', 2: CAST(1 AS BIGINT)}
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6f7adfd5 columns: 6 rows: 1 pos: -1
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4ca16e39 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@24e58101 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  UPDATE inventory SET product_id = $1, store_id = $2, available_qty = $3, VERSION = $4, updated_at = $5 WHERE inventory.ID = $6 AND (inventory.VERSION = $7) {1: CAST(1 AS BIGINT), 2: CAST(1 AS BIGINT), 3: 30, 4: 3, 5: TIMESTAMP '2025-10-06 19:31:29.375217', 6: CAST(1 AS BIGINT), 7: 2}
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@77ab844e columns: 1 rows: 1 pos: -1
2025-10-06 19:31:29 [reactor-http-nio-5] INFO  c.m.i.a.service.InventoryService - Inventory adjusted successfully. New quantity: 30, Version: 3
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@35067876 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@b2e56a7 columns: 7 rows: 1 pos: -1
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@28d2f539 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@57f30d96 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@713735 columns: 5 rows: 1 pos: -1
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:29 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1ee98e41 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:29 [reactor-http-nio-5] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully adjusted inventory for product REM-001-BL-M in store 1 by 10 - Final quantity: 30 - User: admin - IP: 0:0:0:0:0:0:0:1
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5500719b columns: 1 rows: 1 pos: -1
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@20dc5d7e columns: 7 rows: 1 pos: -1
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@37b1941b columns: 1 rows: 1 pos: -1
2025-10-06 19:31:37 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:37 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:37 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7ef8168a columns: 1 rows: 1 pos: -1
2025-10-06 19:31:37 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:31:37 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@507893ef columns: 7 rows: 1 pos: -1
2025-10-06 19:31:37 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:37 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:37 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@b95e339 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@22b3f573 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@24e9f516 columns: 7 rows: 1 pos: -1
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@326e7eae columns: 1 rows: 1 pos: -1
2025-10-06 19:31:37 [reactor-http-nio-5] INFO  c.m.i.i.a.i.rest.InventoryController - POST /api/inventory/REM-001-BL-M/stores/1/adjustments - User: admin - IP: 0:0:0:0:0:0:0:1 - Adjusting by: -5
2025-10-06 19:31:37 [reactor-http-nio-5] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: REM-001-BL-M in store: 1 by: -5
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@64610847 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'REM-001-BL-M', 2: CAST(1 AS BIGINT)}
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@17ccc7b8 columns: 6 rows: 1 pos: -1
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1659b3b columns: 1 rows: 1 pos: -1
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1844484b columns: 1 rows: 1 pos: -1
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  UPDATE inventory SET product_id = $1, store_id = $2, available_qty = $3, VERSION = $4, updated_at = $5 WHERE inventory.ID = $6 AND (inventory.VERSION = $7) {1: CAST(1 AS BIGINT), 2: CAST(1 AS BIGINT), 3: 25, 4: 4, 5: TIMESTAMP '2025-10-06 19:31:37.3155634', 6: CAST(1 AS BIGINT), 7: 3}
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1d909dbd columns: 1 rows: 1 pos: -1
2025-10-06 19:31:37 [reactor-http-nio-5] INFO  c.m.i.a.service.InventoryService - Inventory adjusted successfully. New quantity: 25, Version: 4
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7ff7954e columns: 1 rows: 1 pos: -1
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@39851f76 columns: 7 rows: 1 pos: -1
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5f5e1463 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@d2f7572 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@451f2cd6 columns: 5 rows: 1 pos: -1
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:37 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@732d0ecf columns: 1 rows: 1 pos: -1
2025-10-06 19:31:37 [reactor-http-nio-5] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully adjusted inventory for product REM-001-BL-M in store 1 by -5 - Final quantity: 25 - User: admin - IP: 0:0:0:0:0:0:0:1
2025-10-06 19:31:43 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:43 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:43 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@76440093 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:43 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:31:43 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@b37b03b columns: 7 rows: 1 pos: -1
2025-10-06 19:31:43 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:43 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:43 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@345fc341 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:43 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:43 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:43 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@30f44cd8 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:43 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:31:43 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@107c3ee columns: 7 rows: 1 pos: -1
2025-10-06 19:31:43 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:43 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:43 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2cd3edc2 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:43 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:43 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:43 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@51efe131 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:43 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:31:43 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2f060c88 columns: 7 rows: 1 pos: -1
2025-10-06 19:31:43 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:43 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:43 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@29ea27f columns: 1 rows: 1 pos: -1
2025-10-06 19:31:43 [reactor-http-nio-5] INFO  c.m.i.i.a.i.rest.InventoryController - POST /api/inventory/REM-001-BL-M/stores/1/adjustments - User: admin - IP: 0:0:0:0:0:0:0:1 - Adjusting by: -50
2025-10-06 19:31:43 [reactor-http-nio-5] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: REM-001-BL-M in store: 1 by: -50
2025-10-06 19:31:43 [reactor-http-nio-5] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 19:31:43 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:43 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:43 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@33ab063a columns: 1 rows: 1 pos: -1
2025-10-06 19:31:43 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'REM-001-BL-M', 2: CAST(1 AS BIGINT)}
2025-10-06 19:31:43 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3fd247e4 columns: 6 rows: 1 pos: -1
2025-10-06 19:31:43 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:43 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:43 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5588bed7 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:43 [reactor-http-nio-5] ERROR c.m.i.a.service.InventoryService - Error adjusting inventory for SKU REM-001-BL-M and store 1: Insufficient stock available
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Insufficient stock available
	at com.meli.inventorymanagement.application.service.InventoryService.lambda$adjustInventory$17(InventoryService.java:161)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
	at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:549)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
	at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
	at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
	at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
	at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
	at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
	at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
	at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onSubscribe(MonoIgnoreElements.java:72)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
	at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
	at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
	at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
	at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:31:43 [reactor-http-nio-5] ERROR c.m.i.i.a.i.rest.InventoryController - Failed to adjust inventory for product REM-001-BL-M in store 1 by -50 - User: admin - IP: 0:0:0:0:0:0:0:1 - Error: Insufficient stock available
2025-10-06 19:31:43 [reactor-http-nio-5] ERROR c.m.i.i.s.JwtAuthenticationFilter - Error during JWT authentication: Insufficient stock available
2025-10-06 19:31:43 [reactor-http-nio-5] ERROR c.m.i.i.s.JwtAuthenticationFilter - Error extracting username from token: 400 BAD_REQUEST "No request body"
2025-10-06 19:31:43 [reactor-http-nio-5] ERROR c.m.i.i.s.JwtAuthenticationFilter - Error during JWT authentication: 400 BAD_REQUEST "No request body"
2025-10-06 19:31:53 [reactor-http-nio-5] INFO  c.m.i.i.a.input.rest.AuthController - POST /api/auth/login - Username: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - User-Agent: PostmanRuntime/7.48.0 - Authentication attempt
2025-10-06 19:31:53 [reactor-http-nio-5] INFO  c.m.i.a.service.AuthService - Authentication attempt for user: user_dinosaurio
2025-10-06 19:31:53 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:53 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:53 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@38b33c79 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:53 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:31:53 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5f21afad columns: 7 rows: 1 pos: -1
2025-10-06 19:31:53 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:53 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:53 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4c2341d9 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:53 [reactor-http-nio-5] INFO  c.m.i.i.security.JwtUtil - JWT token generated successfully for user: user_dinosaurio - Token expires in 86400000 ms
2025-10-06 19:31:53 [reactor-http-nio-5] INFO  c.m.i.a.service.AuthService - Authentication successful for user: user_dinosaurio
2025-10-06 19:31:53 [reactor-http-nio-5] INFO  c.m.i.i.a.input.rest.AuthController - Authentication successful - Username: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - Token generated successfully
2025-10-06 19:31:56 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2f4d731e columns: 1 rows: 1 pos: -1
2025-10-06 19:31:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:31:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6d3b3e8e columns: 7 rows: 1 pos: -1
2025-10-06 19:31:56 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1aa225a columns: 1 rows: 1 pos: -1
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7bdda67c columns: 1 rows: 1 pos: -1
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@356a0ef4 columns: 7 rows: 1 pos: -1
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6fc2b3a6 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3ce3035c columns: 1 rows: 1 pos: -1
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@58a33b21 columns: 7 rows: 1 pos: -1
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6da10058 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:56 [parallel-7] ERROR c.m.i.i.s.JwtAuthenticationFilter - Error during JWT authentication: Admin access required
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@628c79ed columns: 1 rows: 1 pos: -1
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4be3bc60 columns: 7 rows: 1 pos: -1
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2e648586 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:56 [parallel-7] ERROR c.m.i.i.s.JwtAuthenticationFilter - Error extracting username from token: Admin access required
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@657f89e7 columns: 1 rows: 1 pos: -1
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7cd5d48c columns: 7 rows: 1 pos: -1
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:31:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@273f911 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:42 [reactor-http-nio-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:42 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:42 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@309dd963 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:42 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:33:42 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5a29c2a columns: 7 rows: 1 pos: -1
2025-10-06 19:33:42 [reactor-http-nio-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:42 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:42 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6a5a2709 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@9790bbf columns: 1 rows: 1 pos: -1
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7ddeb956 columns: 7 rows: 1 pos: -1
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@17f1ef6e columns: 1 rows: 1 pos: -1
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@ff136a4 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@29ad5610 columns: 7 rows: 1 pos: -1
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4a542617 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:42 [parallel-1] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = :username AND (u.role = 'ADMIN' OR sp.store_id = :storeId)] to [SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = $1 AND (u.role = 'ADMIN' OR sp.store_id = $2)]
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6fa81740 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = $1 AND (u.role = 'ADMIN' OR sp.store_id = $2) {1: 'user_dinosaurio', 2: CAST(1 AS BIGINT)}
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2a652122 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@487a5d9a columns: 1 rows: 1 pos: -1
2025-10-06 19:33:42 [parallel-1] ERROR c.m.i.i.s.JwtAuthenticationFilter - Error during JWT authentication: Permission check failed: Failed to convert from type [io.r2dbc.h2.H2Row] to type [java.lang.Boolean] for value [io.r2dbc.h2.H2Row@37a2d1d0]
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6bda3ac1 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2579bc6d columns: 7 rows: 1 pos: -1
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5f39e0e0 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:42 [parallel-1] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = :username AND (u.role = 'ADMIN' OR sp.store_id = :storeId)] to [SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = $1 AND (u.role = 'ADMIN' OR sp.store_id = $2)]
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@dfd87fc columns: 1 rows: 1 pos: -1
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = $1 AND (u.role = 'ADMIN' OR sp.store_id = $2) {1: 'user_dinosaurio', 2: CAST(1 AS BIGINT)}
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@80ab8c2 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@623c04be columns: 1 rows: 1 pos: -1
2025-10-06 19:33:42 [parallel-1] ERROR c.m.i.i.s.JwtAuthenticationFilter - Error extracting username from token: Permission check failed: Failed to convert from type [io.r2dbc.h2.H2Row] to type [java.lang.Boolean] for value [io.r2dbc.h2.H2Row@182467c3]
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@787c781a columns: 1 rows: 1 pos: -1
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2ce14a72 columns: 7 rows: 1 pos: -1
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@e0e3f03 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:42 [parallel-1] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = :username AND (u.role = 'ADMIN' OR sp.store_id = :storeId)] to [SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = $1 AND (u.role = 'ADMIN' OR sp.store_id = $2)]
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@33bd507d columns: 1 rows: 1 pos: -1
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = $1 AND (u.role = 'ADMIN' OR sp.store_id = $2) {1: 'user_dinosaurio', 2: CAST(1 AS BIGINT)}
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2e4ddb columns: 1 rows: 1 pos: -1
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7a664161 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:46 [reactor-http-nio-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:46 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:46 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4ab1d55c columns: 1 rows: 1 pos: -1
2025-10-06 19:33:46 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:33:46 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5177618c columns: 7 rows: 1 pos: -1
2025-10-06 19:33:46 [reactor-http-nio-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:46 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:46 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1468b8b6 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6ed3c1fa columns: 1 rows: 1 pos: -1
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@321dee19 columns: 7 rows: 1 pos: -1
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6fdca87b columns: 1 rows: 1 pos: -1
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@30bbc075 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5237b2ae columns: 7 rows: 1 pos: -1
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@441bb86a columns: 1 rows: 1 pos: -1
2025-10-06 19:33:46 [parallel-10] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = :username AND (u.role = 'ADMIN' OR sp.store_id = :storeId)] to [SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = $1 AND (u.role = 'ADMIN' OR sp.store_id = $2)]
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@458005c1 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = $1 AND (u.role = 'ADMIN' OR sp.store_id = $2) {1: 'user_dinosaurio', 2: CAST(2 AS BIGINT)}
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@635aa660 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7efb2b40 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:46 [parallel-10] ERROR c.m.i.i.s.JwtAuthenticationFilter - Error during JWT authentication: Permission check failed: Failed to convert from type [io.r2dbc.h2.H2Row] to type [java.lang.Boolean] for value [io.r2dbc.h2.H2Row@7a1b8a89]
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@769b6206 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@190a31bf columns: 7 rows: 1 pos: -1
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@228b568c columns: 1 rows: 1 pos: -1
2025-10-06 19:33:46 [parallel-10] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = :username AND (u.role = 'ADMIN' OR sp.store_id = :storeId)] to [SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = $1 AND (u.role = 'ADMIN' OR sp.store_id = $2)]
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@47e2c41a columns: 1 rows: 1 pos: -1
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = $1 AND (u.role = 'ADMIN' OR sp.store_id = $2) {1: 'user_dinosaurio', 2: CAST(2 AS BIGINT)}
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@9d05041 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@431620e7 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:46 [parallel-10] ERROR c.m.i.i.s.JwtAuthenticationFilter - Error extracting username from token: Permission check failed: Failed to convert from type [io.r2dbc.h2.H2Row] to type [java.lang.Boolean] for value [io.r2dbc.h2.H2Row@719748c1]
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4cab28dd columns: 1 rows: 1 pos: -1
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7dc12806 columns: 7 rows: 1 pos: -1
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2c6a33c8 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:46 [parallel-10] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = :username AND (u.role = 'ADMIN' OR sp.store_id = :storeId)] to [SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = $1 AND (u.role = 'ADMIN' OR sp.store_id = $2)]
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4de78574 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = $1 AND (u.role = 'ADMIN' OR sp.store_id = $2) {1: 'user_dinosaurio', 2: CAST(2 AS BIGINT)}
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4fca8bd0 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:46 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6a9ffa6c columns: 1 rows: 1 pos: -1
2025-10-06 19:33:48 [reactor-http-nio-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:48 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:48 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@63549c24 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:48 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:33:48 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7d9275f6 columns: 7 rows: 1 pos: -1
2025-10-06 19:33:48 [reactor-http-nio-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:48 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:48 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@50cff3d1 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@60ead3ad columns: 1 rows: 1 pos: -1
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1fb8849 columns: 7 rows: 1 pos: -1
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7744c196 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@72d086f4 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7aedbbeb columns: 7 rows: 1 pos: -1
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@e37e7ef columns: 1 rows: 1 pos: -1
2025-10-06 19:33:48 [parallel-6] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = :username AND (u.role = 'ADMIN' OR sp.store_id = :storeId)] to [SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = $1 AND (u.role = 'ADMIN' OR sp.store_id = $2)]
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6f83f9e7 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = $1 AND (u.role = 'ADMIN' OR sp.store_id = $2) {1: 'user_dinosaurio', 2: CAST(3 AS BIGINT)}
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@35df97 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@8603ae9 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:48 [parallel-6] ERROR c.m.i.i.s.JwtAuthenticationFilter - Error during JWT authentication: Permission check failed: Failed to convert from type [io.r2dbc.h2.H2Row] to type [java.lang.Boolean] for value [io.r2dbc.h2.H2Row@310c58e1]
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6126de93 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7b13508f columns: 7 rows: 1 pos: -1
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5e5251ac columns: 1 rows: 1 pos: -1
2025-10-06 19:33:48 [parallel-6] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = :username AND (u.role = 'ADMIN' OR sp.store_id = :storeId)] to [SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = $1 AND (u.role = 'ADMIN' OR sp.store_id = $2)]
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6821702e columns: 1 rows: 1 pos: -1
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = $1 AND (u.role = 'ADMIN' OR sp.store_id = $2) {1: 'user_dinosaurio', 2: CAST(3 AS BIGINT)}
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@fddd7a8 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@17186ae7 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:48 [parallel-6] ERROR c.m.i.i.s.JwtAuthenticationFilter - Error extracting username from token: Permission check failed: Failed to convert from type [io.r2dbc.h2.H2Row] to type [java.lang.Boolean] for value [io.r2dbc.h2.H2Row@43ce28ce]
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@630dd502 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2d13d140 columns: 7 rows: 1 pos: -1
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@9c92778 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:48 [parallel-6] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = :username AND (u.role = 'ADMIN' OR sp.store_id = :storeId)] to [SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = $1 AND (u.role = 'ADMIN' OR sp.store_id = $2)]
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@374b0e9b columns: 1 rows: 1 pos: -1
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = $1 AND (u.role = 'ADMIN' OR sp.store_id = $2) {1: 'user_dinosaurio', 2: CAST(3 AS BIGINT)}
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@78f9d5b1 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:48 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@59c01447 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:52 [reactor-http-nio-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:52 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:52 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@52ed06ba columns: 1 rows: 1 pos: -1
2025-10-06 19:33:52 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:33:52 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6ebc330a columns: 7 rows: 1 pos: -1
2025-10-06 19:33:52 [reactor-http-nio-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:52 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:52 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@30fe5680 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@ac4263 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@424b6f1f columns: 7 rows: 1 pos: -1
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@40ec725a columns: 1 rows: 1 pos: -1
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@639c189d columns: 1 rows: 1 pos: -1
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@63f1ec7e columns: 7 rows: 1 pos: -1
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@393a093b columns: 1 rows: 1 pos: -1
2025-10-06 19:33:52 [parallel-4] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = :username AND (u.role = 'ADMIN' OR sp.store_id = :storeId)] to [SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = $1 AND (u.role = 'ADMIN' OR sp.store_id = $2)]
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@569f2f5f columns: 1 rows: 1 pos: -1
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = $1 AND (u.role = 'ADMIN' OR sp.store_id = $2) {1: 'user_dinosaurio', 2: CAST(4 AS BIGINT)}
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7da028c8 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@c15cdad columns: 1 rows: 1 pos: -1
2025-10-06 19:33:52 [parallel-4] ERROR c.m.i.i.s.JwtAuthenticationFilter - Error during JWT authentication: Permission check failed: Failed to convert from type [io.r2dbc.h2.H2Row] to type [java.lang.Boolean] for value [io.r2dbc.h2.H2Row@143a8596]
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4e5a276b columns: 1 rows: 1 pos: -1
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@44cb9f15 columns: 7 rows: 1 pos: -1
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@54c4f758 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:52 [parallel-4] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = :username AND (u.role = 'ADMIN' OR sp.store_id = :storeId)] to [SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = $1 AND (u.role = 'ADMIN' OR sp.store_id = $2)]
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5311ee81 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = $1 AND (u.role = 'ADMIN' OR sp.store_id = $2) {1: 'user_dinosaurio', 2: CAST(4 AS BIGINT)}
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@693a75c5 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5a3646fa columns: 1 rows: 1 pos: -1
2025-10-06 19:33:52 [parallel-4] ERROR c.m.i.i.s.JwtAuthenticationFilter - Error extracting username from token: Permission check failed: Failed to convert from type [io.r2dbc.h2.H2Row] to type [java.lang.Boolean] for value [io.r2dbc.h2.H2Row@1a37318d]
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@533462fd columns: 1 rows: 1 pos: -1
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7729650b columns: 7 rows: 1 pos: -1
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6320a0c0 columns: 1 rows: 1 pos: -1
2025-10-06 19:33:52 [parallel-4] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = :username AND (u.role = 'ADMIN' OR sp.store_id = :storeId)] to [SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = $1 AND (u.role = 'ADMIN' OR sp.store_id = $2)]
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2f4e2b9b columns: 1 rows: 1 pos: -1
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = $1 AND (u.role = 'ADMIN' OR sp.store_id = $2) {1: 'user_dinosaurio', 2: CAST(4 AS BIGINT)}
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6ac2c13b columns: 1 rows: 1 pos: -1
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:33:52 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@59186a4f columns: 1 rows: 1 pos: -1
2025-10-06 19:49:48 [File Watcher] INFO  o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 3 class path changes (0 additions, 3 deletions, 0 modifications)
2025-10-06 19:49:48 [Thread-4] INFO  o.s.b.w.e.netty.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-06 19:49:48 [netty-shutdown] INFO  o.s.b.w.e.netty.GracefulShutdown - Graceful shutdown complete
2025-10-06 19:49:48 [restartedMain] INFO  c.m.i.InventoryManagementApplication - Starting InventoryManagementApplication using Java 21.0.8 with PID 42192 (C:\Users\fedem\Documents\Github\inventory-management\target\classes started by fedem in C:\Users\fedem\Documents\Github\inventory-management)
2025-10-06 19:49:48 [restartedMain] DEBUG c.m.i.InventoryManagementApplication - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-06 19:49:48 [restartedMain] INFO  c.m.i.InventoryManagementApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-06 19:49:49 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data R2DBC repositories in DEFAULT mode.
2025-10-06 19:49:49 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 4 R2DBC repository interfaces.
2025-10-06 19:49:49 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-06 19:49:49 [restartedMain] INFO  c.m.i.i.config.R2dbcConfig - Database initialization configured
2025-10-06 19:49:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:49:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2d38d3de columns: 1 rows: 1 pos: -1
2025-10-06 19:49:49 [single-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:49:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:49:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@22cf5ae6 columns: 1 rows: 1 pos: -1
2025-10-06 19:49:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:49:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5d370636 columns: 1 rows: 1 pos: -1
2025-10-06 19:49:49 [Thread-19] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS inventory
2025-10-06 19:49:49 [Thread-19] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS user_store_permissions
2025-10-06 19:49:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:49:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@367a886d columns: 1 rows: 1 pos: -1
2025-10-06 19:49:49 [Thread-19] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS products
2025-10-06 19:49:49 [Thread-19] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS stores
2025-10-06 19:49:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:49:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@78deb86f columns: 1 rows: 1 pos: -1
2025-10-06 19:49:49 [Thread-19] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS users
2025-10-06 19:49:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:49:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@209ed5f8 columns: 1 rows: 1 pos: -1
2025-10-06 19:49:49 [Thread-19] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS products ( id BIGINT AUTO_INCREMENT PRIMARY KEY, sku VARCHAR(50) NOT NULL UNIQUE, name VARCHAR(200) NOT NULL, description VARCHAR(500), is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 19:49:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:49:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@457d716b columns: 1 rows: 1 pos: -1
2025-10-06 19:49:49 [Thread-19] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS stores ( id BIGINT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100) NOT NULL UNIQUE, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 19:49:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:49:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2726a049 columns: 1 rows: 1 pos: -1
2025-10-06 19:49:49 [Thread-19] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS users ( id BIGINT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(50) NOT NULL UNIQUE, password_hash VARCHAR(255) NOT NULL, role VARCHAR(20) NOT NULL, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 19:49:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:49:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2a367902 columns: 1 rows: 1 pos: -1
2025-10-06 19:49:49 [Thread-19] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS inventory ( id BIGINT AUTO_INCREMENT PRIMARY KEY, product_id BIGINT NOT NULL, store_id BIGINT NOT NULL, available_qty INT NOT NULL DEFAULT 0, version INT NOT NULL DEFAULT 0, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (product_id) REFERENCES products(id), FOREIGN KEY (store_id) REFERENCES stores(id), UNIQUE(product_id, store_id) )
2025-10-06 19:49:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:49:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@52098861 columns: 1 rows: 1 pos: -1
2025-10-06 19:49:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:49:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@403f5e81 columns: 1 rows: 1 pos: -1
2025-10-06 19:49:49 [Thread-19] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS user_store_permissions ( id BIGINT AUTO_INCREMENT PRIMARY KEY, user_id BIGINT NOT NULL, store_id BIGINT NOT NULL, FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (store_id) REFERENCES stores(id), UNIQUE(user_id, store_id) )
2025-10-06 19:49:49 [Thread-19] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_inventory_product_id ON inventory(product_id)
2025-10-06 19:49:49 [Thread-19] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_inventory_store_id ON inventory(store_id)
2025-10-06 19:49:49 [Thread-19] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_user_store_permissions_user_id ON user_store_permissions(user_id)
2025-10-06 19:49:49 [Thread-19] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_user_store_permissions_store_id ON user_store_permissions(store_id)
2025-10-06 19:49:49 [Thread-19] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_products_sku ON products(sku)
2025-10-06 19:49:49 [Thread-19] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_users_username ON users(username)
2025-10-06 19:49:49 [Thread-19] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO stores (id, name, is_active, created_at, updated_at) VALUES (1, 'Shopping Dinosaurio Mall', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'Centro Maipu 712', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'Nuevo Centro Shopping', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 19:49:49 [Thread-19] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO users (id, username, password_hash, role, is_active, created_at, updated_at) VALUES (1, 'admin', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'ADMIN', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'user_dinosaurio', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'user_maipu', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (4, 'user_nuevo_centro', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 19:49:49 [Thread-19] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO user_store_permissions (id, user_id, store_id) VALUES (1, 2, 1), (2, 3, 2), (3, 4, 3)
2025-10-06 19:49:49 [Thread-19] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO products (id, sku, name, description, is_active, created_at, updated_at) VALUES (1, 'REM-001-BL-M', 'Remera Básica Blanca M', 'Remera de algodón peinado 160gsm', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'REM-002-NG-L', 'Remera Básica Negra L', 'Remera cuello redondo negra', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'REM-003-AZ-S', 'Remera Azul S', 'Remera azul marino corte clásico', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (4, 'BUZ-001-GR-M', 'Buzo Hoodie Gris M', 'Buzo frisa liviano con capucha', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (5, 'BUZ-002-NG-L', 'Buzo Hoodie Negro L', 'Buzo de algodón grueso con bolsillo canguro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (6, 'PAN-001-NG-32', 'Pantalón Chino Negro 32', 'Pantalón tipo chino con elastano', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (7, 'PAN-002-AZ-34', 'Jeans Azul 34', 'Jeans corte slim fit azul oscuro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (8, 'BER-001-KH-M', 'Bermuda Cargo Khaki M', 'Bermuda con bolsillos laterales', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (9, 'BER-002-AZ-L', 'Bermuda Denim Azul L', 'Bermuda de jean azul clásico', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (10, 'CAM-001-BL-M', 'Camisa Blanca Oxford M', 'Camisa manga larga oxford blanco', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (11, 'CAM-002-CE-L', 'Camisa Celeste L', 'Camisa de poplin celeste claro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (12, 'CMP-001-NG-M', 'Campera Rompeviento Negra M', 'Campera liviana impermeable con cierre', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (13, 'CMP-002-AZ-L', 'Campera Puffer Azul L', 'Campera acolchada pluma sintética', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (14, 'ZAP-001-NG-42', 'Zapatillas Urbanas Negras 42', 'Zapatillas urbanas con suela EVA', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (15, 'ZAP-002-BL-41', 'Zapatillas Running Blancas 41', 'Zapatillas deportivas livianas', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (16, 'GOR-001-NG-U', 'Gorra Negra U', 'Gorra ajustable negra con visera curva', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (17, 'MED-001-BL-U', 'Pack Medias Blancas U', 'Pack x3 medias tobillera blancas', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 19:49:49 [Thread-19] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO inventory (id, product_id, store_id, available_qty, version, updated_at) VALUES (1, 1, 1, 25, 0, CURRENT_TIMESTAMP), (2, 1, 2, 18, 0, CURRENT_TIMESTAMP), (3, 1, 3, 35, 0, CURRENT_TIMESTAMP), (4, 2, 1, 20, 0, CURRENT_TIMESTAMP), (5, 2, 2, 15, 0, CURRENT_TIMESTAMP), (6, 2, 3, 30, 0, CURRENT_TIMESTAMP), (7, 3, 1, 14, 0, CURRENT_TIMESTAMP), (8, 3, 2, 22, 0, CURRENT_TIMESTAMP), (9, 3, 3, 28, 0, CURRENT_TIMESTAMP), (10, 4, 1, 10, 0, CURRENT_TIMESTAMP), (11, 4, 2, 12, 0, CURRENT_TIMESTAMP), (12, 4, 3, 20, 0, CURRENT_TIMESTAMP), (13, 5, 1, 8, 0, CURRENT_TIMESTAMP), (14, 5, 2, 11, 0, CURRENT_TIMESTAMP), (15, 5, 3, 16, 0, CURRENT_TIMESTAMP), (16, 6, 1, 12, 0, CURRENT_TIMESTAMP), (17, 6, 2, 10, 0, CURRENT_TIMESTAMP), (18, 6, 3, 18, 0, CURRENT_TIMESTAMP), (19, 7, 1, 14, 0, CURRENT_TIMESTAMP), (20, 7, 2, 13, 0, CURRENT_TIMESTAMP), (21, 7, 3, 22, 0, CURRENT_TIMESTAMP), (22, 8, 1, 16, 0, CURRENT_TIMESTAMP), (23, 8, 2, 12, 0, CURRENT_TIMESTAMP), (24, 8, 3, 24, 0, CURRENT_TIMESTAMP), (25, 9, 1, 10, 0, CURRENT_TIMESTAMP), (26, 9, 2, 14, 0, CURRENT_TIMESTAMP), (27, 9, 3, 20, 0, CURRENT_TIMESTAMP), (28, 10, 1, 11, 0, CURRENT_TIMESTAMP), (29, 10, 2, 10, 0, CURRENT_TIMESTAMP), (30, 10, 3, 19, 0, CURRENT_TIMESTAMP), (31, 11, 1, 9, 0, CURRENT_TIMESTAMP), (32, 11, 2, 12, 0, CURRENT_TIMESTAMP), (33, 11, 3, 18, 0, CURRENT_TIMESTAMP), (34, 12, 1, 6, 0, CURRENT_TIMESTAMP), (35, 12, 2, 7, 0, CURRENT_TIMESTAMP), (36, 12, 3, 12, 0, CURRENT_TIMESTAMP), (37, 13, 1, 5, 0, CURRENT_TIMESTAMP), (38, 13, 2, 6, 0, CURRENT_TIMESTAMP), (39, 13, 3, 10, 0, CURRENT_TIMESTAMP), (40, 14, 1, 8, 0, CURRENT_TIMESTAMP), (41, 14, 2, 10, 0, CURRENT_TIMESTAMP), (42, 14, 3, 15, 0, CURRENT_TIMESTAMP), (43, 15, 1, 7, 0, CURRENT_TIMESTAMP), (44, 15, 2, 9, 0, CURRENT_TIMESTAMP), (45, 15, 3, 14, 0, CURRENT_TIMESTAMP), (46, 16, 1, 20, 0, CURRENT_TIMESTAMP), (47, 16, 2, 18, 0, CURRENT_TIMESTAMP), (48, 16, 3, 30, 0, CURRENT_TIMESTAMP), (49, 17, 1, 35, 0, CURRENT_TIMESTAMP), (50, 17, 2, 28, 0, CURRENT_TIMESTAMP), (51, 17, 3, 50, 0, CURRENT_TIMESTAMP)
2025-10-06 19:49:49 [Thread-19] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:49:49 [Thread-19] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:49:49 [Thread-19] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4c8ab1b8 columns: 1 rows: 1 pos: -1
2025-10-06 19:49:49 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 4 endpoints beneath base path '/actuator'
2025-10-06 19:49:49 [restartedMain] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: 7f4dc64d-e6a9-4090-90d0-21cb53ae9500

2025-10-06 19:49:49 [restartedMain] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080 (http)
2025-10-06 19:49:49 [restartedMain] INFO  c.m.i.InventoryManagementApplication - Started InventoryManagementApplication in 1.22 seconds (process running for 1330.953)
2025-10-06 19:49:49 [restartedMain] INFO  o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation delta:


==========================
CONDITION EVALUATION DELTA
==========================


Positive matches:
-----------------

   ReactiveManagementWebSecurityAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity', 'org.springframework.security.web.server.WebFilterChainProxy' (OnClassCondition)
      - found ConfigurableReactiveWebEnvironment (OnWebApplicationCondition)
      - @ConditionalOnMissingBean (types: org.springframework.security.web.server.SecurityWebFilterChain,org.springframework.security.web.server.WebFilterChainProxy; SearchStrategy: all) did not find any beans (OnBeanCondition)

   ReactiveSecurityAutoConfiguration.SpringBootWebFluxSecurityConfiguration.EnableWebFluxSecurityConfiguration matched:
      - @ConditionalOnMissingBean (types: org.springframework.security.web.server.WebFilterChainProxy; SearchStrategy: all) did not find any beans (OnBeanCondition)


Negative matches:
-----------------

   ReactiveManagementWebSecurityAutoConfiguration#denyAllAuthenticationManager:
      Did not match:
         - @ConditionalOnMissingBean (types: org.springframework.security.authentication.ReactiveAuthenticationManager,org.springframework.security.core.userdetails.ReactiveUserDetailsService; SearchStrategy: all) found beans of type 'org.springframework.security.core.userdetails.ReactiveUserDetailsService' reactiveUserDetailsService (OnBeanCondition)


Exclusions:
-----------

    None


Unconditional classes:
----------------------

    None



2025-10-06 19:49:51 [File Watcher] INFO  o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 3 class path changes (3 additions, 0 deletions, 0 modifications)
2025-10-06 19:49:51 [Thread-28] INFO  o.s.b.w.e.netty.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-06 19:49:51 [netty-shutdown] INFO  o.s.b.w.e.netty.GracefulShutdown - Graceful shutdown complete
2025-10-06 19:49:51 [restartedMain] INFO  c.m.i.InventoryManagementApplication - Starting InventoryManagementApplication using Java 21.0.8 with PID 42192 (C:\Users\fedem\Documents\Github\inventory-management\target\classes started by fedem in C:\Users\fedem\Documents\Github\inventory-management)
2025-10-06 19:49:51 [restartedMain] DEBUG c.m.i.InventoryManagementApplication - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-06 19:49:51 [restartedMain] INFO  c.m.i.InventoryManagementApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-06 19:49:51 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data R2DBC repositories in DEFAULT mode.
2025-10-06 19:49:51 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 4 R2DBC repository interfaces.
2025-10-06 19:49:51 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-06 19:49:52 [restartedMain] INFO  c.m.i.i.config.R2dbcConfig - Database initialization configured
2025-10-06 19:49:52 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:49:52 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5958d1ed columns: 1 rows: 1 pos: -1
2025-10-06 19:49:52 [single-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:49:52 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:49:52 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@31ee8179 columns: 1 rows: 1 pos: -1
2025-10-06 19:49:52 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:49:52 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@b1f1a93 columns: 1 rows: 1 pos: -1
2025-10-06 19:49:52 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS inventory
2025-10-06 19:49:52 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:49:52 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@145775a4 columns: 1 rows: 1 pos: -1
2025-10-06 19:49:52 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS user_store_permissions
2025-10-06 19:49:52 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:49:52 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@69e308f7 columns: 1 rows: 1 pos: -1
2025-10-06 19:49:52 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS products
2025-10-06 19:49:52 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS stores
2025-10-06 19:49:52 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS users
2025-10-06 19:49:52 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:49:52 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2c43b9fb columns: 1 rows: 1 pos: -1
2025-10-06 19:49:52 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS products ( id BIGINT AUTO_INCREMENT PRIMARY KEY, sku VARCHAR(50) NOT NULL UNIQUE, name VARCHAR(200) NOT NULL, description VARCHAR(500), is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 19:49:52 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:49:52 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5f7be562 columns: 1 rows: 1 pos: -1
2025-10-06 19:49:52 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS stores ( id BIGINT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100) NOT NULL UNIQUE, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 19:49:52 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS users ( id BIGINT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(50) NOT NULL UNIQUE, password_hash VARCHAR(255) NOT NULL, role VARCHAR(20) NOT NULL, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 19:49:52 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:49:52 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@70ae417c columns: 1 rows: 1 pos: -1
2025-10-06 19:49:52 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS inventory ( id BIGINT AUTO_INCREMENT PRIMARY KEY, product_id BIGINT NOT NULL, store_id BIGINT NOT NULL, available_qty INT NOT NULL DEFAULT 0, version INT NOT NULL DEFAULT 0, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (product_id) REFERENCES products(id), FOREIGN KEY (store_id) REFERENCES stores(id), UNIQUE(product_id, store_id) )
2025-10-06 19:49:52 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:49:52 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1fb5b2e columns: 1 rows: 1 pos: -1
2025-10-06 19:49:52 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:49:52 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@30c6a68b columns: 1 rows: 1 pos: -1
2025-10-06 19:49:52 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:49:52 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@30160504 columns: 1 rows: 1 pos: -1
2025-10-06 19:49:52 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS user_store_permissions ( id BIGINT AUTO_INCREMENT PRIMARY KEY, user_id BIGINT NOT NULL, store_id BIGINT NOT NULL, FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (store_id) REFERENCES stores(id), UNIQUE(user_id, store_id) )
2025-10-06 19:49:52 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_inventory_product_id ON inventory(product_id)
2025-10-06 19:49:52 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_inventory_store_id ON inventory(store_id)
2025-10-06 19:49:52 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_user_store_permissions_user_id ON user_store_permissions(user_id)
2025-10-06 19:49:52 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_user_store_permissions_store_id ON user_store_permissions(store_id)
2025-10-06 19:49:52 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_products_sku ON products(sku)
2025-10-06 19:49:52 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_users_username ON users(username)
2025-10-06 19:49:52 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO stores (id, name, is_active, created_at, updated_at) VALUES (1, 'Shopping Dinosaurio Mall', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'Centro Maipu 712', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'Nuevo Centro Shopping', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 19:49:52 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO users (id, username, password_hash, role, is_active, created_at, updated_at) VALUES (1, 'admin', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'ADMIN', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'user_dinosaurio', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'user_maipu', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (4, 'user_nuevo_centro', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 19:49:52 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO user_store_permissions (id, user_id, store_id) VALUES (1, 2, 1), (2, 3, 2), (3, 4, 3)
2025-10-06 19:49:52 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO products (id, sku, name, description, is_active, created_at, updated_at) VALUES (1, 'REM-001-BL-M', 'Remera Básica Blanca M', 'Remera de algodón peinado 160gsm', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'REM-002-NG-L', 'Remera Básica Negra L', 'Remera cuello redondo negra', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'REM-003-AZ-S', 'Remera Azul S', 'Remera azul marino corte clásico', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (4, 'BUZ-001-GR-M', 'Buzo Hoodie Gris M', 'Buzo frisa liviano con capucha', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (5, 'BUZ-002-NG-L', 'Buzo Hoodie Negro L', 'Buzo de algodón grueso con bolsillo canguro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (6, 'PAN-001-NG-32', 'Pantalón Chino Negro 32', 'Pantalón tipo chino con elastano', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (7, 'PAN-002-AZ-34', 'Jeans Azul 34', 'Jeans corte slim fit azul oscuro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (8, 'BER-001-KH-M', 'Bermuda Cargo Khaki M', 'Bermuda con bolsillos laterales', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (9, 'BER-002-AZ-L', 'Bermuda Denim Azul L', 'Bermuda de jean azul clásico', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (10, 'CAM-001-BL-M', 'Camisa Blanca Oxford M', 'Camisa manga larga oxford blanco', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (11, 'CAM-002-CE-L', 'Camisa Celeste L', 'Camisa de poplin celeste claro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (12, 'CMP-001-NG-M', 'Campera Rompeviento Negra M', 'Campera liviana impermeable con cierre', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (13, 'CMP-002-AZ-L', 'Campera Puffer Azul L', 'Campera acolchada pluma sintética', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (14, 'ZAP-001-NG-42', 'Zapatillas Urbanas Negras 42', 'Zapatillas urbanas con suela EVA', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (15, 'ZAP-002-BL-41', 'Zapatillas Running Blancas 41', 'Zapatillas deportivas livianas', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (16, 'GOR-001-NG-U', 'Gorra Negra U', 'Gorra ajustable negra con visera curva', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (17, 'MED-001-BL-U', 'Pack Medias Blancas U', 'Pack x3 medias tobillera blancas', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 19:49:52 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO inventory (id, product_id, store_id, available_qty, version, updated_at) VALUES (1, 1, 1, 25, 0, CURRENT_TIMESTAMP), (2, 1, 2, 18, 0, CURRENT_TIMESTAMP), (3, 1, 3, 35, 0, CURRENT_TIMESTAMP), (4, 2, 1, 20, 0, CURRENT_TIMESTAMP), (5, 2, 2, 15, 0, CURRENT_TIMESTAMP), (6, 2, 3, 30, 0, CURRENT_TIMESTAMP), (7, 3, 1, 14, 0, CURRENT_TIMESTAMP), (8, 3, 2, 22, 0, CURRENT_TIMESTAMP), (9, 3, 3, 28, 0, CURRENT_TIMESTAMP), (10, 4, 1, 10, 0, CURRENT_TIMESTAMP), (11, 4, 2, 12, 0, CURRENT_TIMESTAMP), (12, 4, 3, 20, 0, CURRENT_TIMESTAMP), (13, 5, 1, 8, 0, CURRENT_TIMESTAMP), (14, 5, 2, 11, 0, CURRENT_TIMESTAMP), (15, 5, 3, 16, 0, CURRENT_TIMESTAMP), (16, 6, 1, 12, 0, CURRENT_TIMESTAMP), (17, 6, 2, 10, 0, CURRENT_TIMESTAMP), (18, 6, 3, 18, 0, CURRENT_TIMESTAMP), (19, 7, 1, 14, 0, CURRENT_TIMESTAMP), (20, 7, 2, 13, 0, CURRENT_TIMESTAMP), (21, 7, 3, 22, 0, CURRENT_TIMESTAMP), (22, 8, 1, 16, 0, CURRENT_TIMESTAMP), (23, 8, 2, 12, 0, CURRENT_TIMESTAMP), (24, 8, 3, 24, 0, CURRENT_TIMESTAMP), (25, 9, 1, 10, 0, CURRENT_TIMESTAMP), (26, 9, 2, 14, 0, CURRENT_TIMESTAMP), (27, 9, 3, 20, 0, CURRENT_TIMESTAMP), (28, 10, 1, 11, 0, CURRENT_TIMESTAMP), (29, 10, 2, 10, 0, CURRENT_TIMESTAMP), (30, 10, 3, 19, 0, CURRENT_TIMESTAMP), (31, 11, 1, 9, 0, CURRENT_TIMESTAMP), (32, 11, 2, 12, 0, CURRENT_TIMESTAMP), (33, 11, 3, 18, 0, CURRENT_TIMESTAMP), (34, 12, 1, 6, 0, CURRENT_TIMESTAMP), (35, 12, 2, 7, 0, CURRENT_TIMESTAMP), (36, 12, 3, 12, 0, CURRENT_TIMESTAMP), (37, 13, 1, 5, 0, CURRENT_TIMESTAMP), (38, 13, 2, 6, 0, CURRENT_TIMESTAMP), (39, 13, 3, 10, 0, CURRENT_TIMESTAMP), (40, 14, 1, 8, 0, CURRENT_TIMESTAMP), (41, 14, 2, 10, 0, CURRENT_TIMESTAMP), (42, 14, 3, 15, 0, CURRENT_TIMESTAMP), (43, 15, 1, 7, 0, CURRENT_TIMESTAMP), (44, 15, 2, 9, 0, CURRENT_TIMESTAMP), (45, 15, 3, 14, 0, CURRENT_TIMESTAMP), (46, 16, 1, 20, 0, CURRENT_TIMESTAMP), (47, 16, 2, 18, 0, CURRENT_TIMESTAMP), (48, 16, 3, 30, 0, CURRENT_TIMESTAMP), (49, 17, 1, 35, 0, CURRENT_TIMESTAMP), (50, 17, 2, 28, 0, CURRENT_TIMESTAMP), (51, 17, 3, 50, 0, CURRENT_TIMESTAMP)
2025-10-06 19:49:52 [Thread-18] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:49:52 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:49:52 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4c06a135 columns: 1 rows: 1 pos: -1
2025-10-06 19:49:52 [restartedMain] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: 45124cee-1f90-4f93-8e95-7cd502c1fb0e

2025-10-06 19:49:52 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 4 endpoints beneath base path '/actuator'
2025-10-06 19:49:52 [restartedMain] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080 (http)
2025-10-06 19:49:52 [restartedMain] INFO  c.m.i.InventoryManagementApplication - Started InventoryManagementApplication in 1.398 seconds (process running for 1333.809)
2025-10-06 19:49:52 [restartedMain] INFO  o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation delta:


==========================
CONDITION EVALUATION DELTA
==========================


Positive matches:
-----------------

    None


Negative matches:
-----------------

   ReactiveManagementWebSecurityAutoConfiguration:
      Did not match:
         - @ConditionalOnMissingBean (types: org.springframework.security.web.server.SecurityWebFilterChain,org.springframework.security.web.server.WebFilterChainProxy; SearchStrategy: all) found beans of type 'org.springframework.security.web.server.SecurityWebFilterChain' securityWebFilterChain and found beans of type 'org.springframework.security.web.server.WebFilterChainProxy' org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration.WebFilterChainFilter (OnBeanCondition)
      Matched:
         - @ConditionalOnClass found required classes 'org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity', 'org.springframework.security.web.server.WebFilterChainProxy' (OnClassCondition)
         - found ConfigurableReactiveWebEnvironment (OnWebApplicationCondition)

   ReactiveSecurityAutoConfiguration.SpringBootWebFluxSecurityConfiguration.EnableWebFluxSecurityConfiguration:
      Did not match:
         - @ConditionalOnMissingBean (types: org.springframework.security.web.server.WebFilterChainProxy; SearchStrategy: all) found beans of type 'org.springframework.security.web.server.WebFilterChainProxy' org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration.WebFilterChainFilter (OnBeanCondition)


Exclusions:
-----------

    None


Unconditional classes:
----------------------

    None



2025-10-06 19:52:18 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.netty.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-06 19:52:18 [netty-shutdown] INFO  o.s.b.w.e.netty.GracefulShutdown - Graceful shutdown complete
2025-10-06 19:52:21 [restartedMain] INFO  c.m.i.InventoryManagementApplication - Starting InventoryManagementApplication using Java 21.0.8 with PID 6368 (C:\Users\fedem\Documents\Github\inventory-management\target\classes started by fedem in C:\Users\fedem\Documents\Github\inventory-management)
2025-10-06 19:52:21 [restartedMain] DEBUG c.m.i.InventoryManagementApplication - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-06 19:52:21 [restartedMain] INFO  c.m.i.InventoryManagementApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-06 19:52:21 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-06 19:52:21 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-06 19:52:22 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data R2DBC repositories in DEFAULT mode.
2025-10-06 19:52:22 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 94 ms. Found 4 R2DBC repository interfaces.
2025-10-06 19:52:23 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-06 19:52:23 [restartedMain] INFO  c.m.i.i.config.R2dbcConfig - Database initialization configured
2025-10-06 19:52:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:52:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@519bc58e columns: 1 rows: 1 pos: -1
2025-10-06 19:52:23 [single-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:52:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:52:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@285302af columns: 1 rows: 1 pos: -1
2025-10-06 19:52:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:52:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1c30339d columns: 1 rows: 1 pos: -1
2025-10-06 19:52:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:52:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2faaed69 columns: 1 rows: 1 pos: -1
2025-10-06 19:52:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:52:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@71015af2 columns: 1 rows: 1 pos: -1
2025-10-06 19:52:24 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:52:24 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@756dc815 columns: 1 rows: 1 pos: -1
2025-10-06 19:52:24 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:52:24 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@68dca1fe columns: 1 rows: 1 pos: -1
2025-10-06 19:52:24 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:52:24 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS inventory
2025-10-06 19:52:24 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1065d829 columns: 1 rows: 1 pos: -1
2025-10-06 19:52:24 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:52:24 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6bc8d61d columns: 1 rows: 1 pos: -1
2025-10-06 19:52:24 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS user_store_permissions
2025-10-06 19:52:24 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS products
2025-10-06 19:52:24 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:52:24 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@43ba31bc columns: 1 rows: 1 pos: -1
2025-10-06 19:52:24 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS stores
2025-10-06 19:52:24 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS users
2025-10-06 19:52:24 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:52:24 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6e6f6fe8 columns: 1 rows: 1 pos: -1
2025-10-06 19:52:24 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS products ( id BIGINT AUTO_INCREMENT PRIMARY KEY, sku VARCHAR(50) NOT NULL UNIQUE, name VARCHAR(200) NOT NULL, description VARCHAR(500), is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 19:52:24 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS stores ( id BIGINT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100) NOT NULL UNIQUE, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 19:52:24 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS users ( id BIGINT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(50) NOT NULL UNIQUE, password_hash VARCHAR(255) NOT NULL, role VARCHAR(20) NOT NULL, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 19:52:24 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS inventory ( id BIGINT AUTO_INCREMENT PRIMARY KEY, product_id BIGINT NOT NULL, store_id BIGINT NOT NULL, available_qty INT NOT NULL DEFAULT 0, version INT NOT NULL DEFAULT 0, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (product_id) REFERENCES products(id), FOREIGN KEY (store_id) REFERENCES stores(id), UNIQUE(product_id, store_id) )
2025-10-06 19:52:24 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS user_store_permissions ( id BIGINT AUTO_INCREMENT PRIMARY KEY, user_id BIGINT NOT NULL, store_id BIGINT NOT NULL, FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (store_id) REFERENCES stores(id), UNIQUE(user_id, store_id) )
2025-10-06 19:52:24 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_inventory_product_id ON inventory(product_id)
2025-10-06 19:52:24 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_inventory_store_id ON inventory(store_id)
2025-10-06 19:52:24 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_user_store_permissions_user_id ON user_store_permissions(user_id)
2025-10-06 19:52:24 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_user_store_permissions_store_id ON user_store_permissions(store_id)
2025-10-06 19:52:24 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_products_sku ON products(sku)
2025-10-06 19:52:24 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_users_username ON users(username)
2025-10-06 19:52:24 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO stores (id, name, is_active, created_at, updated_at) VALUES (1, 'Shopping Dinosaurio Mall', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'Centro Maipu 712', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'Nuevo Centro Shopping', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 19:52:24 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO users (id, username, password_hash, role, is_active, created_at, updated_at) VALUES (1, 'admin', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'ADMIN', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'user_dinosaurio', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'user_maipu', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (4, 'user_nuevo_centro', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 19:52:24 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO user_store_permissions (id, user_id, store_id) VALUES (1, 2, 1), (2, 3, 2), (3, 4, 3)
2025-10-06 19:52:24 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO products (id, sku, name, description, is_active, created_at, updated_at) VALUES (1, 'REM-001-BL-M', 'Remera Básica Blanca M', 'Remera de algodón peinado 160gsm', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'REM-002-NG-L', 'Remera Básica Negra L', 'Remera cuello redondo negra', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'REM-003-AZ-S', 'Remera Azul S', 'Remera azul marino corte clásico', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (4, 'BUZ-001-GR-M', 'Buzo Hoodie Gris M', 'Buzo frisa liviano con capucha', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (5, 'BUZ-002-NG-L', 'Buzo Hoodie Negro L', 'Buzo de algodón grueso con bolsillo canguro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (6, 'PAN-001-NG-32', 'Pantalón Chino Negro 32', 'Pantalón tipo chino con elastano', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (7, 'PAN-002-AZ-34', 'Jeans Azul 34', 'Jeans corte slim fit azul oscuro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (8, 'BER-001-KH-M', 'Bermuda Cargo Khaki M', 'Bermuda con bolsillos laterales', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (9, 'BER-002-AZ-L', 'Bermuda Denim Azul L', 'Bermuda de jean azul clásico', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (10, 'CAM-001-BL-M', 'Camisa Blanca Oxford M', 'Camisa manga larga oxford blanco', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (11, 'CAM-002-CE-L', 'Camisa Celeste L', 'Camisa de poplin celeste claro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (12, 'CMP-001-NG-M', 'Campera Rompeviento Negra M', 'Campera liviana impermeable con cierre', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (13, 'CMP-002-AZ-L', 'Campera Puffer Azul L', 'Campera acolchada pluma sintética', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (14, 'ZAP-001-NG-42', 'Zapatillas Urbanas Negras 42', 'Zapatillas urbanas con suela EVA', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (15, 'ZAP-002-BL-41', 'Zapatillas Running Blancas 41', 'Zapatillas deportivas livianas', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (16, 'GOR-001-NG-U', 'Gorra Negra U', 'Gorra ajustable negra con visera curva', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (17, 'MED-001-BL-U', 'Pack Medias Blancas U', 'Pack x3 medias tobillera blancas', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 19:52:24 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO inventory (id, product_id, store_id, available_qty, version, updated_at) VALUES (1, 1, 1, 25, 0, CURRENT_TIMESTAMP), (2, 1, 2, 18, 0, CURRENT_TIMESTAMP), (3, 1, 3, 35, 0, CURRENT_TIMESTAMP), (4, 2, 1, 20, 0, CURRENT_TIMESTAMP), (5, 2, 2, 15, 0, CURRENT_TIMESTAMP), (6, 2, 3, 30, 0, CURRENT_TIMESTAMP), (7, 3, 1, 14, 0, CURRENT_TIMESTAMP), (8, 3, 2, 22, 0, CURRENT_TIMESTAMP), (9, 3, 3, 28, 0, CURRENT_TIMESTAMP), (10, 4, 1, 10, 0, CURRENT_TIMESTAMP), (11, 4, 2, 12, 0, CURRENT_TIMESTAMP), (12, 4, 3, 20, 0, CURRENT_TIMESTAMP), (13, 5, 1, 8, 0, CURRENT_TIMESTAMP), (14, 5, 2, 11, 0, CURRENT_TIMESTAMP), (15, 5, 3, 16, 0, CURRENT_TIMESTAMP), (16, 6, 1, 12, 0, CURRENT_TIMESTAMP), (17, 6, 2, 10, 0, CURRENT_TIMESTAMP), (18, 6, 3, 18, 0, CURRENT_TIMESTAMP), (19, 7, 1, 14, 0, CURRENT_TIMESTAMP), (20, 7, 2, 13, 0, CURRENT_TIMESTAMP), (21, 7, 3, 22, 0, CURRENT_TIMESTAMP), (22, 8, 1, 16, 0, CURRENT_TIMESTAMP), (23, 8, 2, 12, 0, CURRENT_TIMESTAMP), (24, 8, 3, 24, 0, CURRENT_TIMESTAMP), (25, 9, 1, 10, 0, CURRENT_TIMESTAMP), (26, 9, 2, 14, 0, CURRENT_TIMESTAMP), (27, 9, 3, 20, 0, CURRENT_TIMESTAMP), (28, 10, 1, 11, 0, CURRENT_TIMESTAMP), (29, 10, 2, 10, 0, CURRENT_TIMESTAMP), (30, 10, 3, 19, 0, CURRENT_TIMESTAMP), (31, 11, 1, 9, 0, CURRENT_TIMESTAMP), (32, 11, 2, 12, 0, CURRENT_TIMESTAMP), (33, 11, 3, 18, 0, CURRENT_TIMESTAMP), (34, 12, 1, 6, 0, CURRENT_TIMESTAMP), (35, 12, 2, 7, 0, CURRENT_TIMESTAMP), (36, 12, 3, 12, 0, CURRENT_TIMESTAMP), (37, 13, 1, 5, 0, CURRENT_TIMESTAMP), (38, 13, 2, 6, 0, CURRENT_TIMESTAMP), (39, 13, 3, 10, 0, CURRENT_TIMESTAMP), (40, 14, 1, 8, 0, CURRENT_TIMESTAMP), (41, 14, 2, 10, 0, CURRENT_TIMESTAMP), (42, 14, 3, 15, 0, CURRENT_TIMESTAMP), (43, 15, 1, 7, 0, CURRENT_TIMESTAMP), (44, 15, 2, 9, 0, CURRENT_TIMESTAMP), (45, 15, 3, 14, 0, CURRENT_TIMESTAMP), (46, 16, 1, 20, 0, CURRENT_TIMESTAMP), (47, 16, 2, 18, 0, CURRENT_TIMESTAMP), (48, 16, 3, 30, 0, CURRENT_TIMESTAMP), (49, 17, 1, 35, 0, CURRENT_TIMESTAMP), (50, 17, 2, 28, 0, CURRENT_TIMESTAMP), (51, 17, 3, 50, 0, CURRENT_TIMESTAMP)
2025-10-06 19:52:24 [Thread-18] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:52:24 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:52:24 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1bd7a825 columns: 1 rows: 1 pos: -1
2025-10-06 19:52:24 [restartedMain] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: 6981ed79-2579-41ab-a5a8-c9d432ff18c5

2025-10-06 19:52:24 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 4 endpoints beneath base path '/actuator'
2025-10-06 19:52:24 [restartedMain] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080 (http)
2025-10-06 19:52:24 [restartedMain] INFO  c.m.i.InventoryManagementApplication - Started InventoryManagementApplication in 3.79 seconds (process running for 4.577)
2025-10-06 19:52:25 [RMI TCP Connection(1)-172.18.16.1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:52:25 [RMI TCP Connection(1)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:52:25 [RMI TCP Connection(1)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4021063a columns: 1 rows: 1 pos: -1
2025-10-06 19:52:25 [RMI TCP Connection(1)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:52:25 [RMI TCP Connection(1)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@11123a34 columns: 1 rows: 1 pos: -1
2025-10-06 19:52:25 [RMI TCP Connection(1)-172.18.16.1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:52:25 [RMI TCP Connection(1)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:52:25 [RMI TCP Connection(1)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3e93a9e1 columns: 1 rows: 1 pos: -1
2025-10-06 19:53:17 [reactor-http-nio-3] INFO  c.m.i.i.a.input.rest.AuthController - POST /api/auth/login - Username: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - User-Agent: PostmanRuntime/7.48.0 - Authentication attempt
2025-10-06 19:53:17 [reactor-http-nio-3] INFO  c.m.i.a.service.AuthService - Authentication attempt for user: user_dinosaurio
2025-10-06 19:53:17 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:53:17 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:53:17 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@610ea0d9 columns: 1 rows: 1 pos: -1
2025-10-06 19:53:17 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:53:17 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3c266c2d columns: 7 rows: 1 pos: -1
2025-10-06 19:53:17 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:53:17 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:53:17 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3c11dcd5 columns: 1 rows: 1 pos: -1
2025-10-06 19:53:17 [reactor-http-nio-3] INFO  c.m.i.i.security.JwtUtil - JWT token generated successfully for user: user_dinosaurio - Token expires in 86400000 ms
2025-10-06 19:53:17 [reactor-http-nio-3] INFO  c.m.i.a.service.AuthService - Authentication successful for user: user_dinosaurio
2025-10-06 19:53:17 [reactor-http-nio-3] INFO  c.m.i.i.a.input.rest.AuthController - Authentication successful - Username: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - Token generated successfully
2025-10-06 19:53:20 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:53:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:53:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1e902d39 columns: 1 rows: 1 pos: -1
2025-10-06 19:53:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:53:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3a84f9cc columns: 7 rows: 1 pos: -1
2025-10-06 19:53:20 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:53:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:53:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@45b2fa0a columns: 1 rows: 1 pos: -1
2025-10-06 19:53:20 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:53:20 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:53:20 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4a2c5141 columns: 1 rows: 1 pos: -1
2025-10-06 19:53:20 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:53:20 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@388aefcd columns: 7 rows: 1 pos: -1
2025-10-06 19:53:20 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:53:20 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:53:20 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1c7d2afa columns: 1 rows: 1 pos: -1
2025-10-06 19:53:20 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:53:20 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:53:20 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@63b38b17 columns: 1 rows: 1 pos: -1
2025-10-06 19:53:20 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:53:20 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5a48f97c columns: 7 rows: 1 pos: -1
2025-10-06 19:53:20 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:53:20 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:53:20 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6bb31388 columns: 1 rows: 1 pos: -1
2025-10-06 19:53:20 [parallel-7] WARN  c.m.i.i.s.StorePermissionAspect - User user_dinosaurio attempted admin-only operation without admin role
2025-10-06 19:53:20 [parallel-7] ERROR c.m.i.i.s.StorePermissionAspect - Permission check failed: Admin access required
2025-10-06 19:53:28 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:53:28 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:53:28 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3fbb3eec columns: 1 rows: 1 pos: -1
2025-10-06 19:53:28 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:53:28 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2d9e91e7 columns: 7 rows: 1 pos: -1
2025-10-06 19:53:28 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:53:28 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:53:28 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@56645cf2 columns: 1 rows: 1 pos: -1
2025-10-06 19:53:28 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:53:28 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:53:28 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5d87b593 columns: 1 rows: 1 pos: -1
2025-10-06 19:53:28 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:53:28 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4499b0ce columns: 7 rows: 1 pos: -1
2025-10-06 19:53:28 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:53:28 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:53:28 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@207b98ed columns: 1 rows: 1 pos: -1
2025-10-06 19:53:28 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:53:28 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:53:28 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@482d5c20 columns: 1 rows: 1 pos: -1
2025-10-06 19:53:28 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:53:28 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1a05fb84 columns: 7 rows: 1 pos: -1
2025-10-06 19:53:28 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:53:28 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:53:28 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@10caaf40 columns: 1 rows: 1 pos: -1
2025-10-06 19:53:28 [parallel-11] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = :username AND (u.role = 'ADMIN' OR sp.store_id = :storeId)] to [SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = $1 AND (u.role = 'ADMIN' OR sp.store_id = $2)]
2025-10-06 19:53:28 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:53:28 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:53:28 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@554c5e73 columns: 1 rows: 1 pos: -1
2025-10-06 19:53:28 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = $1 AND (u.role = 'ADMIN' OR sp.store_id = $2) {1: 'user_dinosaurio', 2: CAST(4 AS BIGINT)}
2025-10-06 19:53:28 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4b04e8e4 columns: 1 rows: 1 pos: -1
2025-10-06 19:53:28 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:53:28 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:53:28 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7df73660 columns: 1 rows: 1 pos: -1
2025-10-06 19:53:28 [parallel-11] ERROR c.m.i.i.s.StorePermissionAspect - Permission check failed: Failed to convert from type [io.r2dbc.h2.H2Row] to type [java.lang.Boolean] for value [io.r2dbc.h2.H2Row@6efc301c]
2025-10-06 19:53:28 [parallel-11] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Failed to convert from type [io.r2dbc.h2.H2Row] to type [java.lang.Boolean] for value [io.r2dbc.h2.H2Row@6efc301c]
org.springframework.core.convert.ConversionFailedException: Failed to convert from type [io.r2dbc.h2.H2Row] to type [java.lang.Boolean] for value [io.r2dbc.h2.H2Row@6efc301c]
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProductAndStore(String, Long, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/REM-001-BL-M/stores/4" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:182)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:165)
		at org.springframework.data.r2dbc.core.R2dbcEntityTemplate.lambda$getRowsFetchSpec$15(R2dbcEntityTemplate.java:858)
		at org.springframework.data.r2dbc.core.R2dbcEntityTemplate.lambda$getRowsFetchSpec$17(R2dbcEntityTemplate.java:877)
		at io.r2dbc.h2.H2Result.lambda$map$1(H2Result.java:103)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onNext(FluxFlatMap.java:430)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.lang.IllegalArgumentException: Cannot decode value of type java.lang.Boolean
	at io.r2dbc.h2.codecs.DefaultCodecs.decode(DefaultCodecs.java:61)
	at io.r2dbc.h2.H2Row.get(H2Row.java:65)
	at org.springframework.data.r2dbc.convert.R2dbcConverters$RowToBooleanConverter.convert(R2dbcConverters.java:78)
	at org.springframework.data.r2dbc.convert.R2dbcConverters$RowToBooleanConverter.convert(R2dbcConverters.java:72)
	at org.springframework.core.convert.support.GenericConversionService$ConverterAdapter.convert(GenericConversionService.java:364)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:182)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:165)
	at org.springframework.data.r2dbc.core.R2dbcEntityTemplate.lambda$getRowsFetchSpec$15(R2dbcEntityTemplate.java:858)
	at org.springframework.data.r2dbc.core.R2dbcEntityTemplate.lambda$getRowsFetchSpec$17(R2dbcEntityTemplate.java:877)
	at io.r2dbc.h2.H2Result.lambda$map$1(H2Result.java:103)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onNext(FluxFlatMap.java:430)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:539)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
	at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
	at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
	at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
	at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
	at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
	at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
	at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
	at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
	at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
	at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:53:28 [parallel-11] ERROR c.m.i.i.e.GlobalExceptionHandler - Unexpected error
org.springframework.core.convert.ConversionFailedException: Failed to convert from type [io.r2dbc.h2.H2Row] to type [java.lang.Boolean] for value [io.r2dbc.h2.H2Row@6efc301c]
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProductAndStore(String, Long, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/REM-001-BL-M/stores/4" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:182)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:165)
		at org.springframework.data.r2dbc.core.R2dbcEntityTemplate.lambda$getRowsFetchSpec$15(R2dbcEntityTemplate.java:858)
		at org.springframework.data.r2dbc.core.R2dbcEntityTemplate.lambda$getRowsFetchSpec$17(R2dbcEntityTemplate.java:877)
		at io.r2dbc.h2.H2Result.lambda$map$1(H2Result.java:103)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onNext(FluxFlatMap.java:430)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.lang.IllegalArgumentException: Cannot decode value of type java.lang.Boolean
	at io.r2dbc.h2.codecs.DefaultCodecs.decode(DefaultCodecs.java:61)
	at io.r2dbc.h2.H2Row.get(H2Row.java:65)
	at org.springframework.data.r2dbc.convert.R2dbcConverters$RowToBooleanConverter.convert(R2dbcConverters.java:78)
	at org.springframework.data.r2dbc.convert.R2dbcConverters$RowToBooleanConverter.convert(R2dbcConverters.java:72)
	at org.springframework.core.convert.support.GenericConversionService$ConverterAdapter.convert(GenericConversionService.java:364)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:182)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:165)
	at org.springframework.data.r2dbc.core.R2dbcEntityTemplate.lambda$getRowsFetchSpec$15(R2dbcEntityTemplate.java:858)
	at org.springframework.data.r2dbc.core.R2dbcEntityTemplate.lambda$getRowsFetchSpec$17(R2dbcEntityTemplate.java:877)
	at io.r2dbc.h2.H2Result.lambda$map$1(H2Result.java:103)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onNext(FluxFlatMap.java:430)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:539)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
	at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
	at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
	at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
	at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
	at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
	at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
	at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
	at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
	at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
	at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:53:28 [parallel-11] ERROR o.s.b.a.w.r.e.AbstractErrorWebExceptionHandler - [86756c44-3]  500 Server Error for HTTP GET "/api/inventory/REM-001-BL-M/stores/4"
org.springframework.core.convert.ConversionFailedException: Failed to convert from type [io.r2dbc.h2.H2Row] to type [java.lang.Boolean] for value [io.r2dbc.h2.H2Row@6efc301c]
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProductAndStore(String, Long, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/REM-001-BL-M/stores/4" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:182)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:165)
		at org.springframework.data.r2dbc.core.R2dbcEntityTemplate.lambda$getRowsFetchSpec$15(R2dbcEntityTemplate.java:858)
		at org.springframework.data.r2dbc.core.R2dbcEntityTemplate.lambda$getRowsFetchSpec$17(R2dbcEntityTemplate.java:877)
		at io.r2dbc.h2.H2Result.lambda$map$1(H2Result.java:103)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onNext(FluxFlatMap.java:430)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.lang.IllegalArgumentException: Cannot decode value of type java.lang.Boolean
	at io.r2dbc.h2.codecs.DefaultCodecs.decode(DefaultCodecs.java:61)
	at io.r2dbc.h2.H2Row.get(H2Row.java:65)
	at org.springframework.data.r2dbc.convert.R2dbcConverters$RowToBooleanConverter.convert(R2dbcConverters.java:78)
	at org.springframework.data.r2dbc.convert.R2dbcConverters$RowToBooleanConverter.convert(R2dbcConverters.java:72)
	at org.springframework.core.convert.support.GenericConversionService$ConverterAdapter.convert(GenericConversionService.java:364)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:182)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:165)
	at org.springframework.data.r2dbc.core.R2dbcEntityTemplate.lambda$getRowsFetchSpec$15(R2dbcEntityTemplate.java:858)
	at org.springframework.data.r2dbc.core.R2dbcEntityTemplate.lambda$getRowsFetchSpec$17(R2dbcEntityTemplate.java:877)
	at io.r2dbc.h2.H2Result.lambda$map$1(H2Result.java:103)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onNext(FluxFlatMap.java:430)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:539)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
	at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
	at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
	at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
	at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
	at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
	at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
	at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
	at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
	at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
	at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:53:43 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:53:43 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:53:43 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@66eadaf2 columns: 1 rows: 1 pos: -1
2025-10-06 19:53:43 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:53:43 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4a1b19f2 columns: 7 rows: 1 pos: -1
2025-10-06 19:53:43 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:53:43 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:53:43 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5dffbbe5 columns: 1 rows: 1 pos: -1
2025-10-06 19:53:43 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:53:43 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:53:43 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4fd408cf columns: 1 rows: 1 pos: -1
2025-10-06 19:53:43 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:53:43 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4789d8ea columns: 7 rows: 1 pos: -1
2025-10-06 19:53:43 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:53:43 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:53:43 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@52c2f5a columns: 1 rows: 1 pos: -1
2025-10-06 19:53:43 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:53:43 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:53:43 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1266ec1c columns: 1 rows: 1 pos: -1
2025-10-06 19:53:43 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 19:53:43 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@474ebbc1 columns: 7 rows: 1 pos: -1
2025-10-06 19:53:43 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:53:43 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:53:43 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@39daecd7 columns: 1 rows: 1 pos: -1
2025-10-06 19:53:43 [parallel-4] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = :username AND (u.role = 'ADMIN' OR sp.store_id = :storeId)] to [SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = $1 AND (u.role = 'ADMIN' OR sp.store_id = $2)]
2025-10-06 19:53:43 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:53:43 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:53:43 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2e5bd101 columns: 1 rows: 1 pos: -1
2025-10-06 19:53:43 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM users u LEFT JOIN user_store_permissions sp ON u.id = sp.user_id WHERE u.username = $1 AND (u.role = 'ADMIN' OR sp.store_id = $2) {1: 'user_dinosaurio', 2: CAST(1 AS BIGINT)}
2025-10-06 19:53:43 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@21e206ef columns: 1 rows: 1 pos: -1
2025-10-06 19:53:43 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:53:43 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:53:43 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4aa04a4f columns: 1 rows: 1 pos: -1
2025-10-06 19:53:43 [parallel-4] ERROR c.m.i.i.s.StorePermissionAspect - Permission check failed: Failed to convert from type [io.r2dbc.h2.H2Row] to type [java.lang.Boolean] for value [io.r2dbc.h2.H2Row@72c7752e]
2025-10-06 19:53:43 [parallel-4] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Failed to convert from type [io.r2dbc.h2.H2Row] to type [java.lang.Boolean] for value [io.r2dbc.h2.H2Row@72c7752e]
org.springframework.core.convert.ConversionFailedException: Failed to convert from type [io.r2dbc.h2.H2Row] to type [java.lang.Boolean] for value [io.r2dbc.h2.H2Row@72c7752e]
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProductAndStore(String, Long, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/REM-001-BL-M/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:182)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:165)
		at org.springframework.data.r2dbc.core.R2dbcEntityTemplate.lambda$getRowsFetchSpec$15(R2dbcEntityTemplate.java:858)
		at org.springframework.data.r2dbc.core.R2dbcEntityTemplate.lambda$getRowsFetchSpec$17(R2dbcEntityTemplate.java:877)
		at io.r2dbc.h2.H2Result.lambda$map$1(H2Result.java:103)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onNext(FluxFlatMap.java:430)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.lang.IllegalArgumentException: Cannot decode value of type java.lang.Boolean
	at io.r2dbc.h2.codecs.DefaultCodecs.decode(DefaultCodecs.java:61)
	at io.r2dbc.h2.H2Row.get(H2Row.java:65)
	at org.springframework.data.r2dbc.convert.R2dbcConverters$RowToBooleanConverter.convert(R2dbcConverters.java:78)
	at org.springframework.data.r2dbc.convert.R2dbcConverters$RowToBooleanConverter.convert(R2dbcConverters.java:72)
	at org.springframework.core.convert.support.GenericConversionService$ConverterAdapter.convert(GenericConversionService.java:364)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:182)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:165)
	at org.springframework.data.r2dbc.core.R2dbcEntityTemplate.lambda$getRowsFetchSpec$15(R2dbcEntityTemplate.java:858)
	at org.springframework.data.r2dbc.core.R2dbcEntityTemplate.lambda$getRowsFetchSpec$17(R2dbcEntityTemplate.java:877)
	at io.r2dbc.h2.H2Result.lambda$map$1(H2Result.java:103)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onNext(FluxFlatMap.java:430)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:539)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
	at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
	at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
	at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
	at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
	at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
	at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
	at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
	at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
	at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
	at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:53:43 [parallel-4] ERROR c.m.i.i.e.GlobalExceptionHandler - Unexpected error
org.springframework.core.convert.ConversionFailedException: Failed to convert from type [io.r2dbc.h2.H2Row] to type [java.lang.Boolean] for value [io.r2dbc.h2.H2Row@72c7752e]
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProductAndStore(String, Long, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/REM-001-BL-M/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:182)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:165)
		at org.springframework.data.r2dbc.core.R2dbcEntityTemplate.lambda$getRowsFetchSpec$15(R2dbcEntityTemplate.java:858)
		at org.springframework.data.r2dbc.core.R2dbcEntityTemplate.lambda$getRowsFetchSpec$17(R2dbcEntityTemplate.java:877)
		at io.r2dbc.h2.H2Result.lambda$map$1(H2Result.java:103)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onNext(FluxFlatMap.java:430)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.lang.IllegalArgumentException: Cannot decode value of type java.lang.Boolean
	at io.r2dbc.h2.codecs.DefaultCodecs.decode(DefaultCodecs.java:61)
	at io.r2dbc.h2.H2Row.get(H2Row.java:65)
	at org.springframework.data.r2dbc.convert.R2dbcConverters$RowToBooleanConverter.convert(R2dbcConverters.java:78)
	at org.springframework.data.r2dbc.convert.R2dbcConverters$RowToBooleanConverter.convert(R2dbcConverters.java:72)
	at org.springframework.core.convert.support.GenericConversionService$ConverterAdapter.convert(GenericConversionService.java:364)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:182)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:165)
	at org.springframework.data.r2dbc.core.R2dbcEntityTemplate.lambda$getRowsFetchSpec$15(R2dbcEntityTemplate.java:858)
	at org.springframework.data.r2dbc.core.R2dbcEntityTemplate.lambda$getRowsFetchSpec$17(R2dbcEntityTemplate.java:877)
	at io.r2dbc.h2.H2Result.lambda$map$1(H2Result.java:103)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onNext(FluxFlatMap.java:430)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:539)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
	at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
	at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
	at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
	at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
	at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
	at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
	at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
	at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
	at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
	at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:53:43 [parallel-4] ERROR o.s.b.a.w.r.e.AbstractErrorWebExceptionHandler - [86756c44-4]  500 Server Error for HTTP GET "/api/inventory/REM-001-BL-M/stores/1"
org.springframework.core.convert.ConversionFailedException: Failed to convert from type [io.r2dbc.h2.H2Row] to type [java.lang.Boolean] for value [io.r2dbc.h2.H2Row@72c7752e]
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProductAndStore(String, Long, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/REM-001-BL-M/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:47)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:182)
		at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:165)
		at org.springframework.data.r2dbc.core.R2dbcEntityTemplate.lambda$getRowsFetchSpec$15(R2dbcEntityTemplate.java:858)
		at org.springframework.data.r2dbc.core.R2dbcEntityTemplate.lambda$getRowsFetchSpec$17(R2dbcEntityTemplate.java:877)
		at io.r2dbc.h2.H2Result.lambda$map$1(H2Result.java:103)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onNext(FluxFlatMap.java:430)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.lang.IllegalArgumentException: Cannot decode value of type java.lang.Boolean
	at io.r2dbc.h2.codecs.DefaultCodecs.decode(DefaultCodecs.java:61)
	at io.r2dbc.h2.H2Row.get(H2Row.java:65)
	at org.springframework.data.r2dbc.convert.R2dbcConverters$RowToBooleanConverter.convert(R2dbcConverters.java:78)
	at org.springframework.data.r2dbc.convert.R2dbcConverters$RowToBooleanConverter.convert(R2dbcConverters.java:72)
	at org.springframework.core.convert.support.GenericConversionService$ConverterAdapter.convert(GenericConversionService.java:364)
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:182)
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:165)
	at org.springframework.data.r2dbc.core.R2dbcEntityTemplate.lambda$getRowsFetchSpec$15(R2dbcEntityTemplate.java:858)
	at org.springframework.data.r2dbc.core.R2dbcEntityTemplate.lambda$getRowsFetchSpec$17(R2dbcEntityTemplate.java:877)
	at io.r2dbc.h2.H2Result.lambda$map$1(H2Result.java:103)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onNext(FluxFlatMap.java:430)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:539)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
	at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
	at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
	at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
	at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
	at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
	at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
	at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
	at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
	at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
	at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:53:52 [reactor-http-nio-3] INFO  c.m.i.i.a.input.rest.AuthController - POST /api/auth/login - Username: admin - IP: 0:0:0:0:0:0:0:1 - User-Agent: PostmanRuntime/7.48.0 - Authentication attempt
2025-10-06 19:53:52 [reactor-http-nio-3] INFO  c.m.i.a.service.AuthService - Authentication attempt for user: admin
2025-10-06 19:53:52 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:53:52 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:53:52 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@39db6593 columns: 1 rows: 1 pos: -1
2025-10-06 19:53:52 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:53:52 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@115c620b columns: 7 rows: 1 pos: -1
2025-10-06 19:53:52 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:53:52 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:53:52 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7e9e9cfd columns: 1 rows: 1 pos: -1
2025-10-06 19:53:52 [reactor-http-nio-3] INFO  c.m.i.i.security.JwtUtil - JWT token generated successfully for user: admin - Token expires in 86400000 ms
2025-10-06 19:53:52 [reactor-http-nio-3] INFO  c.m.i.a.service.AuthService - Authentication successful for user: admin
2025-10-06 19:53:52 [reactor-http-nio-3] INFO  c.m.i.i.a.input.rest.AuthController - Authentication successful - Username: admin - IP: 0:0:0:0:0:0:0:1 - Token generated successfully
2025-10-06 19:54:00 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4bf24211 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:54:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@9aba72e columns: 7 rows: 1 pos: -1
2025-10-06 19:54:00 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7631b108 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2c2483d2 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3d69f010 columns: 7 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4397f1a0 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@18aa4287 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3999d10d columns: 7 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5ad941f7 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/REM-001-BL-M/stores - User: admin - IP: 0:0:0:0:0:0:0:1 - Admin inventory query for all stores
2025-10-06 19:54:00 [parallel-11] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: REM-001-BL-M
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5859b0b columns: 1 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.ID, products.sku, products.name, products.description, products.is_active, products.created_at, products.updated_at FROM products WHERE products.sku = $1 {1: 'REM-001-BL-M'}
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6decd934 columns: 7 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@28bf6415 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1]
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@79eb2081 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 {1: 'REM-001-BL-M'}
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@155882a8 columns: 6 rows: 3 pos: -1
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@58475263 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@375fd891 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5970da74 columns: 7 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5101f2d6 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@472ff933 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4e9b0b72 columns: 5 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@397ccc9b columns: 1 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@ed14575 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@51469eb9 columns: 7 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@52bcb496 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3394566e columns: 1 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(2 AS BIGINT)}
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7b148b7e columns: 5 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@f70e821 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6a66a4e0 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@66db95b9 columns: 7 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@796845a5 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1cba80e6 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(3 AS BIGINT)}
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@69c66a6b columns: 5 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@41a302cf columns: 1 rows: 1 pos: -1
2025-10-06 19:54:00 [parallel-11] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully retrieved inventory for product REM-001-BL-M - User: admin - IP: 0:0:0:0:0:0:0:1
2025-10-06 19:54:05 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:05 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:05 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@144505f1 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:05 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:54:05 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7cc19bd8 columns: 7 rows: 1 pos: -1
2025-10-06 19:54:05 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:05 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:05 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2fc505cb columns: 1 rows: 1 pos: -1
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@311c2d91 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@d4e728a columns: 7 rows: 1 pos: -1
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@29e444c2 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@297af09c columns: 1 rows: 1 pos: -1
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2a379e3a columns: 7 rows: 1 pos: -1
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6797514 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:05 [parallel-11] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/REM-001-BL-M/stores/1 - User: admin - IP: 0:0:0:0:0:0:0:1 - Store-specific inventory query
2025-10-06 19:54:05 [parallel-11] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: REM-001-BL-M in store: 1
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2bba66e3 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT 1 FROM stores WHERE stores.ID = $1 LIMIT 1 {1: CAST(1 AS BIGINT)}
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@464ea018 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6ae50d18 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:05 [parallel-11] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3f7e775 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'REM-001-BL-M', 2: CAST(1 AS BIGINT)}
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2389f5d2 columns: 6 rows: 1 pos: -1
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3ed6fcfe columns: 1 rows: 1 pos: -1
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1f39c451 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4be0bfbd columns: 7 rows: 1 pos: -1
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@30d6ba19 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2f4fbdd7 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2aead6db columns: 5 rows: 1 pos: -1
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:05 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@292bed05 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:05 [parallel-11] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully retrieved inventory for product REM-001-BL-M in store 1 - Quantity: 25 - User: admin - IP: 0:0:0:0:0:0:0:1
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6dba46e columns: 1 rows: 1 pos: -1
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2f9993c1 columns: 7 rows: 1 pos: -1
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@25032c8a columns: 1 rows: 1 pos: -1
2025-10-06 19:54:10 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:10 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:10 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@517fd1d9 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:10 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:54:10 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@15f31eb5 columns: 7 rows: 1 pos: -1
2025-10-06 19:54:10 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:10 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:10 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@57f97eb9 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@29dbf5ae columns: 1 rows: 1 pos: -1
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5960e1f5 columns: 7 rows: 1 pos: -1
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@17203f21 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:10 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - PUT /api/inventory/REM-001-BL-M/stores/1 - User: admin - IP: 0:0:0:0:0:0:0:1 - Setting absolute quantity to: 20
2025-10-06 19:54:10 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Updating inventory for product SKU: REM-001-BL-M in store: 1 with quantity: 20
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@58d97445 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.ID, products.sku, products.name, products.description, products.is_active, products.created_at, products.updated_at FROM products WHERE products.sku = $1 {1: 'REM-001-BL-M'}
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@70b14c5c columns: 7 rows: 1 pos: -1
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6453f769 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@d92bdfd columns: 1 rows: 1 pos: -1
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7e4ebec9 columns: 5 rows: 1 pos: -1
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2c28a68b columns: 1 rows: 1 pos: -1
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i WHERE i.product_id = :productId AND i.store_id = :storeId] to [SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2]
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3c8a81a5 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2 {1: CAST(1 AS BIGINT), 2: CAST(1 AS BIGINT)}
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@64c2bd29 columns: 6 rows: 1 pos: -1
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@37724a1 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:10 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Updating existing inventory ID: 1
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@48d4db66 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  UPDATE inventory SET product_id = $1, store_id = $2, available_qty = $3, VERSION = $4, updated_at = $5 WHERE inventory.ID = $6 AND (inventory.VERSION = $7) {1: CAST(1 AS BIGINT), 2: CAST(1 AS BIGINT), 3: 20, 4: 1, 5: TIMESTAMP '2025-10-06 19:54:10.6557044', 6: CAST(1 AS BIGINT), 7: 0}
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@faae6af columns: 1 rows: 1 pos: -1
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4be6aaff columns: 1 rows: 1 pos: -1
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@45049bcb columns: 7 rows: 1 pos: -1
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3e30b084 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@21c445f8 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@14b9c046 columns: 5 rows: 1 pos: -1
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@15d407f0 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:10 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully updated inventory for product REM-001-BL-M in store 1 - New quantity: 20 - User: admin - IP: 0:0:0:0:0:0:0:1
2025-10-06 19:54:19 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:19 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:19 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1cdefdfc columns: 1 rows: 1 pos: -1
2025-10-06 19:54:19 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:54:19 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6cf9a6e2 columns: 7 rows: 1 pos: -1
2025-10-06 19:54:19 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:19 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:19 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5e7d3765 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:19 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:19 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:19 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5dd55720 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:19 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:54:19 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@504ae5bd columns: 7 rows: 1 pos: -1
2025-10-06 19:54:19 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:19 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:19 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6b08a3dc columns: 1 rows: 1 pos: -1
2025-10-06 19:54:19 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:19 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:19 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@543d6a89 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:19 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:54:19 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6255ba6c columns: 7 rows: 1 pos: -1
2025-10-06 19:54:19 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:19 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:19 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7e7afd0b columns: 1 rows: 1 pos: -1
2025-10-06 19:54:19 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - POST /api/inventory/REM-001-BL-M/stores/1/adjustments - User: admin - IP: 0:0:0:0:0:0:0:1 - Adjusting by: -50
2025-10-06 19:54:19 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: REM-001-BL-M in store: 1 by: -50
2025-10-06 19:54:19 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 19:54:19 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:19 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:19 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@18119721 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:19 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'REM-001-BL-M', 2: CAST(1 AS BIGINT)}
2025-10-06 19:54:19 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@10782600 columns: 6 rows: 1 pos: -1
2025-10-06 19:54:19 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:19 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:19 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@76844cca columns: 1 rows: 1 pos: -1
2025-10-06 19:54:19 [reactor-http-nio-3] ERROR c.m.i.a.service.InventoryService - Error adjusting inventory for SKU REM-001-BL-M and store 1: Insufficient stock available
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Insufficient stock available
	at com.meli.inventorymanagement.application.service.InventoryService.lambda$adjustInventory$17(InventoryService.java:161)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
	at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:549)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
	at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
	at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
	at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
	at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
	at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
	at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
	at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
	at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:413)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:455)
	at reactor.netty.http.server.HttpServerOperations.handleLastHttpContent(HttpServerOperations.java:903)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:812)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:115)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:321)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:54:19 [reactor-http-nio-3] ERROR c.m.i.i.a.i.rest.InventoryController - Failed to adjust inventory for product REM-001-BL-M in store 1 by -50 - User: admin - IP: 0:0:0:0:0:0:0:1 - Error: Insufficient stock available
2025-10-06 19:54:19 [reactor-http-nio-3] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Insufficient stock available
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Insufficient stock available
	at com.meli.inventorymanagement.application.service.InventoryService.lambda$adjustInventory$17(InventoryService.java:161)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#adjustInventory(String, Long, InventoryAdjustmentRequest, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP POST "/api/inventory/REM-001-BL-M/stores/1/adjustments" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.lambda$adjustInventory$17(InventoryService.java:161)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
		at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:413)
		at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:455)
		at reactor.netty.http.server.HttpServerOperations.handleLastHttpContent(HttpServerOperations.java:903)
		at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:812)
		at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:115)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:321)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
		at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
		at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
		at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:54:19 [reactor-http-nio-3] ERROR c.m.i.i.e.GlobalExceptionHandler - Business exception: INV-004 - Insufficient stock available
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Insufficient stock available
	at com.meli.inventorymanagement.application.service.InventoryService.lambda$adjustInventory$17(InventoryService.java:161)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#adjustInventory(String, Long, InventoryAdjustmentRequest, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP POST "/api/inventory/REM-001-BL-M/stores/1/adjustments" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.lambda$adjustInventory$17(InventoryService.java:161)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
		at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:413)
		at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:455)
		at reactor.netty.http.server.HttpServerOperations.handleLastHttpContent(HttpServerOperations.java:903)
		at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:812)
		at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:115)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:321)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
		at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
		at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
		at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:54:29 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:29 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:29 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1559cf04 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:29 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:54:29 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@73309f51 columns: 7 rows: 1 pos: -1
2025-10-06 19:54:29 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:29 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:29 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@24acbe8c columns: 1 rows: 1 pos: -1
2025-10-06 19:54:29 [parallel-10] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:29 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:29 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@65c98029 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:29 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:54:29 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@13af2461 columns: 7 rows: 1 pos: -1
2025-10-06 19:54:29 [parallel-10] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:29 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:29 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7c48290b columns: 1 rows: 1 pos: -1
2025-10-06 19:54:29 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:29 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:29 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@58b18ad columns: 1 rows: 1 pos: -1
2025-10-06 19:54:29 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:54:29 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1c4a9157 columns: 7 rows: 1 pos: -1
2025-10-06 19:54:29 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:29 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:29 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@ca2e3b5 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:29 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - POST /api/inventory/REM-001-BL-MA/stores/1/adjustments - User: admin - IP: 0:0:0:0:0:0:0:1 - Adjusting by: -50
2025-10-06 19:54:29 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: REM-001-BL-MA in store: 1 by: -50
2025-10-06 19:54:29 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 19:54:29 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:29 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:29 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@19392fa4 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:29 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'REM-001-BL-MA', 2: CAST(1 AS BIGINT)}
2025-10-06 19:54:29 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@75c7ee50 columns: 6 rows: 0 pos: -1
2025-10-06 19:54:29 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:29 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:29 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@31eaf31a columns: 1 rows: 1 pos: -1
2025-10-06 19:54:29 [reactor-http-nio-3] ERROR c.m.i.a.service.InventoryService - Error adjusting inventory for SKU REM-001-BL-MA and store 1: Inventory not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Inventory not found
	at com.meli.inventorymanagement.application.service.InventoryService.adjustInventory(InventoryService.java:155)
	at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$adjustInventory$15(InventoryController.java:126)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
	at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:549)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
	at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
	at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
	at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
	at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
	at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
	at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
	at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
	at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
	at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
	at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
	at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:54:29 [reactor-http-nio-3] ERROR c.m.i.i.a.i.rest.InventoryController - Failed to adjust inventory for product REM-001-BL-MA in store 1 by -50 - User: admin - IP: 0:0:0:0:0:0:0:1 - Error: Inventory not found
2025-10-06 19:54:29 [reactor-http-nio-3] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Inventory not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Inventory not found
	at com.meli.inventorymanagement.application.service.InventoryService.adjustInventory(InventoryService.java:155)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#adjustInventory(String, Long, InventoryAdjustmentRequest, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP POST "/api/inventory/REM-001-BL-MA/stores/1/adjustments" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.adjustInventory(InventoryService.java:155)
		at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$adjustInventory$15(InventoryController.java:126)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
		at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:54:29 [reactor-http-nio-3] ERROR c.m.i.i.e.GlobalExceptionHandler - Business exception: INV-003 - Inventory not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Inventory not found
	at com.meli.inventorymanagement.application.service.InventoryService.adjustInventory(InventoryService.java:155)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#adjustInventory(String, Long, InventoryAdjustmentRequest, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP POST "/api/inventory/REM-001-BL-MA/stores/1/adjustments" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.adjustInventory(InventoryService.java:155)
		at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$adjustInventory$15(InventoryController.java:126)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
		at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:54:36 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:36 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:36 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@651947be columns: 1 rows: 1 pos: -1
2025-10-06 19:54:36 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:54:36 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@17e73c2c columns: 7 rows: 1 pos: -1
2025-10-06 19:54:36 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:36 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:36 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@13b215e8 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:36 [parallel-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:36 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:36 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@291b6821 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:36 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:54:36 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@62ed3ef7 columns: 7 rows: 1 pos: -1
2025-10-06 19:54:36 [parallel-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:36 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:36 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4f8adac6 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:36 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:36 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:36 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@78452661 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:36 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:54:36 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1355417c columns: 7 rows: 1 pos: -1
2025-10-06 19:54:36 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:36 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:36 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6d56e2b7 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:36 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - POST /api/inventory/REM-001-BL-MA/stores/4/adjustments - User: admin - IP: 0:0:0:0:0:0:0:1 - Adjusting by: -50
2025-10-06 19:54:36 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: REM-001-BL-MA in store: 4 by: -50
2025-10-06 19:54:36 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 19:54:36 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:36 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:36 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5164f01 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:36 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'REM-001-BL-MA', 2: CAST(4 AS BIGINT)}
2025-10-06 19:54:36 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@365d5773 columns: 6 rows: 0 pos: -1
2025-10-06 19:54:36 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:36 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:36 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5d3e39b8 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:36 [reactor-http-nio-3] ERROR c.m.i.a.service.InventoryService - Error adjusting inventory for SKU REM-001-BL-MA and store 4: Inventory not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Inventory not found
	at com.meli.inventorymanagement.application.service.InventoryService.adjustInventory(InventoryService.java:155)
	at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$adjustInventory$15(InventoryController.java:126)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
	at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:549)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
	at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
	at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
	at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
	at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
	at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
	at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
	at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
	at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
	at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
	at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
	at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:54:36 [reactor-http-nio-3] ERROR c.m.i.i.a.i.rest.InventoryController - Failed to adjust inventory for product REM-001-BL-MA in store 4 by -50 - User: admin - IP: 0:0:0:0:0:0:0:1 - Error: Inventory not found
2025-10-06 19:54:36 [reactor-http-nio-3] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Inventory not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Inventory not found
	at com.meli.inventorymanagement.application.service.InventoryService.adjustInventory(InventoryService.java:155)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#adjustInventory(String, Long, InventoryAdjustmentRequest, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP POST "/api/inventory/REM-001-BL-MA/stores/4/adjustments" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.adjustInventory(InventoryService.java:155)
		at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$adjustInventory$15(InventoryController.java:126)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
		at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:54:36 [reactor-http-nio-3] ERROR c.m.i.i.e.GlobalExceptionHandler - Business exception: INV-003 - Inventory not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Inventory not found
	at com.meli.inventorymanagement.application.service.InventoryService.adjustInventory(InventoryService.java:155)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#adjustInventory(String, Long, InventoryAdjustmentRequest, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP POST "/api/inventory/REM-001-BL-MA/stores/4/adjustments" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.adjustInventory(InventoryService.java:155)
		at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$adjustInventory$15(InventoryController.java:126)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
		at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:54:41 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:41 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:41 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7d9a733c columns: 1 rows: 1 pos: -1
2025-10-06 19:54:41 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:54:41 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6fd350f1 columns: 7 rows: 1 pos: -1
2025-10-06 19:54:41 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:41 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:41 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@149b3c42 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:41 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:41 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:41 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@55abe370 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:41 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:54:41 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@31e7df15 columns: 7 rows: 1 pos: -1
2025-10-06 19:54:41 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:41 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:41 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2c04ecdd columns: 1 rows: 1 pos: -1
2025-10-06 19:54:41 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:41 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:41 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@551da3ad columns: 1 rows: 1 pos: -1
2025-10-06 19:54:41 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:54:41 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@35ae9bf columns: 7 rows: 1 pos: -1
2025-10-06 19:54:41 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:41 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:41 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3ffa2ed columns: 1 rows: 1 pos: -1
2025-10-06 19:54:41 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - POST /api/inventory/REM-001-BL-M/stores/4/adjustments - User: admin - IP: 0:0:0:0:0:0:0:1 - Adjusting by: -50
2025-10-06 19:54:41 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: REM-001-BL-M in store: 4 by: -50
2025-10-06 19:54:41 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 19:54:41 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:54:41 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:41 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6f046822 columns: 1 rows: 1 pos: -1
2025-10-06 19:54:41 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'REM-001-BL-M', 2: CAST(4 AS BIGINT)}
2025-10-06 19:54:41 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@11efdef3 columns: 6 rows: 0 pos: -1
2025-10-06 19:54:41 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:54:41 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:54:41 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6f71a22b columns: 1 rows: 1 pos: -1
2025-10-06 19:54:41 [reactor-http-nio-3] ERROR c.m.i.a.service.InventoryService - Error adjusting inventory for SKU REM-001-BL-M and store 4: Inventory not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Inventory not found
	at com.meli.inventorymanagement.application.service.InventoryService.adjustInventory(InventoryService.java:155)
	at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$adjustInventory$15(InventoryController.java:126)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
	at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:549)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
	at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
	at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
	at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
	at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
	at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
	at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
	at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
	at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
	at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
	at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
	at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:54:41 [reactor-http-nio-3] ERROR c.m.i.i.a.i.rest.InventoryController - Failed to adjust inventory for product REM-001-BL-M in store 4 by -50 - User: admin - IP: 0:0:0:0:0:0:0:1 - Error: Inventory not found
2025-10-06 19:54:41 [reactor-http-nio-3] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Inventory not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Inventory not found
	at com.meli.inventorymanagement.application.service.InventoryService.adjustInventory(InventoryService.java:155)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#adjustInventory(String, Long, InventoryAdjustmentRequest, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP POST "/api/inventory/REM-001-BL-M/stores/4/adjustments" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.adjustInventory(InventoryService.java:155)
		at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$adjustInventory$15(InventoryController.java:126)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
		at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:54:41 [reactor-http-nio-3] ERROR c.m.i.i.e.GlobalExceptionHandler - Business exception: INV-003 - Inventory not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Inventory not found
	at com.meli.inventorymanagement.application.service.InventoryService.adjustInventory(InventoryService.java:155)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#adjustInventory(String, Long, InventoryAdjustmentRequest, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP POST "/api/inventory/REM-001-BL-M/stores/4/adjustments" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.adjustInventory(InventoryService.java:155)
		at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$adjustInventory$15(InventoryController.java:126)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
		at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:58:07 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.netty.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-06 19:58:07 [netty-shutdown] INFO  o.s.b.w.e.netty.GracefulShutdown - Graceful shutdown complete
2025-10-06 19:58:11 [restartedMain] INFO  c.m.i.InventoryManagementApplication - Starting InventoryManagementApplication using Java 21.0.8 with PID 30572 (C:\Users\fedem\Documents\Github\inventory-management\target\classes started by fedem in C:\Users\fedem\Documents\Github\inventory-management)
2025-10-06 19:58:11 [restartedMain] DEBUG c.m.i.InventoryManagementApplication - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-06 19:58:11 [restartedMain] INFO  c.m.i.InventoryManagementApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-06 19:58:11 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-06 19:58:11 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-06 19:58:11 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data R2DBC repositories in DEFAULT mode.
2025-10-06 19:58:12 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 93 ms. Found 4 R2DBC repository interfaces.
2025-10-06 19:58:13 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-06 19:58:13 [restartedMain] INFO  c.m.i.i.config.R2dbcConfig - Database initialization configured
2025-10-06 19:58:13 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:58:13 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@75a3c5ea columns: 1 rows: 1 pos: -1
2025-10-06 19:58:13 [single-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:13 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:13 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@67597687 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:13 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:58:13 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1811642c columns: 1 rows: 1 pos: -1
2025-10-06 19:58:13 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:58:13 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@212e6d1e columns: 1 rows: 1 pos: -1
2025-10-06 19:58:13 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:58:13 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2127f25e columns: 1 rows: 1 pos: -1
2025-10-06 19:58:13 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:58:13 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@54aaea1c columns: 1 rows: 1 pos: -1
2025-10-06 19:58:13 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:58:13 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4789d4a1 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:13 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:58:13 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@151d07d3 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:13 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:58:13 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@b36a22c columns: 1 rows: 1 pos: -1
2025-10-06 19:58:13 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS inventory
2025-10-06 19:58:13 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:58:13 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@8cf535c columns: 1 rows: 1 pos: -1
2025-10-06 19:58:13 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS user_store_permissions
2025-10-06 19:58:13 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 19:58:13 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@422df431 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:13 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS products
2025-10-06 19:58:13 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS stores
2025-10-06 19:58:13 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS users
2025-10-06 19:58:13 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS products ( id BIGINT AUTO_INCREMENT PRIMARY KEY, sku VARCHAR(50) NOT NULL UNIQUE, name VARCHAR(200) NOT NULL, description VARCHAR(500), is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 19:58:13 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS stores ( id BIGINT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100) NOT NULL UNIQUE, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 19:58:13 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS users ( id BIGINT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(50) NOT NULL UNIQUE, password_hash VARCHAR(255) NOT NULL, role VARCHAR(20) NOT NULL, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 19:58:13 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS inventory ( id BIGINT AUTO_INCREMENT PRIMARY KEY, product_id BIGINT NOT NULL, store_id BIGINT NOT NULL, available_qty INT NOT NULL DEFAULT 0, version INT NOT NULL DEFAULT 0, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (product_id) REFERENCES products(id), FOREIGN KEY (store_id) REFERENCES stores(id), UNIQUE(product_id, store_id) )
2025-10-06 19:58:13 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS user_store_permissions ( id BIGINT AUTO_INCREMENT PRIMARY KEY, user_id BIGINT NOT NULL, store_id BIGINT NOT NULL, FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (store_id) REFERENCES stores(id), UNIQUE(user_id, store_id) )
2025-10-06 19:58:13 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_inventory_product_id ON inventory(product_id)
2025-10-06 19:58:13 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_inventory_store_id ON inventory(store_id)
2025-10-06 19:58:13 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_user_store_permissions_user_id ON user_store_permissions(user_id)
2025-10-06 19:58:13 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_user_store_permissions_store_id ON user_store_permissions(store_id)
2025-10-06 19:58:13 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_products_sku ON products(sku)
2025-10-06 19:58:13 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_users_username ON users(username)
2025-10-06 19:58:13 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO stores (id, name, is_active, created_at, updated_at) VALUES (1, 'Shopping Dinosaurio Mall', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'Centro Maipu 712', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'Nuevo Centro Shopping', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 19:58:13 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO users (id, username, password_hash, role, is_active, created_at, updated_at) VALUES (1, 'admin', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'ADMIN', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'user_dinosaurio', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'user_maipu', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (4, 'user_nuevo_centro', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 19:58:13 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO user_store_permissions (id, user_id, store_id) VALUES (1, 2, 1), (2, 3, 2), (3, 4, 3)
2025-10-06 19:58:13 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO products (id, sku, name, description, is_active, created_at, updated_at) VALUES (1, 'REM-001-BL-M', 'Remera Básica Blanca M', 'Remera de algodón peinado 160gsm', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'REM-002-NG-L', 'Remera Básica Negra L', 'Remera cuello redondo negra', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'REM-003-AZ-S', 'Remera Azul S', 'Remera azul marino corte clásico', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (4, 'BUZ-001-GR-M', 'Buzo Hoodie Gris M', 'Buzo frisa liviano con capucha', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (5, 'BUZ-002-NG-L', 'Buzo Hoodie Negro L', 'Buzo de algodón grueso con bolsillo canguro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (6, 'PAN-001-NG-32', 'Pantalón Chino Negro 32', 'Pantalón tipo chino con elastano', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (7, 'PAN-002-AZ-34', 'Jeans Azul 34', 'Jeans corte slim fit azul oscuro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (8, 'BER-001-KH-M', 'Bermuda Cargo Khaki M', 'Bermuda con bolsillos laterales', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (9, 'BER-002-AZ-L', 'Bermuda Denim Azul L', 'Bermuda de jean azul clásico', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (10, 'CAM-001-BL-M', 'Camisa Blanca Oxford M', 'Camisa manga larga oxford blanco', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (11, 'CAM-002-CE-L', 'Camisa Celeste L', 'Camisa de poplin celeste claro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (12, 'CMP-001-NG-M', 'Campera Rompeviento Negra M', 'Campera liviana impermeable con cierre', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (13, 'CMP-002-AZ-L', 'Campera Puffer Azul L', 'Campera acolchada pluma sintética', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (14, 'ZAP-001-NG-42', 'Zapatillas Urbanas Negras 42', 'Zapatillas urbanas con suela EVA', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (15, 'ZAP-002-BL-41', 'Zapatillas Running Blancas 41', 'Zapatillas deportivas livianas', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (16, 'GOR-001-NG-U', 'Gorra Negra U', 'Gorra ajustable negra con visera curva', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (17, 'MED-001-BL-U', 'Pack Medias Blancas U', 'Pack x3 medias tobillera blancas', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 19:58:13 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO inventory (id, product_id, store_id, available_qty, version, updated_at) VALUES (1, 1, 1, 25, 0, CURRENT_TIMESTAMP), (2, 1, 2, 18, 0, CURRENT_TIMESTAMP), (3, 1, 3, 35, 0, CURRENT_TIMESTAMP), (4, 2, 1, 20, 0, CURRENT_TIMESTAMP), (5, 2, 2, 15, 0, CURRENT_TIMESTAMP), (6, 2, 3, 30, 0, CURRENT_TIMESTAMP), (7, 3, 1, 14, 0, CURRENT_TIMESTAMP), (8, 3, 2, 22, 0, CURRENT_TIMESTAMP), (9, 3, 3, 28, 0, CURRENT_TIMESTAMP), (10, 4, 1, 10, 0, CURRENT_TIMESTAMP), (11, 4, 2, 12, 0, CURRENT_TIMESTAMP), (12, 4, 3, 20, 0, CURRENT_TIMESTAMP), (13, 5, 1, 8, 0, CURRENT_TIMESTAMP), (14, 5, 2, 11, 0, CURRENT_TIMESTAMP), (15, 5, 3, 16, 0, CURRENT_TIMESTAMP), (16, 6, 1, 12, 0, CURRENT_TIMESTAMP), (17, 6, 2, 10, 0, CURRENT_TIMESTAMP), (18, 6, 3, 18, 0, CURRENT_TIMESTAMP), (19, 7, 1, 14, 0, CURRENT_TIMESTAMP), (20, 7, 2, 13, 0, CURRENT_TIMESTAMP), (21, 7, 3, 22, 0, CURRENT_TIMESTAMP), (22, 8, 1, 16, 0, CURRENT_TIMESTAMP), (23, 8, 2, 12, 0, CURRENT_TIMESTAMP), (24, 8, 3, 24, 0, CURRENT_TIMESTAMP), (25, 9, 1, 10, 0, CURRENT_TIMESTAMP), (26, 9, 2, 14, 0, CURRENT_TIMESTAMP), (27, 9, 3, 20, 0, CURRENT_TIMESTAMP), (28, 10, 1, 11, 0, CURRENT_TIMESTAMP), (29, 10, 2, 10, 0, CURRENT_TIMESTAMP), (30, 10, 3, 19, 0, CURRENT_TIMESTAMP), (31, 11, 1, 9, 0, CURRENT_TIMESTAMP), (32, 11, 2, 12, 0, CURRENT_TIMESTAMP), (33, 11, 3, 18, 0, CURRENT_TIMESTAMP), (34, 12, 1, 6, 0, CURRENT_TIMESTAMP), (35, 12, 2, 7, 0, CURRENT_TIMESTAMP), (36, 12, 3, 12, 0, CURRENT_TIMESTAMP), (37, 13, 1, 5, 0, CURRENT_TIMESTAMP), (38, 13, 2, 6, 0, CURRENT_TIMESTAMP), (39, 13, 3, 10, 0, CURRENT_TIMESTAMP), (40, 14, 1, 8, 0, CURRENT_TIMESTAMP), (41, 14, 2, 10, 0, CURRENT_TIMESTAMP), (42, 14, 3, 15, 0, CURRENT_TIMESTAMP), (43, 15, 1, 7, 0, CURRENT_TIMESTAMP), (44, 15, 2, 9, 0, CURRENT_TIMESTAMP), (45, 15, 3, 14, 0, CURRENT_TIMESTAMP), (46, 16, 1, 20, 0, CURRENT_TIMESTAMP), (47, 16, 2, 18, 0, CURRENT_TIMESTAMP), (48, 16, 3, 30, 0, CURRENT_TIMESTAMP), (49, 17, 1, 35, 0, CURRENT_TIMESTAMP), (50, 17, 2, 28, 0, CURRENT_TIMESTAMP), (51, 17, 3, 50, 0, CURRENT_TIMESTAMP)
2025-10-06 19:58:13 [Thread-18] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:13 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:13 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@565e094f columns: 1 rows: 1 pos: -1
2025-10-06 19:58:13 [restartedMain] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: c3e7cc19-9aa9-45e6-836f-dd6c1f477da3

2025-10-06 19:58:14 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 4 endpoints beneath base path '/actuator'
2025-10-06 19:58:14 [restartedMain] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080 (http)
2025-10-06 19:58:14 [restartedMain] INFO  c.m.i.InventoryManagementApplication - Started InventoryManagementApplication in 3.577 seconds (process running for 4.137)
2025-10-06 19:58:14 [RMI TCP Connection(3)-172.18.16.1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:14 [RMI TCP Connection(3)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:14 [RMI TCP Connection(3)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5ca9f475 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:14 [RMI TCP Connection(3)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:14 [RMI TCP Connection(3)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@324f16fa columns: 1 rows: 1 pos: -1
2025-10-06 19:58:14 [RMI TCP Connection(3)-172.18.16.1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:14 [RMI TCP Connection(3)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:14 [RMI TCP Connection(3)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3e4b06df columns: 1 rows: 1 pos: -1
2025-10-06 19:58:32 [reactor-http-nio-3] INFO  c.m.i.i.a.input.rest.AuthController - POST /api/auth/login - Username: admin - IP: 0:0:0:0:0:0:0:1 - User-Agent: PostmanRuntime/7.48.0 - Authentication attempt
2025-10-06 19:58:32 [reactor-http-nio-3] INFO  c.m.i.a.service.AuthService - Authentication attempt for user: admin
2025-10-06 19:58:32 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:32 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:32 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6bbd1245 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:32 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:58:32 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5bc5694f columns: 7 rows: 1 pos: -1
2025-10-06 19:58:32 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:32 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:32 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@52967d73 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:32 [reactor-http-nio-3] INFO  c.m.i.i.security.JwtUtil - JWT token generated successfully for user: admin - Token expires in 86400000 ms
2025-10-06 19:58:32 [reactor-http-nio-3] INFO  c.m.i.a.service.AuthService - Authentication successful for user: admin
2025-10-06 19:58:32 [reactor-http-nio-3] INFO  c.m.i.i.a.input.rest.AuthController - Authentication successful - Username: admin - IP: 0:0:0:0:0:0:0:1 - Token generated successfully
2025-10-06 19:58:42 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:42 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:42 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6fea9bda columns: 1 rows: 1 pos: -1
2025-10-06 19:58:42 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:58:42 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@34c5cf8 columns: 7 rows: 1 pos: -1
2025-10-06 19:58:42 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:42 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:42 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5cbfa08 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:42 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:42 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:42 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1a8549a6 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:42 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:58:42 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@30273dab columns: 7 rows: 1 pos: -1
2025-10-06 19:58:42 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:42 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:42 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@40ce0b96 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:42 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:42 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:42 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@715dc7d2 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:42 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:58:42 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5f8580a5 columns: 7 rows: 1 pos: -1
2025-10-06 19:58:42 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:42 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:42 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@442d2181 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:42 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - POST /api/inventory/REM-001-BL-M/stores/1/adjustments - User: admin - IP: 0:0:0:0:0:0:0:1 - Adjusting by: -50
2025-10-06 19:58:42 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: REM-001-BL-M in store: 1 by: -50
2025-10-06 19:58:42 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 19:58:42 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:42 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:42 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5ecedb61 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:42 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'REM-001-BL-M', 2: CAST(1 AS BIGINT)}
2025-10-06 19:58:42 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7af167a columns: 6 rows: 1 pos: -1
2025-10-06 19:58:42 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:42 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:42 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7bddfa8b columns: 1 rows: 1 pos: -1
2025-10-06 19:58:42 [reactor-http-nio-3] ERROR c.m.i.a.service.InventoryService - Error adjusting inventory for SKU REM-001-BL-M and store 1: Insufficient stock available
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Insufficient stock available
	at com.meli.inventorymanagement.application.service.InventoryService.lambda$adjustInventory$17(InventoryService.java:161)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
	at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:549)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
	at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
	at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
	at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
	at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
	at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
	at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
	at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
	at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
	at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
	at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
	at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:58:42 [reactor-http-nio-3] ERROR c.m.i.i.a.i.rest.InventoryController - Failed to adjust inventory for product REM-001-BL-M in store 1 by -50 - User: admin - IP: 0:0:0:0:0:0:0:1 - Error: Insufficient stock available
2025-10-06 19:58:42 [reactor-http-nio-3] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Insufficient stock available
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Insufficient stock available
	at com.meli.inventorymanagement.application.service.InventoryService.lambda$adjustInventory$17(InventoryService.java:161)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#adjustInventory(String, Long, InventoryAdjustmentRequest, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP POST "/api/inventory/REM-001-BL-M/stores/1/adjustments" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.lambda$adjustInventory$17(InventoryService.java:161)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
		at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:58:42 [reactor-http-nio-3] ERROR c.m.i.i.e.GlobalExceptionHandler - Business exception: INV-004 - Insufficient stock available
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Insufficient stock available
	at com.meli.inventorymanagement.application.service.InventoryService.lambda$adjustInventory$17(InventoryService.java:161)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#adjustInventory(String, Long, InventoryAdjustmentRequest, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP POST "/api/inventory/REM-001-BL-M/stores/1/adjustments" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.lambda$adjustInventory$17(InventoryService.java:161)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
		at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:58:48 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1a364f26 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:58:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@36cb5b9f columns: 7 rows: 1 pos: -1
2025-10-06 19:58:48 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@68905f71 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@28662d02 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@613cb48e columns: 7 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7b2fbfe9 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3e53800b columns: 1 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@25751c1d columns: 7 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4a1348ab columns: 1 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/REM-001-BL-M/stores - User: admin - IP: 0:0:0:0:0:0:0:1 - Admin inventory query for all stores
2025-10-06 19:58:48 [parallel-12] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: REM-001-BL-M
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6d074cf1 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.ID, products.sku, products.name, products.description, products.is_active, products.created_at, products.updated_at FROM products WHERE products.sku = $1 {1: 'REM-001-BL-M'}
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1ccc7e36 columns: 7 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@58a30240 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1]
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5334ee4a columns: 1 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 {1: 'REM-001-BL-M'}
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@193a6c3f columns: 6 rows: 3 pos: -1
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@727c9793 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@145f49ed columns: 1 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5cd4c476 columns: 7 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@d973390 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@19648c91 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@433f1e5d columns: 5 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@281490d0 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2daae421 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7b5287d6 columns: 7 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7cb279af columns: 1 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@69405acd columns: 1 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(2 AS BIGINT)}
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@26229d88 columns: 5 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@57e08391 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@ee12954 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5032528d columns: 7 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@56b9634d columns: 1 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1371cdc2 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(3 AS BIGINT)}
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7d7a1d8a columns: 5 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:48 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1b709a5f columns: 1 rows: 1 pos: -1
2025-10-06 19:58:48 [parallel-12] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully retrieved inventory for product REM-001-BL-M - User: admin - IP: 0:0:0:0:0:0:0:1
2025-10-06 19:58:51 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4b4d038e columns: 1 rows: 1 pos: -1
2025-10-06 19:58:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:58:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@16b86a4c columns: 7 rows: 1 pos: -1
2025-10-06 19:58:51 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@240447a1 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:51 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:51 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:51 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@315be849 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:51 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:58:51 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@37f4cebe columns: 7 rows: 1 pos: -1
2025-10-06 19:58:51 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:51 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:51 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7f6a3e72 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:51 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:51 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:51 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@26173e17 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:51 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:58:51 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2f75b8a4 columns: 7 rows: 1 pos: -1
2025-10-06 19:58:51 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:51 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:51 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@c449908 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:51 [parallel-12] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/REM-001-BL-Ms/stores - User: admin - IP: 0:0:0:0:0:0:0:1 - Admin inventory query for all stores
2025-10-06 19:58:51 [parallel-12] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: REM-001-BL-Ms
2025-10-06 19:58:51 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:51 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:51 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1d3270b columns: 1 rows: 1 pos: -1
2025-10-06 19:58:51 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.ID, products.sku, products.name, products.description, products.is_active, products.created_at, products.updated_at FROM products WHERE products.sku = $1 {1: 'REM-001-BL-Ms'}
2025-10-06 19:58:51 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@297772e0 columns: 7 rows: 0 pos: -1
2025-10-06 19:58:51 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:51 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:51 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3a847ec9 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:51 [parallel-12] ERROR c.m.i.a.service.InventoryService - Database error while fetching inventory for SKU REM-001-BL-Ms: Product not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Product not found
	at com.meli.inventorymanagement.application.service.InventoryService.getInventoryByProductSku(InventoryService.java:44)
	at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$getInventoryByProduct$3(InventoryController.java:46)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onNext(MonoFlatMapMany.java:163)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onSubscribe(MonoFlatMapMany.java:141)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onComplete(FluxConcatArray.java:238)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
	at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:549)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
	at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
	at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
	at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
	at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
	at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
	at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
	at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
	at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
	at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
	at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:58:51 [parallel-12] ERROR c.m.i.i.a.i.rest.InventoryController - Failed to retrieve inventory for product REM-001-BL-Ms - User: admin - IP: 0:0:0:0:0:0:0:1 - Error: Product not found
2025-10-06 19:58:51 [parallel-12] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Product not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Product not found
	at com.meli.inventorymanagement.application.service.InventoryService.getInventoryByProductSku(InventoryService.java:44)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProduct(String, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/REM-001-BL-Ms/stores" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.getInventoryByProductSku(InventoryService.java:44)
		at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$getInventoryByProduct$3(InventoryController.java:46)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onNext(MonoFlatMapMany.java:163)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onSubscribe(MonoFlatMapMany.java:141)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onComplete(FluxConcatArray.java:238)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:58:51 [parallel-12] ERROR c.m.i.i.e.GlobalExceptionHandler - Business exception: INV-001 - Product not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Product not found
	at com.meli.inventorymanagement.application.service.InventoryService.getInventoryByProductSku(InventoryService.java:44)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProduct(String, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/REM-001-BL-Ms/stores" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.getInventoryByProductSku(InventoryService.java:44)
		at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$getInventoryByProduct$3(InventoryController.java:46)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onNext(MonoFlatMapMany.java:163)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onSubscribe(MonoFlatMapMany.java:141)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onComplete(FluxConcatArray.java:238)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:58:56 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@cb5a0dc columns: 1 rows: 1 pos: -1
2025-10-06 19:58:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:58:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@14576fda columns: 7 rows: 1 pos: -1
2025-10-06 19:58:56 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1ed01983 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1b1b5de9 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@661d4b4d columns: 7 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@a41062f columns: 1 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@38ae9627 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6403727c columns: 7 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6c940448 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/REM-001-BL-M/stores - User: admin - IP: 0:0:0:0:0:0:0:1 - Admin inventory query for all stores
2025-10-06 19:58:56 [parallel-5] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: REM-001-BL-M
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1395c621 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.ID, products.sku, products.name, products.description, products.is_active, products.created_at, products.updated_at FROM products WHERE products.sku = $1 {1: 'REM-001-BL-M'}
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5f6f365f columns: 7 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5830dbac columns: 1 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1]
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@43d2b571 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 {1: 'REM-001-BL-M'}
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3d9d9cda columns: 6 rows: 3 pos: -1
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7fbe8688 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@32abbd5f columns: 1 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@52b02757 columns: 7 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@69c61468 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5531085f columns: 1 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7d8a0bf columns: 5 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@182055a3 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@791584e columns: 1 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7d846685 columns: 7 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@540616a4 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@73692a2 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(2 AS BIGINT)}
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7d91aefe columns: 5 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@33eb2c3 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@40b83d21 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@68f0812c columns: 7 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5ad89cb9 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@371de04a columns: 1 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(3 AS BIGINT)}
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5d2becb4 columns: 5 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:58:56 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5f034238 columns: 1 rows: 1 pos: -1
2025-10-06 19:58:56 [parallel-5] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully retrieved inventory for product REM-001-BL-M - User: admin - IP: 0:0:0:0:0:0:0:1
2025-10-06 19:59:01 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:01 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:01 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@57d13fdd columns: 1 rows: 1 pos: -1
2025-10-06 19:59:01 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:59:01 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@26346f66 columns: 7 rows: 1 pos: -1
2025-10-06 19:59:01 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:01 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:01 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@11187d4b columns: 1 rows: 1 pos: -1
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@f6e3dfb columns: 1 rows: 1 pos: -1
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@36f6f35d columns: 7 rows: 1 pos: -1
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@86f72ea columns: 1 rows: 1 pos: -1
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4550da6a columns: 1 rows: 1 pos: -1
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@709d7515 columns: 7 rows: 1 pos: -1
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@36142138 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:01 [parallel-5] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/REM-001-BL-Ms/stores/1 - User: admin - IP: 0:0:0:0:0:0:0:1 - Store-specific inventory query
2025-10-06 19:59:01 [parallel-5] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: REM-001-BL-Ms in store: 1
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@584048e7 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT 1 FROM stores WHERE stores.ID = $1 LIMIT 1 {1: CAST(1 AS BIGINT)}
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@66cebcd4 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@28ceb7bf columns: 1 rows: 1 pos: -1
2025-10-06 19:59:01 [parallel-5] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6cf2415f columns: 1 rows: 1 pos: -1
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'REM-001-BL-Ms', 2: CAST(1 AS BIGINT)}
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@268ce3a columns: 6 rows: 0 pos: -1
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:01 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6b68f98b columns: 1 rows: 1 pos: -1
2025-10-06 19:59:01 [parallel-5] ERROR c.m.i.a.service.InventoryService - Database error while fetching inventory for SKU REM-001-BL-Ms and store 1: Inventory not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Inventory not found
	at com.meli.inventorymanagement.application.service.InventoryService.getInventoryByProductSkuAndStore(InventoryService.java:70)
	at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$getInventoryByProductAndStore$7(InventoryController.java:72)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
	at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:549)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
	at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
	at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
	at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
	at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
	at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
	at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
	at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
	at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
	at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
	at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:59:01 [parallel-5] ERROR c.m.i.i.a.i.rest.InventoryController - Failed to retrieve inventory for product REM-001-BL-Ms in store 1 - User: admin - IP: 0:0:0:0:0:0:0:1 - Error: Inventory not found
2025-10-06 19:59:01 [parallel-5] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Inventory not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Inventory not found
	at com.meli.inventorymanagement.application.service.InventoryService.getInventoryByProductSkuAndStore(InventoryService.java:70)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProductAndStore(String, Long, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/REM-001-BL-Ms/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.getInventoryByProductSkuAndStore(InventoryService.java:70)
		at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$getInventoryByProductAndStore$7(InventoryController.java:72)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:59:01 [parallel-5] ERROR c.m.i.i.e.GlobalExceptionHandler - Business exception: INV-003 - Inventory not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Inventory not found
	at com.meli.inventorymanagement.application.service.InventoryService.getInventoryByProductSkuAndStore(InventoryService.java:70)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProductAndStore(String, Long, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/REM-001-BL-Ms/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.getInventoryByProductSkuAndStore(InventoryService.java:70)
		at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$getInventoryByProductAndStore$7(InventoryController.java:72)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 19:59:31 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:31 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:31 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6222731e columns: 1 rows: 1 pos: -1
2025-10-06 19:59:31 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:59:31 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@243ec57 columns: 7 rows: 1 pos: -1
2025-10-06 19:59:31 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:31 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:31 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@58f11109 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4c4ecbff columns: 1 rows: 1 pos: -1
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5239182b columns: 7 rows: 1 pos: -1
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1dceb69b columns: 1 rows: 1 pos: -1
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2589d778 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@45837abd columns: 7 rows: 1 pos: -1
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@475b40f1 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:31 [parallel-11] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/REM-001-BL-M/stores/1 - User: admin - IP: 0:0:0:0:0:0:0:1 - Store-specific inventory query
2025-10-06 19:59:31 [parallel-11] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: REM-001-BL-M in store: 1
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3131126a columns: 1 rows: 1 pos: -1
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT 1 FROM stores WHERE stores.ID = $1 LIMIT 1 {1: CAST(1 AS BIGINT)}
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2cf09075 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4728bede columns: 1 rows: 1 pos: -1
2025-10-06 19:59:31 [parallel-11] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@56681288 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'REM-001-BL-M', 2: CAST(1 AS BIGINT)}
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4721836c columns: 6 rows: 1 pos: -1
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@211ade7a columns: 1 rows: 1 pos: -1
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@261737f4 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@12f79bd9 columns: 7 rows: 1 pos: -1
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7c1b6ec6 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4dab28d9 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6db503ae columns: 5 rows: 1 pos: -1
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:31 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4ba39787 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:31 [parallel-11] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully retrieved inventory for product REM-001-BL-M in store 1 - Quantity: 25 - User: admin - IP: 0:0:0:0:0:0:0:1
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@17f78af6 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@b92e012 columns: 7 rows: 1 pos: -1
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2cb957e6 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:37 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:37 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:37 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@657e4b65 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:37 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:59:37 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7ef81e52 columns: 7 rows: 1 pos: -1
2025-10-06 19:59:37 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:37 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:37 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@59c6a9ad columns: 1 rows: 1 pos: -1
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@69fc9c00 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@60ee9548 columns: 7 rows: 1 pos: -1
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7a2b569f columns: 1 rows: 1 pos: -1
2025-10-06 19:59:37 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - PUT /api/inventory/REM-001-BL-M/stores/1 - User: admin - IP: 0:0:0:0:0:0:0:1 - Setting absolute quantity to: 20
2025-10-06 19:59:37 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Updating inventory for product SKU: REM-001-BL-M in store: 1 with quantity: 20
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@63e26f columns: 1 rows: 1 pos: -1
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.ID, products.sku, products.name, products.description, products.is_active, products.created_at, products.updated_at FROM products WHERE products.sku = $1 {1: 'REM-001-BL-M'}
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@be488ca columns: 7 rows: 1 pos: -1
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5b8bd03 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@35da2e09 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2ff68a87 columns: 5 rows: 1 pos: -1
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4fab552d columns: 1 rows: 1 pos: -1
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i WHERE i.product_id = :productId AND i.store_id = :storeId] to [SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2]
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7ec04495 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2 {1: CAST(1 AS BIGINT), 2: CAST(1 AS BIGINT)}
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2a675d56 columns: 6 rows: 1 pos: -1
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6c8c168 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:37 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Updating existing inventory ID: 1
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@43ece199 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  UPDATE inventory SET product_id = $1, store_id = $2, available_qty = $3, VERSION = $4, updated_at = $5 WHERE inventory.ID = $6 AND (inventory.VERSION = $7) {1: CAST(1 AS BIGINT), 2: CAST(1 AS BIGINT), 3: 20, 4: 1, 5: TIMESTAMP '2025-10-06 19:59:37.4524864', 6: CAST(1 AS BIGINT), 7: 0}
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6940044c columns: 1 rows: 1 pos: -1
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4981b883 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4ce8d99a columns: 7 rows: 1 pos: -1
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@713a0015 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3f95d035 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3e2ef08d columns: 5 rows: 1 pos: -1
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@75bc7671 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:37 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully updated inventory for product REM-001-BL-M in store 1 - New quantity: 20 - User: admin - IP: 0:0:0:0:0:0:0:1
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@31fc524 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2b9ee707 columns: 7 rows: 1 pos: -1
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@77a5a34b columns: 1 rows: 1 pos: -1
2025-10-06 19:59:51 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6b2905de columns: 1 rows: 1 pos: -1
2025-10-06 19:59:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:59:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@390b5e8f columns: 7 rows: 1 pos: -1
2025-10-06 19:59:51 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:51 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@681bce14 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6b998a38 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@618a5d0b columns: 7 rows: 1 pos: -1
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@62749f7f columns: 1 rows: 1 pos: -1
2025-10-06 19:59:51 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - POST /api/inventory/REM-001-BL-M/stores/1/adjustments - User: admin - IP: 0:0:0:0:0:0:0:1 - Adjusting by: 50
2025-10-06 19:59:51 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: REM-001-BL-M in store: 1 by: 50
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@76ca7efe columns: 1 rows: 1 pos: -1
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'REM-001-BL-M', 2: CAST(1 AS BIGINT)}
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6a25507c columns: 6 rows: 1 pos: -1
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@31e0b8e7 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7868a406 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  UPDATE inventory SET product_id = $1, store_id = $2, available_qty = $3, VERSION = $4, updated_at = $5 WHERE inventory.ID = $6 AND (inventory.VERSION = $7) {1: CAST(1 AS BIGINT), 2: CAST(1 AS BIGINT), 3: 70, 4: 2, 5: TIMESTAMP '2025-10-06 19:59:51.4847862', 6: CAST(1 AS BIGINT), 7: 1}
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2676407 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:51 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Inventory adjusted successfully. New quantity: 70, Version: 2
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6f6b76f3 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4f6f6be8 columns: 7 rows: 1 pos: -1
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@12fbecd columns: 1 rows: 1 pos: -1
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@143918e columns: 1 rows: 1 pos: -1
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@18667d69 columns: 5 rows: 1 pos: -1
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6d6af937 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:51 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully adjusted inventory for product REM-001-BL-M in store 1 by 50 - Final quantity: 70 - User: admin - IP: 0:0:0:0:0:0:0:1
2025-10-06 19:59:54 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:54 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:54 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6c0fac72 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:54 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:59:54 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@48d80015 columns: 7 rows: 1 pos: -1
2025-10-06 19:59:54 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:54 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:54 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7fdfb2ee columns: 1 rows: 1 pos: -1
2025-10-06 19:59:55 [parallel-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:55 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:55 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@28ffceb columns: 1 rows: 1 pos: -1
2025-10-06 19:59:55 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:59:55 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@93820ee columns: 7 rows: 1 pos: -1
2025-10-06 19:59:55 [parallel-1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:55 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:55 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@8aeed35 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@79d6cd0d columns: 1 rows: 1 pos: -1
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3bc7484d columns: 7 rows: 1 pos: -1
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@11c6a7c0 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:55 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - PUT /api/inventory/REM-001-BL-M/stores/1 - User: admin - IP: 0:0:0:0:0:0:0:1 - Setting absolute quantity to: 20
2025-10-06 19:59:55 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Updating inventory for product SKU: REM-001-BL-M in store: 1 with quantity: 20
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5090d6c5 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.ID, products.sku, products.name, products.description, products.is_active, products.created_at, products.updated_at FROM products WHERE products.sku = $1 {1: 'REM-001-BL-M'}
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@33b6a7b9 columns: 7 rows: 1 pos: -1
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@64a06910 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@345d4f23 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6ea9caf9 columns: 5 rows: 1 pos: -1
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3eac3f0b columns: 1 rows: 1 pos: -1
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i WHERE i.product_id = :productId AND i.store_id = :storeId] to [SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2]
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4088ab5b columns: 1 rows: 1 pos: -1
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2 {1: CAST(1 AS BIGINT), 2: CAST(1 AS BIGINT)}
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7fa7cdf1 columns: 6 rows: 1 pos: -1
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@72f5e5cd columns: 1 rows: 1 pos: -1
2025-10-06 19:59:55 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Updating existing inventory ID: 1
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7c5d8b4b columns: 1 rows: 1 pos: -1
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  UPDATE inventory SET product_id = $1, store_id = $2, available_qty = $3, VERSION = $4, updated_at = $5 WHERE inventory.ID = $6 AND (inventory.VERSION = $7) {1: CAST(1 AS BIGINT), 2: CAST(1 AS BIGINT), 3: 20, 4: 3, 5: TIMESTAMP '2025-10-06 19:59:55.0262082', 6: CAST(1 AS BIGINT), 7: 2}
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@8c9255f columns: 1 rows: 1 pos: -1
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5add6d50 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2f0cfdd5 columns: 7 rows: 1 pos: -1
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@15d38970 columns: 1 rows: 1 pos: -1
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6cff726d columns: 1 rows: 1 pos: -1
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5e2a2dbb columns: 5 rows: 1 pos: -1
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 19:59:55 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5def1afe columns: 1 rows: 1 pos: -1
2025-10-06 19:59:55 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully updated inventory for product REM-001-BL-M in store 1 - New quantity: 20 - User: admin - IP: 0:0:0:0:0:0:0:1
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3bee4f13 columns: 1 rows: 1 pos: -1
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@44243aee columns: 7 rows: 1 pos: -1
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6ad57a0b columns: 1 rows: 1 pos: -1
2025-10-06 20:00:00 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:00:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:00:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@532f59bc columns: 1 rows: 1 pos: -1
2025-10-06 20:00:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 20:00:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2bef441b columns: 7 rows: 1 pos: -1
2025-10-06 20:00:00 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:00:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:00:00 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2c7f8286 columns: 1 rows: 1 pos: -1
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5c29046f columns: 1 rows: 1 pos: -1
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@795b3334 columns: 7 rows: 1 pos: -1
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@41c4c2f3 columns: 1 rows: 1 pos: -1
2025-10-06 20:00:00 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - POST /api/inventory/REM-001-BL-M/stores/1/adjustments - User: admin - IP: 0:0:0:0:0:0:0:1 - Adjusting by: 10
2025-10-06 20:00:00 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: REM-001-BL-M in store: 1 by: 10
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@75b8f7d4 columns: 1 rows: 1 pos: -1
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'REM-001-BL-M', 2: CAST(1 AS BIGINT)}
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6b0251d5 columns: 6 rows: 1 pos: -1
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@c8a942e columns: 1 rows: 1 pos: -1
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3b5b556 columns: 1 rows: 1 pos: -1
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  UPDATE inventory SET product_id = $1, store_id = $2, available_qty = $3, VERSION = $4, updated_at = $5 WHERE inventory.ID = $6 AND (inventory.VERSION = $7) {1: CAST(1 AS BIGINT), 2: CAST(1 AS BIGINT), 3: 30, 4: 4, 5: TIMESTAMP '2025-10-06 20:00:00.0446534', 6: CAST(1 AS BIGINT), 7: 3}
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@31635f76 columns: 1 rows: 1 pos: -1
2025-10-06 20:00:00 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Inventory adjusted successfully. New quantity: 30, Version: 4
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3ab8c018 columns: 1 rows: 1 pos: -1
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@c2ffd7e columns: 7 rows: 1 pos: -1
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@504705f6 columns: 1 rows: 1 pos: -1
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5fb46b15 columns: 1 rows: 1 pos: -1
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2fc657a0 columns: 5 rows: 1 pos: -1
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:00:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@76cbbc82 columns: 1 rows: 1 pos: -1
2025-10-06 20:00:00 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully adjusted inventory for product REM-001-BL-M in store 1 by 10 - Final quantity: 30 - User: admin - IP: 0:0:0:0:0:0:0:1
2025-10-06 20:02:02 [reactor-http-nio-5] INFO  c.m.i.i.a.input.rest.AuthController - POST /api/auth/login - Username: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - User-Agent: PostmanRuntime/7.48.0 - Authentication attempt
2025-10-06 20:02:02 [reactor-http-nio-5] INFO  c.m.i.a.service.AuthService - Authentication attempt for user: user_dinosaurio
2025-10-06 20:02:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@529ea848 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:02:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2b132f52 columns: 7 rows: 1 pos: -1
2025-10-06 20:02:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@712b2cfa columns: 1 rows: 1 pos: -1
2025-10-06 20:02:02 [reactor-http-nio-5] INFO  c.m.i.i.security.JwtUtil - JWT token generated successfully for user: user_dinosaurio - Token expires in 86400000 ms
2025-10-06 20:02:02 [reactor-http-nio-5] INFO  c.m.i.a.service.AuthService - Authentication successful for user: user_dinosaurio
2025-10-06 20:02:02 [reactor-http-nio-5] INFO  c.m.i.i.a.input.rest.AuthController - Authentication successful - Username: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - Token generated successfully
2025-10-06 20:02:05 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:05 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:05 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1e965cab columns: 1 rows: 1 pos: -1
2025-10-06 20:02:05 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:02:05 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6a4ef6af columns: 7 rows: 1 pos: -1
2025-10-06 20:02:05 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:05 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:05 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@42474e00 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:05 [parallel-8] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:05 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:05 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7861e876 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:05 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:02:05 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6dcb09a0 columns: 7 rows: 1 pos: -1
2025-10-06 20:02:05 [parallel-8] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:05 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:05 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@113aaedd columns: 1 rows: 1 pos: -1
2025-10-06 20:02:05 [parallel-8] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:05 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:05 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@46bc5d69 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:05 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:02:05 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6cb3e628 columns: 7 rows: 1 pos: -1
2025-10-06 20:02:05 [parallel-8] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:05 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:05 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6739fe1b columns: 1 rows: 1 pos: -1
2025-10-06 20:02:05 [parallel-8] WARN  c.m.i.i.s.StorePermissionAspect - User user_dinosaurio attempted admin-only operation without admin role
2025-10-06 20:02:05 [parallel-8] ERROR c.m.i.i.s.StorePermissionAspect - Permission check failed: Admin access required
2025-10-06 20:02:13 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@19943313 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:02:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2c7d7563 columns: 7 rows: 1 pos: -1
2025-10-06 20:02:13 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2b61cea columns: 1 rows: 1 pos: -1
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7ade8f3e columns: 1 rows: 1 pos: -1
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3163de34 columns: 7 rows: 1 pos: -1
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3cc9220d columns: 1 rows: 1 pos: -1
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@41cc48db columns: 1 rows: 1 pos: -1
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@62d513b0 columns: 7 rows: 1 pos: -1
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4bab21ca columns: 1 rows: 1 pos: -1
2025-10-06 20:02:13 [parallel-1] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4ebf838e columns: 1 rows: 1 pos: -1
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_dinosaurio', 2: CAST(1 AS BIGINT)}
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6e1c5c12 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6a326bf1 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:13 [parallel-1] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/REM-001-BL-M/stores/1 - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - Store-specific inventory query
2025-10-06 20:02:13 [parallel-1] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: REM-001-BL-M in store: 1
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@21c5c64d columns: 1 rows: 1 pos: -1
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT 1 FROM stores WHERE stores.ID = $1 LIMIT 1 {1: CAST(1 AS BIGINT)}
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1335091e columns: 1 rows: 1 pos: -1
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7e7d0a7d columns: 1 rows: 1 pos: -1
2025-10-06 20:02:13 [parallel-1] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4ac3c696 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'REM-001-BL-M', 2: CAST(1 AS BIGINT)}
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@435416c6 columns: 6 rows: 1 pos: -1
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@e507b0b columns: 1 rows: 1 pos: -1
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7b9beb7 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@42566782 columns: 7 rows: 1 pos: -1
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@582642 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3bc57846 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@16684218 columns: 5 rows: 1 pos: -1
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:13 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6ec3130d columns: 1 rows: 1 pos: -1
2025-10-06 20:02:13 [parallel-1] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully retrieved inventory for product REM-001-BL-M in store 1 - Quantity: 30 - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1
2025-10-06 20:02:18 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:18 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:18 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7c98ac3 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:18 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:02:18 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@e05a250 columns: 7 rows: 1 pos: -1
2025-10-06 20:02:18 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:18 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:18 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6f3e1002 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:18 [parallel-10] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:18 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:18 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@148ccb33 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:18 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:02:18 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@62ab1951 columns: 7 rows: 1 pos: -1
2025-10-06 20:02:18 [parallel-10] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:18 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:18 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4481312 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:18 [parallel-10] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:18 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:18 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3e2a9113 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:18 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:02:18 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6c8261f5 columns: 7 rows: 1 pos: -1
2025-10-06 20:02:18 [parallel-10] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:18 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:18 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@20de83c3 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:18 [parallel-10] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 20:02:18 [parallel-10] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:18 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:18 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@35e471ac columns: 1 rows: 1 pos: -1
2025-10-06 20:02:18 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_dinosaurio', 2: CAST(2 AS BIGINT)}
2025-10-06 20:02:18 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@41fd58e7 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:18 [parallel-10] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:18 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:18 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6e62d5c3 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:18 [parallel-10] ERROR c.m.i.i.s.StorePermissionAspect - Permission check failed: Access denied to store: 2
2025-10-06 20:02:23 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:23 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:23 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2d57437f columns: 1 rows: 1 pos: -1
2025-10-06 20:02:23 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:02:23 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7811cd84 columns: 7 rows: 1 pos: -1
2025-10-06 20:02:23 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:23 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:23 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5c86eb93 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:23 [parallel-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:23 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:23 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@490e39a5 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:23 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:02:23 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@43ad64fe columns: 7 rows: 1 pos: -1
2025-10-06 20:02:23 [parallel-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:23 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:23 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4feff7d2 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:23 [parallel-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:23 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:23 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@46bebc58 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:23 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:02:23 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@32aac7bb columns: 7 rows: 1 pos: -1
2025-10-06 20:02:23 [parallel-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:23 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:23 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@73ab4ea6 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:23 [parallel-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 20:02:23 [parallel-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:23 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:23 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@24b7f05b columns: 1 rows: 1 pos: -1
2025-10-06 20:02:23 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_dinosaurio', 2: CAST(3 AS BIGINT)}
2025-10-06 20:02:23 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@76f53921 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:23 [parallel-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:23 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:23 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3c2287e8 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:23 [parallel-3] ERROR c.m.i.i.s.StorePermissionAspect - Permission check failed: Access denied to store: 3
2025-10-06 20:02:28 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:28 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:28 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@35c7342b columns: 1 rows: 1 pos: -1
2025-10-06 20:02:28 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:02:28 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2fcc952b columns: 7 rows: 1 pos: -1
2025-10-06 20:02:28 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:28 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:28 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@792377a4 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:28 [parallel-8] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:28 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:28 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2943fadd columns: 1 rows: 1 pos: -1
2025-10-06 20:02:28 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:02:28 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@68d5b2b2 columns: 7 rows: 1 pos: -1
2025-10-06 20:02:28 [parallel-8] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:28 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:28 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@389e7a08 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:28 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:28 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:28 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@37c0b3f2 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:28 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:02:28 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6d80f671 columns: 7 rows: 1 pos: -1
2025-10-06 20:02:28 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:28 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:28 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5f5b4cca columns: 1 rows: 1 pos: -1
2025-10-06 20:02:28 [reactor-http-nio-5] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 20:02:28 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:28 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:28 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@76f6b49 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:28 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_dinosaurio', 2: CAST(2 AS BIGINT)}
2025-10-06 20:02:28 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5959c80e columns: 1 rows: 1 pos: -1
2025-10-06 20:02:28 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:28 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:28 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@d42b24 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:28 [reactor-http-nio-5] ERROR c.m.i.i.s.StorePermissionAspect - Permission check failed: Access denied to store: 2
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3f4f6581 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3a4a8919 columns: 7 rows: 1 pos: -1
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@61890e6f columns: 1 rows: 1 pos: -1
2025-10-06 20:02:35 [parallel-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:35 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:35 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4e08a068 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:35 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:02:35 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@766ad173 columns: 7 rows: 1 pos: -1
2025-10-06 20:02:35 [parallel-1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:35 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:35 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5eddf731 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@227c0e84 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@39a8430c columns: 7 rows: 1 pos: -1
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@31deee02 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@8df43de columns: 1 rows: 1 pos: -1
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_dinosaurio', 2: CAST(1 AS BIGINT)}
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@39f40056 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2a29fea2 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:35 [reactor-http-nio-5] INFO  c.m.i.i.a.i.rest.InventoryController - PUT /api/inventory/REM-001-BL-M/stores/1 - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - Setting absolute quantity to: 20
2025-10-06 20:02:35 [reactor-http-nio-5] INFO  c.m.i.a.service.InventoryService - Updating inventory for product SKU: REM-001-BL-M in store: 1 with quantity: 20
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@397122f7 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.ID, products.sku, products.name, products.description, products.is_active, products.created_at, products.updated_at FROM products WHERE products.sku = $1 {1: 'REM-001-BL-M'}
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@352bba8a columns: 7 rows: 1 pos: -1
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@461fc797 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1e5e2890 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@56b3a881 columns: 5 rows: 1 pos: -1
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@51c7c8b8 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i WHERE i.product_id = :productId AND i.store_id = :storeId] to [SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2]
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@750e204f columns: 1 rows: 1 pos: -1
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2 {1: CAST(1 AS BIGINT), 2: CAST(1 AS BIGINT)}
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5c7a6547 columns: 6 rows: 1 pos: -1
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1e0d6502 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:35 [reactor-http-nio-5] INFO  c.m.i.a.service.InventoryService - Updating existing inventory ID: 1
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7b718b42 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  UPDATE inventory SET product_id = $1, store_id = $2, available_qty = $3, VERSION = $4, updated_at = $5 WHERE inventory.ID = $6 AND (inventory.VERSION = $7) {1: CAST(1 AS BIGINT), 2: CAST(1 AS BIGINT), 3: 20, 4: 5, 5: TIMESTAMP '2025-10-06 20:02:35.7360162', 6: CAST(1 AS BIGINT), 7: 4}
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@58eb1ca columns: 1 rows: 1 pos: -1
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@b5996ea columns: 1 rows: 1 pos: -1
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@33a6005b columns: 7 rows: 1 pos: -1
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@29c950c2 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6dc71c88 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5f5c3fab columns: 5 rows: 1 pos: -1
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:35 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5113775e columns: 1 rows: 1 pos: -1
2025-10-06 20:02:35 [reactor-http-nio-5] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully updated inventory for product REM-001-BL-M in store 1 - New quantity: 20 - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3e468188 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@597d1f44 columns: 7 rows: 1 pos: -1
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6963e22e columns: 1 rows: 1 pos: -1
2025-10-06 20:02:45 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:45 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:45 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@626da8c0 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:45 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:02:45 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@70039c63 columns: 7 rows: 1 pos: -1
2025-10-06 20:02:45 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:45 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:45 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@167070f1 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@27e01e7a columns: 1 rows: 1 pos: -1
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4fbdb372 columns: 7 rows: 1 pos: -1
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4051326a columns: 1 rows: 1 pos: -1
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@45e1ee69 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_dinosaurio', 2: CAST(1 AS BIGINT)}
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@179631af columns: 1 rows: 1 pos: -1
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@168e9415 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:45 [reactor-http-nio-5] INFO  c.m.i.i.a.i.rest.InventoryController - POST /api/inventory/REM-001-BL-M/stores/1/adjustments - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - Adjusting by: 10
2025-10-06 20:02:45 [reactor-http-nio-5] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: REM-001-BL-M in store: 1 by: 10
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7aebeb77 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'REM-001-BL-M', 2: CAST(1 AS BIGINT)}
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@48de5854 columns: 6 rows: 1 pos: -1
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@433d7ac5 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4b81e2b8 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  UPDATE inventory SET product_id = $1, store_id = $2, available_qty = $3, VERSION = $4, updated_at = $5 WHERE inventory.ID = $6 AND (inventory.VERSION = $7) {1: CAST(1 AS BIGINT), 2: CAST(1 AS BIGINT), 3: 30, 4: 6, 5: TIMESTAMP '2025-10-06 20:02:45.0556547', 6: CAST(1 AS BIGINT), 7: 5}
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@76fc420f columns: 1 rows: 1 pos: -1
2025-10-06 20:02:45 [reactor-http-nio-5] INFO  c.m.i.a.service.InventoryService - Inventory adjusted successfully. New quantity: 30, Version: 6
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@d09eceb columns: 1 rows: 1 pos: -1
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1127aadd columns: 7 rows: 1 pos: -1
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1efd7370 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@709eda3 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@561cb3ed columns: 5 rows: 1 pos: -1
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:45 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1386422f columns: 1 rows: 1 pos: -1
2025-10-06 20:02:45 [reactor-http-nio-5] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully adjusted inventory for product REM-001-BL-M in store 1 by 10 - Final quantity: 30 - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5a855786 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5285fdc4 columns: 7 rows: 1 pos: -1
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@629b7879 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:56 [parallel-9] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:56 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:56 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@21c459aa columns: 1 rows: 1 pos: -1
2025-10-06 20:02:56 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:02:56 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6970fcb1 columns: 7 rows: 1 pos: -1
2025-10-06 20:02:56 [parallel-9] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:56 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:56 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7c7ec2ed columns: 1 rows: 1 pos: -1
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@25482cae columns: 1 rows: 1 pos: -1
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@11c087f0 columns: 7 rows: 1 pos: -1
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3c44eccf columns: 1 rows: 1 pos: -1
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4d676943 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_dinosaurio', 2: CAST(1 AS BIGINT)}
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6cbcdfd4 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4369806f columns: 1 rows: 1 pos: -1
2025-10-06 20:02:56 [reactor-http-nio-5] INFO  c.m.i.i.a.i.rest.InventoryController - PUT /api/inventory/REM-001-BL-M/stores/1 - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - Setting absolute quantity to: 20
2025-10-06 20:02:56 [reactor-http-nio-5] INFO  c.m.i.a.service.InventoryService - Updating inventory for product SKU: REM-001-BL-M in store: 1 with quantity: 20
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6ce6e789 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.ID, products.sku, products.name, products.description, products.is_active, products.created_at, products.updated_at FROM products WHERE products.sku = $1 {1: 'REM-001-BL-M'}
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4fd63d61 columns: 7 rows: 1 pos: -1
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5f8d6521 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7a4f1323 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@303908f3 columns: 5 rows: 1 pos: -1
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@609e3f70 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i WHERE i.product_id = :productId AND i.store_id = :storeId] to [SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2]
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1a4c1c71 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2 {1: CAST(1 AS BIGINT), 2: CAST(1 AS BIGINT)}
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@50920c87 columns: 6 rows: 1 pos: -1
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@746bca8b columns: 1 rows: 1 pos: -1
2025-10-06 20:02:56 [reactor-http-nio-5] INFO  c.m.i.a.service.InventoryService - Updating existing inventory ID: 1
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3d658fee columns: 1 rows: 1 pos: -1
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  UPDATE inventory SET product_id = $1, store_id = $2, available_qty = $3, VERSION = $4, updated_at = $5 WHERE inventory.ID = $6 AND (inventory.VERSION = $7) {1: CAST(1 AS BIGINT), 2: CAST(1 AS BIGINT), 3: 20, 4: 7, 5: TIMESTAMP '2025-10-06 20:02:56.0274633', 6: CAST(1 AS BIGINT), 7: 6}
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@40ff8be6 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1216b008 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@77aa478f columns: 7 rows: 1 pos: -1
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@276cf161 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@25ee3adf columns: 1 rows: 1 pos: -1
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@31c4aabe columns: 5 rows: 1 pos: -1
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:02:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1dc9c975 columns: 1 rows: 1 pos: -1
2025-10-06 20:02:56 [reactor-http-nio-5] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully updated inventory for product REM-001-BL-M in store 1 - New quantity: 20 - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@61503553 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@283bdd18 columns: 7 rows: 1 pos: -1
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@60fafb32 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:02 [parallel-8] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:03:02 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:02 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6ec430fa columns: 1 rows: 1 pos: -1
2025-10-06 20:03:02 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:03:02 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5ec6076c columns: 7 rows: 1 pos: -1
2025-10-06 20:03:02 [parallel-8] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:03:02 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:02 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6ef50743 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@37d0782b columns: 1 rows: 1 pos: -1
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1c28d61c columns: 7 rows: 1 pos: -1
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2f6642b3 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4181db16 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_dinosaurio', 2: CAST(1 AS BIGINT)}
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@62ed0a02 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7ff20744 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:02 [reactor-http-nio-5] INFO  c.m.i.i.a.i.rest.InventoryController - POST /api/inventory/REM-001-BL-M/stores/1/adjustments - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - Adjusting by: 40
2025-10-06 20:03:02 [reactor-http-nio-5] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: REM-001-BL-M in store: 1 by: 40
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3a538bd3 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'REM-001-BL-M', 2: CAST(1 AS BIGINT)}
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@58cb69a0 columns: 6 rows: 1 pos: -1
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@264fabe2 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@22c23feb columns: 1 rows: 1 pos: -1
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  UPDATE inventory SET product_id = $1, store_id = $2, available_qty = $3, VERSION = $4, updated_at = $5 WHERE inventory.ID = $6 AND (inventory.VERSION = $7) {1: CAST(1 AS BIGINT), 2: CAST(1 AS BIGINT), 3: 60, 4: 8, 5: TIMESTAMP '2025-10-06 20:03:02.8697032', 6: CAST(1 AS BIGINT), 7: 7}
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@22b00e5c columns: 1 rows: 1 pos: -1
2025-10-06 20:03:02 [reactor-http-nio-5] INFO  c.m.i.a.service.InventoryService - Inventory adjusted successfully. New quantity: 60, Version: 8
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6de29d91 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@986be69 columns: 7 rows: 1 pos: -1
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@763cb0d9 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@338227ec columns: 1 rows: 1 pos: -1
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@d93bf93 columns: 5 rows: 1 pos: -1
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:02 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4c0ffdb8 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:02 [reactor-http-nio-5] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully adjusted inventory for product REM-001-BL-M in store 1 by 40 - Final quantity: 60 - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@547a74c7 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7190109c columns: 7 rows: 1 pos: -1
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@579fe091 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:10 [parallel-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:03:10 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:10 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5bd3fb06 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:10 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:03:10 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@167a188 columns: 7 rows: 1 pos: -1
2025-10-06 20:03:10 [parallel-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:03:10 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:10 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@792da3b8 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2f3633a3 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@47ca7174 columns: 7 rows: 1 pos: -1
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@30004f71 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3ae05c8a columns: 1 rows: 1 pos: -1
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_dinosaurio', 2: CAST(1 AS BIGINT)}
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2c04409 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@30f3050e columns: 1 rows: 1 pos: -1
2025-10-06 20:03:10 [reactor-http-nio-5] INFO  c.m.i.i.a.i.rest.InventoryController - POST /api/inventory/REM-001-BL-M/stores/1/adjustments - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - Adjusting by: -40
2025-10-06 20:03:10 [reactor-http-nio-5] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: REM-001-BL-M in store: 1 by: -40
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@82fe68a columns: 1 rows: 1 pos: -1
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'REM-001-BL-M', 2: CAST(1 AS BIGINT)}
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@771e79a8 columns: 6 rows: 1 pos: -1
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2f0e6af0 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@454002b0 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  UPDATE inventory SET product_id = $1, store_id = $2, available_qty = $3, VERSION = $4, updated_at = $5 WHERE inventory.ID = $6 AND (inventory.VERSION = $7) {1: CAST(1 AS BIGINT), 2: CAST(1 AS BIGINT), 3: 20, 4: 9, 5: TIMESTAMP '2025-10-06 20:03:10.972195', 6: CAST(1 AS BIGINT), 7: 8}
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2772b090 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:10 [reactor-http-nio-5] INFO  c.m.i.a.service.InventoryService - Inventory adjusted successfully. New quantity: 20, Version: 9
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@760a622e columns: 1 rows: 1 pos: -1
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@a737fda columns: 7 rows: 1 pos: -1
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4832c95 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3021136b columns: 1 rows: 1 pos: -1
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@65e9b072 columns: 5 rows: 1 pos: -1
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:10 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@304f2908 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:10 [reactor-http-nio-5] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully adjusted inventory for product REM-001-BL-M in store 1 by -40 - Final quantity: 20 - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@620c8dd1 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@21551a75 columns: 7 rows: 1 pos: -1
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@216474ee columns: 1 rows: 1 pos: -1
2025-10-06 20:03:13 [parallel-2] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:03:13 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:13 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@bdf19d4 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:13 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:03:13 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@37f71aa4 columns: 7 rows: 1 pos: -1
2025-10-06 20:03:13 [parallel-2] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:03:13 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:13 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@69a5fb16 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@344136c1 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@17a23d76 columns: 7 rows: 1 pos: -1
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@11444d2a columns: 1 rows: 1 pos: -1
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2ac15787 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_dinosaurio', 2: CAST(1 AS BIGINT)}
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@437d2117 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2802c0d0 columns: 1 rows: 1 pos: -1
2025-10-06 20:03:13 [reactor-http-nio-5] INFO  c.m.i.i.a.i.rest.InventoryController - POST /api/inventory/REM-001-BL-M/stores/1/adjustments - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - Adjusting by: -40
2025-10-06 20:03:13 [reactor-http-nio-5] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: REM-001-BL-M in store: 1 by: -40
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@22802aad columns: 1 rows: 1 pos: -1
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'REM-001-BL-M', 2: CAST(1 AS BIGINT)}
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4a41e6c3 columns: 6 rows: 1 pos: -1
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:03:13 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@26bd4bb columns: 1 rows: 1 pos: -1
2025-10-06 20:03:13 [reactor-http-nio-5] ERROR c.m.i.a.service.InventoryService - Error adjusting inventory for SKU REM-001-BL-M and store 1: Insufficient stock available
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Insufficient stock available
	at com.meli.inventorymanagement.application.service.InventoryService.lambda$adjustInventory$17(InventoryService.java:161)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
	at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:549)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
	at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
	at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
	at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
	at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
	at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
	at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
	at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
	at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
	at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
	at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
	at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:03:13 [reactor-http-nio-5] ERROR c.m.i.i.a.i.rest.InventoryController - Failed to adjust inventory for product REM-001-BL-M in store 1 by -40 - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - Error: Insufficient stock available
2025-10-06 20:03:13 [reactor-http-nio-5] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Insufficient stock available
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Insufficient stock available
	at com.meli.inventorymanagement.application.service.InventoryService.lambda$adjustInventory$17(InventoryService.java:161)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#adjustInventory(String, Long, InventoryAdjustmentRequest, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP POST "/api/inventory/REM-001-BL-M/stores/1/adjustments" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.lambda$adjustInventory$17(InventoryService.java:161)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
		at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:03:13 [reactor-http-nio-5] ERROR c.m.i.i.e.GlobalExceptionHandler - Business exception: INV-004 - Insufficient stock available
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Insufficient stock available
	at com.meli.inventorymanagement.application.service.InventoryService.lambda$adjustInventory$17(InventoryService.java:161)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#adjustInventory(String, Long, InventoryAdjustmentRequest, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP POST "/api/inventory/REM-001-BL-M/stores/1/adjustments" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.lambda$adjustInventory$17(InventoryService.java:161)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
		at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@17eb8108 columns: 1 rows: 1 pos: -1
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3f9473b6 columns: 7 rows: 1 pos: -1
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5b2ba5f7 columns: 1 rows: 1 pos: -1
2025-10-06 20:04:34 [parallel-8] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:04:34 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:04:34 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@38321647 columns: 1 rows: 1 pos: -1
2025-10-06 20:04:34 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:04:34 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@725ceda columns: 7 rows: 1 pos: -1
2025-10-06 20:04:34 [parallel-8] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:04:34 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:04:34 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7638858 columns: 1 rows: 1 pos: -1
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@103bb4b6 columns: 1 rows: 1 pos: -1
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4ee0e586 columns: 7 rows: 1 pos: -1
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@c8f6a86 columns: 1 rows: 1 pos: -1
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@8d9e0dd columns: 1 rows: 1 pos: -1
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_dinosaurio', 2: CAST(1 AS BIGINT)}
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@69dcd4a9 columns: 1 rows: 1 pos: -1
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3887d3fc columns: 1 rows: 1 pos: -1
2025-10-06 20:04:34 [reactor-http-nio-7] INFO  c.m.i.i.a.i.rest.InventoryController - POST /api/inventory/REM-001-BL-Ms/stores/1/adjustments - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - Adjusting by: -40
2025-10-06 20:04:34 [reactor-http-nio-7] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: REM-001-BL-Ms in store: 1 by: -40
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7069e9ef columns: 1 rows: 1 pos: -1
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'REM-001-BL-Ms', 2: CAST(1 AS BIGINT)}
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6c476d94 columns: 6 rows: 0 pos: -1
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:04:34 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6dd88b6a columns: 1 rows: 1 pos: -1
2025-10-06 20:04:34 [reactor-http-nio-7] ERROR c.m.i.a.service.InventoryService - Error adjusting inventory for SKU REM-001-BL-Ms and store 1: Inventory not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Inventory not found
	at com.meli.inventorymanagement.application.service.InventoryService.adjustInventory(InventoryService.java:155)
	at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$adjustInventory$15(InventoryController.java:126)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:129)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
	at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:549)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
	at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
	at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
	at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
	at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
	at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
	at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
	at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
	at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
	at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
	at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
	at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:04:34 [reactor-http-nio-7] ERROR c.m.i.i.a.i.rest.InventoryController - Failed to adjust inventory for product REM-001-BL-Ms in store 1 by -40 - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - Error: Inventory not found
2025-10-06 20:04:34 [reactor-http-nio-7] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Inventory not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Inventory not found
	at com.meli.inventorymanagement.application.service.InventoryService.adjustInventory(InventoryService.java:155)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#adjustInventory(String, Long, InventoryAdjustmentRequest, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP POST "/api/inventory/REM-001-BL-Ms/stores/1/adjustments" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.adjustInventory(InventoryService.java:155)
		at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$adjustInventory$15(InventoryController.java:126)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:129)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
		at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:04:34 [reactor-http-nio-7] ERROR c.m.i.i.e.GlobalExceptionHandler - Business exception: INV-003 - Inventory not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Inventory not found
	at com.meli.inventorymanagement.application.service.InventoryService.adjustInventory(InventoryService.java:155)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#adjustInventory(String, Long, InventoryAdjustmentRequest, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP POST "/api/inventory/REM-001-BL-Ms/stores/1/adjustments" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.adjustInventory(InventoryService.java:155)
		at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$adjustInventory$15(InventoryController.java:126)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:129)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
		at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:04:42 [reactor-http-nio-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:04:42 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:04:42 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2f853081 columns: 1 rows: 1 pos: -1
2025-10-06 20:04:42 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:04:42 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@42d82bd9 columns: 7 rows: 1 pos: -1
2025-10-06 20:04:42 [reactor-http-nio-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:04:42 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:04:42 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@12711b01 columns: 1 rows: 1 pos: -1
2025-10-06 20:04:42 [parallel-2] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:04:42 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:04:42 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@17273faa columns: 1 rows: 1 pos: -1
2025-10-06 20:04:42 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:04:42 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@39dfaee7 columns: 7 rows: 1 pos: -1
2025-10-06 20:04:42 [parallel-2] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:04:42 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:04:42 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@374de3b9 columns: 1 rows: 1 pos: -1
2025-10-06 20:04:42 [reactor-http-nio-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:04:42 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:04:42 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4c203298 columns: 1 rows: 1 pos: -1
2025-10-06 20:04:42 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:04:42 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7247fba4 columns: 7 rows: 1 pos: -1
2025-10-06 20:04:42 [reactor-http-nio-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:04:42 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:04:42 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7511509d columns: 1 rows: 1 pos: -1
2025-10-06 20:04:42 [reactor-http-nio-7] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 20:04:42 [reactor-http-nio-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:04:42 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:04:42 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@753f4e27 columns: 1 rows: 1 pos: -1
2025-10-06 20:04:42 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_dinosaurio', 2: CAST(2 AS BIGINT)}
2025-10-06 20:04:42 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7282a783 columns: 1 rows: 1 pos: -1
2025-10-06 20:04:42 [reactor-http-nio-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:04:42 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:04:42 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@75ba8fae columns: 1 rows: 1 pos: -1
2025-10-06 20:04:42 [reactor-http-nio-7] ERROR c.m.i.i.s.StorePermissionAspect - Permission check failed: Access denied to store: 2
2025-10-06 20:07:34 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.netty.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-06 20:07:34 [netty-shutdown] INFO  o.s.b.w.e.netty.GracefulShutdown - Graceful shutdown complete
2025-10-06 20:07:38 [restartedMain] INFO  c.m.i.InventoryManagementApplication - Starting InventoryManagementApplication using Java 21.0.8 with PID 23992 (C:\Users\fedem\Documents\Github\inventory-management\target\classes started by fedem in C:\Users\fedem\Documents\Github\inventory-management)
2025-10-06 20:07:38 [restartedMain] DEBUG c.m.i.InventoryManagementApplication - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-06 20:07:38 [restartedMain] INFO  c.m.i.InventoryManagementApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-06 20:07:38 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-06 20:07:38 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-06 20:07:39 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data R2DBC repositories in DEFAULT mode.
2025-10-06 20:07:39 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 97 ms. Found 4 R2DBC repository interfaces.
2025-10-06 20:07:40 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-06 20:07:40 [restartedMain] INFO  c.m.i.i.config.R2dbcConfig - Database initialization configured
2025-10-06 20:07:40 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:07:40 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3dd9b94b columns: 1 rows: 1 pos: -1
2025-10-06 20:07:40 [single-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:07:40 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:07:40 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7b271ec5 columns: 1 rows: 1 pos: -1
2025-10-06 20:07:40 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:07:40 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@41f5b1e4 columns: 1 rows: 1 pos: -1
2025-10-06 20:07:40 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:07:40 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5646eb68 columns: 1 rows: 1 pos: -1
2025-10-06 20:07:40 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:07:40 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3ccee561 columns: 1 rows: 1 pos: -1
2025-10-06 20:07:40 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:07:40 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6b9fa4af columns: 1 rows: 1 pos: -1
2025-10-06 20:07:40 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:07:40 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@70952a9 columns: 1 rows: 1 pos: -1
2025-10-06 20:07:40 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:07:40 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@66f5e48b columns: 1 rows: 1 pos: -1
2025-10-06 20:07:40 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:07:40 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2ddbf0d9 columns: 1 rows: 1 pos: -1
2025-10-06 20:07:40 [Thread-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS inventory
2025-10-06 20:07:40 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:07:40 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3b779311 columns: 1 rows: 1 pos: -1
2025-10-06 20:07:40 [Thread-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS user_store_permissions
2025-10-06 20:07:40 [Thread-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS products
2025-10-06 20:07:40 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:07:40 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@76a612cc columns: 1 rows: 1 pos: -1
2025-10-06 20:07:40 [Thread-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS stores
2025-10-06 20:07:40 [Thread-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS users
2025-10-06 20:07:40 [Thread-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS products ( id BIGINT AUTO_INCREMENT PRIMARY KEY, sku VARCHAR(50) NOT NULL UNIQUE, name VARCHAR(200) NOT NULL, description VARCHAR(500), is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 20:07:40 [Thread-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS stores ( id BIGINT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100) NOT NULL UNIQUE, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 20:07:40 [Thread-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS users ( id BIGINT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(50) NOT NULL UNIQUE, password_hash VARCHAR(255) NOT NULL, role VARCHAR(20) NOT NULL, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 20:07:40 [Thread-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS inventory ( id BIGINT AUTO_INCREMENT PRIMARY KEY, product_id BIGINT NOT NULL, store_id BIGINT NOT NULL, available_qty INT NOT NULL DEFAULT 0, version INT NOT NULL DEFAULT 0, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (product_id) REFERENCES products(id), FOREIGN KEY (store_id) REFERENCES stores(id), UNIQUE(product_id, store_id) )
2025-10-06 20:07:40 [Thread-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS user_store_permissions ( id BIGINT AUTO_INCREMENT PRIMARY KEY, user_id BIGINT NOT NULL, store_id BIGINT NOT NULL, FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (store_id) REFERENCES stores(id), UNIQUE(user_id, store_id) )
2025-10-06 20:07:40 [Thread-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_inventory_product_id ON inventory(product_id)
2025-10-06 20:07:40 [Thread-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_inventory_store_id ON inventory(store_id)
2025-10-06 20:07:40 [Thread-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_user_store_permissions_user_id ON user_store_permissions(user_id)
2025-10-06 20:07:40 [Thread-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_user_store_permissions_store_id ON user_store_permissions(store_id)
2025-10-06 20:07:40 [Thread-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_products_sku ON products(sku)
2025-10-06 20:07:40 [Thread-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_users_username ON users(username)
2025-10-06 20:07:40 [Thread-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO stores (id, name, is_active, created_at, updated_at) VALUES (1, 'Shopping Dinosaurio Mall', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'Centro Maipu 712', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'Nuevo Centro Shopping', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 20:07:40 [Thread-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO users (id, username, password_hash, role, is_active, created_at, updated_at) VALUES (1, 'admin', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'ADMIN', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'user_dinosaurio', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'user_maipu', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (4, 'user_nuevo_centro', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 20:07:40 [Thread-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO user_store_permissions (id, user_id, store_id) VALUES (1, 2, 1), (2, 3, 2), (3, 4, 3)
2025-10-06 20:07:40 [Thread-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO products (id, sku, name, description, is_active, created_at, updated_at) VALUES (1, 'REM-001-BL-M', 'Remera Básica Blanca M', 'Remera de algodón peinado 160gsm', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'REM-002-NG-L', 'Remera Básica Negra L', 'Remera cuello redondo negra', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'REM-003-AZ-S', 'Remera Azul S', 'Remera azul marino corte clásico', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (4, 'BUZ-001-GR-M', 'Buzo Hoodie Gris M', 'Buzo frisa liviano con capucha', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (5, 'BUZ-002-NG-L', 'Buzo Hoodie Negro L', 'Buzo de algodón grueso con bolsillo canguro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (6, 'PAN-001-NG-32', 'Pantalón Chino Negro 32', 'Pantalón tipo chino con elastano', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (7, 'PAN-002-AZ-34', 'Jeans Azul 34', 'Jeans corte slim fit azul oscuro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (8, 'BER-001-KH-M', 'Bermuda Cargo Khaki M', 'Bermuda con bolsillos laterales', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (9, 'BER-002-AZ-L', 'Bermuda Denim Azul L', 'Bermuda de jean azul clásico', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (10, 'CAM-001-BL-M', 'Camisa Blanca Oxford M', 'Camisa manga larga oxford blanco', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (11, 'CAM-002-CE-L', 'Camisa Celeste L', 'Camisa de poplin celeste claro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (12, 'CMP-001-NG-M', 'Campera Rompeviento Negra M', 'Campera liviana impermeable con cierre', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (13, 'CMP-002-AZ-L', 'Campera Puffer Azul L', 'Campera acolchada pluma sintética', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (14, 'ZAP-001-NG-42', 'Zapatillas Urbanas Negras 42', 'Zapatillas urbanas con suela EVA', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (15, 'ZAP-002-BL-41', 'Zapatillas Running Blancas 41', 'Zapatillas deportivas livianas', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (16, 'GOR-001-NG-U', 'Gorra Negra U', 'Gorra ajustable negra con visera curva', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (17, 'MED-001-BL-U', 'Pack Medias Blancas U', 'Pack x3 medias tobillera blancas', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 20:07:40 [Thread-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO inventory (id, product_id, store_id, available_qty, version, updated_at) VALUES (1, 1, 1, 25, 0, CURRENT_TIMESTAMP), (2, 1, 2, 18, 0, CURRENT_TIMESTAMP), (3, 1, 3, 35, 0, CURRENT_TIMESTAMP), (4, 2, 1, 20, 0, CURRENT_TIMESTAMP), (5, 2, 2, 15, 0, CURRENT_TIMESTAMP), (6, 2, 3, 30, 0, CURRENT_TIMESTAMP), (7, 3, 1, 14, 0, CURRENT_TIMESTAMP), (8, 3, 2, 22, 0, CURRENT_TIMESTAMP), (9, 3, 3, 28, 0, CURRENT_TIMESTAMP), (10, 4, 1, 10, 0, CURRENT_TIMESTAMP), (11, 4, 2, 12, 0, CURRENT_TIMESTAMP), (12, 4, 3, 20, 0, CURRENT_TIMESTAMP), (13, 5, 1, 8, 0, CURRENT_TIMESTAMP), (14, 5, 2, 11, 0, CURRENT_TIMESTAMP), (15, 5, 3, 16, 0, CURRENT_TIMESTAMP), (16, 6, 1, 12, 0, CURRENT_TIMESTAMP), (17, 6, 2, 10, 0, CURRENT_TIMESTAMP), (18, 6, 3, 18, 0, CURRENT_TIMESTAMP), (19, 7, 1, 14, 0, CURRENT_TIMESTAMP), (20, 7, 2, 13, 0, CURRENT_TIMESTAMP), (21, 7, 3, 22, 0, CURRENT_TIMESTAMP), (22, 8, 1, 16, 0, CURRENT_TIMESTAMP), (23, 8, 2, 12, 0, CURRENT_TIMESTAMP), (24, 8, 3, 24, 0, CURRENT_TIMESTAMP), (25, 9, 1, 10, 0, CURRENT_TIMESTAMP), (26, 9, 2, 14, 0, CURRENT_TIMESTAMP), (27, 9, 3, 20, 0, CURRENT_TIMESTAMP), (28, 10, 1, 11, 0, CURRENT_TIMESTAMP), (29, 10, 2, 10, 0, CURRENT_TIMESTAMP), (30, 10, 3, 19, 0, CURRENT_TIMESTAMP), (31, 11, 1, 9, 0, CURRENT_TIMESTAMP), (32, 11, 2, 12, 0, CURRENT_TIMESTAMP), (33, 11, 3, 18, 0, CURRENT_TIMESTAMP), (34, 12, 1, 6, 0, CURRENT_TIMESTAMP), (35, 12, 2, 7, 0, CURRENT_TIMESTAMP), (36, 12, 3, 12, 0, CURRENT_TIMESTAMP), (37, 13, 1, 5, 0, CURRENT_TIMESTAMP), (38, 13, 2, 6, 0, CURRENT_TIMESTAMP), (39, 13, 3, 10, 0, CURRENT_TIMESTAMP), (40, 14, 1, 8, 0, CURRENT_TIMESTAMP), (41, 14, 2, 10, 0, CURRENT_TIMESTAMP), (42, 14, 3, 15, 0, CURRENT_TIMESTAMP), (43, 15, 1, 7, 0, CURRENT_TIMESTAMP), (44, 15, 2, 9, 0, CURRENT_TIMESTAMP), (45, 15, 3, 14, 0, CURRENT_TIMESTAMP), (46, 16, 1, 20, 0, CURRENT_TIMESTAMP), (47, 16, 2, 18, 0, CURRENT_TIMESTAMP), (48, 16, 3, 30, 0, CURRENT_TIMESTAMP), (49, 17, 1, 35, 0, CURRENT_TIMESTAMP), (50, 17, 2, 28, 0, CURRENT_TIMESTAMP), (51, 17, 3, 50, 0, CURRENT_TIMESTAMP)
2025-10-06 20:07:40 [Thread-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:07:40 [Thread-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:07:40 [Thread-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@62878ead columns: 1 rows: 1 pos: -1
2025-10-06 20:07:40 [restartedMain] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: 704e8762-d7e1-4827-9497-d72c94bcb121

2025-10-06 20:07:41 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 4 endpoints beneath base path '/actuator'
2025-10-06 20:07:41 [restartedMain] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080 (http)
2025-10-06 20:07:41 [restartedMain] INFO  c.m.i.InventoryManagementApplication - Started InventoryManagementApplication in 3.635 seconds (process running for 4.224)
2025-10-06 20:07:42 [RMI TCP Connection(2)-172.18.16.1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:07:42 [RMI TCP Connection(2)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:07:42 [RMI TCP Connection(2)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@e92f626 columns: 1 rows: 1 pos: -1
2025-10-06 20:07:42 [RMI TCP Connection(2)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:07:42 [RMI TCP Connection(2)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@8c86c20 columns: 1 rows: 1 pos: -1
2025-10-06 20:07:42 [RMI TCP Connection(2)-172.18.16.1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:07:42 [RMI TCP Connection(2)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:07:42 [RMI TCP Connection(2)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@983e79d columns: 1 rows: 1 pos: -1
2025-10-06 20:08:13 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:13 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:13 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@316dae73 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:13 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:08:13 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@189cbc6a columns: 7 rows: 1 pos: -1
2025-10-06 20:08:13 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:13 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:13 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@37376714 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:13 [parallel-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:13 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:13 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@726792dd columns: 1 rows: 1 pos: -1
2025-10-06 20:08:13 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:08:13 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7627710 columns: 7 rows: 1 pos: -1
2025-10-06 20:08:13 [parallel-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:13 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:13 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@dba192e columns: 1 rows: 1 pos: -1
2025-10-06 20:08:13 [parallel-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:13 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:13 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4b7cb231 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:13 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:08:13 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@33ab64ac columns: 7 rows: 1 pos: -1
2025-10-06 20:08:13 [parallel-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:13 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:13 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3dc4d0d3 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:13 [parallel-5] WARN  c.m.i.i.s.StorePermissionAspect - User user_dinosaurio attempted admin-only operation without admin role
2025-10-06 20:08:18 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.netty.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-06 20:08:18 [netty-shutdown] INFO  o.s.b.w.e.netty.GracefulShutdown - Graceful shutdown complete
2025-10-06 20:08:20 [restartedMain] INFO  c.m.i.InventoryManagementApplication - Starting InventoryManagementApplication using Java 21.0.8 with PID 16728 (C:\Users\fedem\Documents\Github\inventory-management\target\classes started by fedem in C:\Users\fedem\Documents\Github\inventory-management)
2025-10-06 20:08:20 [restartedMain] DEBUG c.m.i.InventoryManagementApplication - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-06 20:08:20 [restartedMain] INFO  c.m.i.InventoryManagementApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-06 20:08:20 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-06 20:08:20 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-06 20:08:21 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data R2DBC repositories in DEFAULT mode.
2025-10-06 20:08:21 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 100 ms. Found 4 R2DBC repository interfaces.
2025-10-06 20:08:22 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-06 20:08:22 [restartedMain] INFO  c.m.i.i.config.R2dbcConfig - Database initialization configured
2025-10-06 20:08:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:08:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@840bdcc columns: 1 rows: 1 pos: -1
2025-10-06 20:08:23 [single-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6e4d6ff2 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:08:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5646eb68 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:08:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3ccee561 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:08:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6b9fa4af columns: 1 rows: 1 pos: -1
2025-10-06 20:08:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:08:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@70952a9 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:08:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@66f5e48b columns: 1 rows: 1 pos: -1
2025-10-06 20:08:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:08:23 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS inventory
2025-10-06 20:08:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2ddbf0d9 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:08:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3b779311 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:23 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS user_store_permissions
2025-10-06 20:08:23 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS products
2025-10-06 20:08:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:08:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4d911329 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:23 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS stores
2025-10-06 20:08:23 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS users
2025-10-06 20:08:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:08:23 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4af9fe91 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:23 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS products ( id BIGINT AUTO_INCREMENT PRIMARY KEY, sku VARCHAR(50) NOT NULL UNIQUE, name VARCHAR(200) NOT NULL, description VARCHAR(500), is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 20:08:23 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS stores ( id BIGINT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100) NOT NULL UNIQUE, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 20:08:23 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS users ( id BIGINT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(50) NOT NULL UNIQUE, password_hash VARCHAR(255) NOT NULL, role VARCHAR(20) NOT NULL, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 20:08:23 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS inventory ( id BIGINT AUTO_INCREMENT PRIMARY KEY, product_id BIGINT NOT NULL, store_id BIGINT NOT NULL, available_qty INT NOT NULL DEFAULT 0, version INT NOT NULL DEFAULT 0, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (product_id) REFERENCES products(id), FOREIGN KEY (store_id) REFERENCES stores(id), UNIQUE(product_id, store_id) )
2025-10-06 20:08:23 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS user_store_permissions ( id BIGINT AUTO_INCREMENT PRIMARY KEY, user_id BIGINT NOT NULL, store_id BIGINT NOT NULL, FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (store_id) REFERENCES stores(id), UNIQUE(user_id, store_id) )
2025-10-06 20:08:23 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_inventory_product_id ON inventory(product_id)
2025-10-06 20:08:23 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_inventory_store_id ON inventory(store_id)
2025-10-06 20:08:23 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_user_store_permissions_user_id ON user_store_permissions(user_id)
2025-10-06 20:08:23 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_user_store_permissions_store_id ON user_store_permissions(store_id)
2025-10-06 20:08:23 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_products_sku ON products(sku)
2025-10-06 20:08:23 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_users_username ON users(username)
2025-10-06 20:08:23 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO stores (id, name, is_active, created_at, updated_at) VALUES (1, 'Shopping Dinosaurio Mall', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'Centro Maipu 712', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'Nuevo Centro Shopping', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 20:08:23 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO users (id, username, password_hash, role, is_active, created_at, updated_at) VALUES (1, 'admin', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'ADMIN', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'user_dinosaurio', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'user_maipu', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (4, 'user_nuevo_centro', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 20:08:23 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO user_store_permissions (id, user_id, store_id) VALUES (1, 2, 1), (2, 3, 2), (3, 4, 3)
2025-10-06 20:08:23 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO products (id, sku, name, description, is_active, created_at, updated_at) VALUES (1, 'REM-001-BL-M', 'Remera Básica Blanca M', 'Remera de algodón peinado 160gsm', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'REM-002-NG-L', 'Remera Básica Negra L', 'Remera cuello redondo negra', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'REM-003-AZ-S', 'Remera Azul S', 'Remera azul marino corte clásico', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (4, 'BUZ-001-GR-M', 'Buzo Hoodie Gris M', 'Buzo frisa liviano con capucha', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (5, 'BUZ-002-NG-L', 'Buzo Hoodie Negro L', 'Buzo de algodón grueso con bolsillo canguro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (6, 'PAN-001-NG-32', 'Pantalón Chino Negro 32', 'Pantalón tipo chino con elastano', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (7, 'PAN-002-AZ-34', 'Jeans Azul 34', 'Jeans corte slim fit azul oscuro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (8, 'BER-001-KH-M', 'Bermuda Cargo Khaki M', 'Bermuda con bolsillos laterales', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (9, 'BER-002-AZ-L', 'Bermuda Denim Azul L', 'Bermuda de jean azul clásico', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (10, 'CAM-001-BL-M', 'Camisa Blanca Oxford M', 'Camisa manga larga oxford blanco', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (11, 'CAM-002-CE-L', 'Camisa Celeste L', 'Camisa de poplin celeste claro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (12, 'CMP-001-NG-M', 'Campera Rompeviento Negra M', 'Campera liviana impermeable con cierre', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (13, 'CMP-002-AZ-L', 'Campera Puffer Azul L', 'Campera acolchada pluma sintética', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (14, 'ZAP-001-NG-42', 'Zapatillas Urbanas Negras 42', 'Zapatillas urbanas con suela EVA', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (15, 'ZAP-002-BL-41', 'Zapatillas Running Blancas 41', 'Zapatillas deportivas livianas', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (16, 'GOR-001-NG-U', 'Gorra Negra U', 'Gorra ajustable negra con visera curva', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (17, 'MED-001-BL-U', 'Pack Medias Blancas U', 'Pack x3 medias tobillera blancas', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 20:08:23 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO inventory (id, product_id, store_id, available_qty, version, updated_at) VALUES (1, 1, 1, 25, 0, CURRENT_TIMESTAMP), (2, 1, 2, 18, 0, CURRENT_TIMESTAMP), (3, 1, 3, 35, 0, CURRENT_TIMESTAMP), (4, 2, 1, 20, 0, CURRENT_TIMESTAMP), (5, 2, 2, 15, 0, CURRENT_TIMESTAMP), (6, 2, 3, 30, 0, CURRENT_TIMESTAMP), (7, 3, 1, 14, 0, CURRENT_TIMESTAMP), (8, 3, 2, 22, 0, CURRENT_TIMESTAMP), (9, 3, 3, 28, 0, CURRENT_TIMESTAMP), (10, 4, 1, 10, 0, CURRENT_TIMESTAMP), (11, 4, 2, 12, 0, CURRENT_TIMESTAMP), (12, 4, 3, 20, 0, CURRENT_TIMESTAMP), (13, 5, 1, 8, 0, CURRENT_TIMESTAMP), (14, 5, 2, 11, 0, CURRENT_TIMESTAMP), (15, 5, 3, 16, 0, CURRENT_TIMESTAMP), (16, 6, 1, 12, 0, CURRENT_TIMESTAMP), (17, 6, 2, 10, 0, CURRENT_TIMESTAMP), (18, 6, 3, 18, 0, CURRENT_TIMESTAMP), (19, 7, 1, 14, 0, CURRENT_TIMESTAMP), (20, 7, 2, 13, 0, CURRENT_TIMESTAMP), (21, 7, 3, 22, 0, CURRENT_TIMESTAMP), (22, 8, 1, 16, 0, CURRENT_TIMESTAMP), (23, 8, 2, 12, 0, CURRENT_TIMESTAMP), (24, 8, 3, 24, 0, CURRENT_TIMESTAMP), (25, 9, 1, 10, 0, CURRENT_TIMESTAMP), (26, 9, 2, 14, 0, CURRENT_TIMESTAMP), (27, 9, 3, 20, 0, CURRENT_TIMESTAMP), (28, 10, 1, 11, 0, CURRENT_TIMESTAMP), (29, 10, 2, 10, 0, CURRENT_TIMESTAMP), (30, 10, 3, 19, 0, CURRENT_TIMESTAMP), (31, 11, 1, 9, 0, CURRENT_TIMESTAMP), (32, 11, 2, 12, 0, CURRENT_TIMESTAMP), (33, 11, 3, 18, 0, CURRENT_TIMESTAMP), (34, 12, 1, 6, 0, CURRENT_TIMESTAMP), (35, 12, 2, 7, 0, CURRENT_TIMESTAMP), (36, 12, 3, 12, 0, CURRENT_TIMESTAMP), (37, 13, 1, 5, 0, CURRENT_TIMESTAMP), (38, 13, 2, 6, 0, CURRENT_TIMESTAMP), (39, 13, 3, 10, 0, CURRENT_TIMESTAMP), (40, 14, 1, 8, 0, CURRENT_TIMESTAMP), (41, 14, 2, 10, 0, CURRENT_TIMESTAMP), (42, 14, 3, 15, 0, CURRENT_TIMESTAMP), (43, 15, 1, 7, 0, CURRENT_TIMESTAMP), (44, 15, 2, 9, 0, CURRENT_TIMESTAMP), (45, 15, 3, 14, 0, CURRENT_TIMESTAMP), (46, 16, 1, 20, 0, CURRENT_TIMESTAMP), (47, 16, 2, 18, 0, CURRENT_TIMESTAMP), (48, 16, 3, 30, 0, CURRENT_TIMESTAMP), (49, 17, 1, 35, 0, CURRENT_TIMESTAMP), (50, 17, 2, 28, 0, CURRENT_TIMESTAMP), (51, 17, 3, 50, 0, CURRENT_TIMESTAMP)
2025-10-06 20:08:23 [Thread-18] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:23 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:23 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6cb85ff6 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:23 [restartedMain] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: d81d8c82-d0ce-4087-a800-be3309c952b2

2025-10-06 20:08:23 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 4 endpoints beneath base path '/actuator'
2025-10-06 20:08:24 [restartedMain] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080 (http)
2025-10-06 20:08:24 [restartedMain] INFO  c.m.i.InventoryManagementApplication - Started InventoryManagementApplication in 3.982 seconds (process running for 4.587)
2025-10-06 20:08:24 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:24 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:24 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1d79a150 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:24 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:24 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@304604a columns: 1 rows: 1 pos: -1
2025-10-06 20:08:24 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:24 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:24 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6b587827 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:26 [reactor-http-nio-3] INFO  c.m.i.i.a.input.rest.AuthController - POST /api/auth/login - Username: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - User-Agent: PostmanRuntime/7.48.0 - Authentication attempt
2025-10-06 20:08:26 [reactor-http-nio-3] INFO  c.m.i.a.service.AuthService - Authentication attempt for user: user_dinosaurio
2025-10-06 20:08:26 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:26 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:26 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@43db9beb columns: 1 rows: 1 pos: -1
2025-10-06 20:08:26 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:08:26 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@32fa9dcd columns: 7 rows: 1 pos: -1
2025-10-06 20:08:26 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:26 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:26 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@130bf710 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:26 [reactor-http-nio-3] INFO  c.m.i.i.security.JwtUtil - JWT token generated successfully for user: user_dinosaurio - Token expires in 86400000 ms
2025-10-06 20:08:26 [reactor-http-nio-3] INFO  c.m.i.a.service.AuthService - Authentication successful for user: user_dinosaurio
2025-10-06 20:08:26 [reactor-http-nio-3] INFO  c.m.i.i.a.input.rest.AuthController - Authentication successful - Username: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - Token generated successfully
2025-10-06 20:08:30 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:30 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:30 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2a233faa columns: 1 rows: 1 pos: -1
2025-10-06 20:08:30 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:08:30 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@68a4ba37 columns: 7 rows: 1 pos: -1
2025-10-06 20:08:30 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:30 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:30 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@254324be columns: 1 rows: 1 pos: -1
2025-10-06 20:08:30 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:30 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:30 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2295beef columns: 1 rows: 1 pos: -1
2025-10-06 20:08:30 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:08:30 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7e820b3 columns: 7 rows: 1 pos: -1
2025-10-06 20:08:30 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:30 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:30 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@f36be17 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:30 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:30 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:30 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@311f2a51 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:30 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:08:30 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5fd9ccf1 columns: 7 rows: 1 pos: -1
2025-10-06 20:08:30 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:30 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:30 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2cc10691 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:30 [parallel-7] WARN  c.m.i.i.s.StorePermissionAspect - User user_dinosaurio attempted admin-only operation without admin role
2025-10-06 20:08:33 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5a96e925 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:08:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7f45e14c columns: 7 rows: 1 pos: -1
2025-10-06 20:08:33 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5e4cb4b0 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:33 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:33 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:33 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@70912321 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:33 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:08:33 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@73562307 columns: 7 rows: 1 pos: -1
2025-10-06 20:08:33 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:33 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:33 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@617587ad columns: 1 rows: 1 pos: -1
2025-10-06 20:08:33 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:33 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:33 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@32dbd972 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:33 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:08:33 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2b6fb707 columns: 7 rows: 1 pos: -1
2025-10-06 20:08:33 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:33 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:33 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4b8925b3 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:33 [parallel-11] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 20:08:33 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:33 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:33 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5338fdde columns: 1 rows: 1 pos: -1
2025-10-06 20:08:33 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_dinosaurio', 2: CAST(3 AS BIGINT)}
2025-10-06 20:08:33 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3527a0cd columns: 1 rows: 1 pos: -1
2025-10-06 20:08:33 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:33 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:33 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@598a0a9 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@fd05e60 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@16873f6f columns: 7 rows: 1 pos: -1
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@30eb0473 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:38 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:38 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:38 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@ac0e4b9 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:38 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:08:38 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@75faae3d columns: 7 rows: 1 pos: -1
2025-10-06 20:08:38 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:38 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:38 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2c3adc5c columns: 1 rows: 1 pos: -1
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@635e1380 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5e69c2ed columns: 7 rows: 1 pos: -1
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1a1b796 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@21ea028 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_dinosaurio', 2: CAST(1 AS BIGINT)}
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@48690c8b columns: 1 rows: 1 pos: -1
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2e51dea6 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:38 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - PUT /api/inventory/REM-001-BL-M/stores/1 - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - Setting absolute quantity to: 20
2025-10-06 20:08:38 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Updating inventory for product SKU: REM-001-BL-M in store: 1 with quantity: 20
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7af42b87 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.ID, products.sku, products.name, products.description, products.is_active, products.created_at, products.updated_at FROM products WHERE products.sku = $1 {1: 'REM-001-BL-M'}
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1dd8467c columns: 7 rows: 1 pos: -1
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@198aa4b1 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5f5cce58 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5b9ca575 columns: 5 rows: 1 pos: -1
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@66f04d26 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i WHERE i.product_id = :productId AND i.store_id = :storeId] to [SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2]
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4ab3ee89 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2 {1: CAST(1 AS BIGINT), 2: CAST(1 AS BIGINT)}
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2e45277a columns: 6 rows: 1 pos: -1
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@48205a3f columns: 1 rows: 1 pos: -1
2025-10-06 20:08:38 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Updating existing inventory ID: 1
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2e148c78 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  UPDATE inventory SET product_id = $1, store_id = $2, available_qty = $3, VERSION = $4, updated_at = $5 WHERE inventory.ID = $6 AND (inventory.VERSION = $7) {1: CAST(1 AS BIGINT), 2: CAST(1 AS BIGINT), 3: 20, 4: 1, 5: TIMESTAMP '2025-10-06 20:08:38.1988896', 6: CAST(1 AS BIGINT), 7: 0}
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@24d75b5b columns: 1 rows: 1 pos: -1
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3b03c601 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@763824f0 columns: 7 rows: 1 pos: -1
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@74addd23 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@66139f1a columns: 1 rows: 1 pos: -1
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5dbd1f80 columns: 5 rows: 1 pos: -1
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:38 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4fa3b3b2 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:38 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully updated inventory for product REM-001-BL-M in store 1 - New quantity: 20 - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@49ba5854 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@200c287d columns: 7 rows: 1 pos: -1
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@484ed8f6 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:40 [parallel-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:40 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:40 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@236202bc columns: 1 rows: 1 pos: -1
2025-10-06 20:08:40 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:08:40 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4ffe8bf9 columns: 7 rows: 1 pos: -1
2025-10-06 20:08:40 [parallel-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:40 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:40 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@15be3bd2 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@65201f61 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3c673210 columns: 7 rows: 1 pos: -1
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@52785177 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@32b4c404 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_dinosaurio', 2: CAST(1 AS BIGINT)}
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4ae8a5ab columns: 1 rows: 1 pos: -1
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@59f4b690 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:40 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - PUT /api/inventory/REM-001-BL-M/stores/1 - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - Setting absolute quantity to: 20
2025-10-06 20:08:40 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Updating inventory for product SKU: REM-001-BL-M in store: 1 with quantity: 20
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@39bdd469 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.ID, products.sku, products.name, products.description, products.is_active, products.created_at, products.updated_at FROM products WHERE products.sku = $1 {1: 'REM-001-BL-M'}
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5248e0bd columns: 7 rows: 1 pos: -1
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2fbce1c7 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6d2d3c7e columns: 1 rows: 1 pos: -1
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3937f2d8 columns: 5 rows: 1 pos: -1
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@22dd0d42 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i WHERE i.product_id = :productId AND i.store_id = :storeId] to [SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2]
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@20b09c83 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2 {1: CAST(1 AS BIGINT), 2: CAST(1 AS BIGINT)}
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3d97acfb columns: 6 rows: 1 pos: -1
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@693e0613 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:40 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Updating existing inventory ID: 1
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1c7dcfa7 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  UPDATE inventory SET product_id = $1, store_id = $2, available_qty = $3, VERSION = $4, updated_at = $5 WHERE inventory.ID = $6 AND (inventory.VERSION = $7) {1: CAST(1 AS BIGINT), 2: CAST(1 AS BIGINT), 3: 20, 4: 2, 5: TIMESTAMP '2025-10-06 20:08:40.5781854', 6: CAST(1 AS BIGINT), 7: 1}
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4301baf2 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3b7327e3 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4ea0986a columns: 7 rows: 1 pos: -1
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@754ddf24 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1d8a0317 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@48ceefdb columns: 5 rows: 1 pos: -1
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:40 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@199a3c0e columns: 1 rows: 1 pos: -1
2025-10-06 20:08:40 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully updated inventory for product REM-001-BL-M in store 1 - New quantity: 20 - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1
2025-10-06 20:08:44 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:44 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:44 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@112d3b60 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:44 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:08:44 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@61c87bd3 columns: 7 rows: 1 pos: -1
2025-10-06 20:08:44 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:44 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:44 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4b96e066 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:44 [parallel-2] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:44 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:44 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@f47acaf columns: 1 rows: 1 pos: -1
2025-10-06 20:08:44 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:08:44 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3eccf85a columns: 7 rows: 1 pos: -1
2025-10-06 20:08:44 [parallel-2] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:44 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:44 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@63518729 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:44 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:44 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:44 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2d3bddf3 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:44 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:08:44 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4f37b7b6 columns: 7 rows: 1 pos: -1
2025-10-06 20:08:44 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:44 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:44 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@70b6112c columns: 1 rows: 1 pos: -1
2025-10-06 20:08:44 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 20:08:44 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:44 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:44 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@71e9134f columns: 1 rows: 1 pos: -1
2025-10-06 20:08:44 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_dinosaurio', 2: CAST(2 AS BIGINT)}
2025-10-06 20:08:44 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7b3014bd columns: 1 rows: 1 pos: -1
2025-10-06 20:08:44 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:44 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:44 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@34a5c99d columns: 1 rows: 1 pos: -1
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@75f6e3a9 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@65e46b5e columns: 7 rows: 1 pos: -1
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7e7ea749 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:48 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:48 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:48 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@208e65f2 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:48 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:08:48 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@135d57ec columns: 7 rows: 1 pos: -1
2025-10-06 20:08:48 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:48 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:48 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@53a2efcf columns: 1 rows: 1 pos: -1
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1061829d columns: 1 rows: 1 pos: -1
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@65691611 columns: 7 rows: 1 pos: -1
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@339a3494 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@274a70b2 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_dinosaurio', 2: CAST(1 AS BIGINT)}
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@117b2500 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1e0fe306 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:48 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - PUT /api/inventory/REM-001-BL-M/stores/1 - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - Setting absolute quantity to: 20
2025-10-06 20:08:48 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Updating inventory for product SKU: REM-001-BL-M in store: 1 with quantity: 20
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@cd84219 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.ID, products.sku, products.name, products.description, products.is_active, products.created_at, products.updated_at FROM products WHERE products.sku = $1 {1: 'REM-001-BL-M'}
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@40dc7c70 columns: 7 rows: 1 pos: -1
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6e7cd42 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6b7d458d columns: 1 rows: 1 pos: -1
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2b7237db columns: 5 rows: 1 pos: -1
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@579a9eb8 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i WHERE i.product_id = :productId AND i.store_id = :storeId] to [SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2]
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6cbcd116 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2 {1: CAST(1 AS BIGINT), 2: CAST(1 AS BIGINT)}
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4442a889 columns: 6 rows: 1 pos: -1
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@46a2b449 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:48 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Updating existing inventory ID: 1
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1927d04f columns: 1 rows: 1 pos: -1
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  UPDATE inventory SET product_id = $1, store_id = $2, available_qty = $3, VERSION = $4, updated_at = $5 WHERE inventory.ID = $6 AND (inventory.VERSION = $7) {1: CAST(1 AS BIGINT), 2: CAST(1 AS BIGINT), 3: 20, 4: 3, 5: TIMESTAMP '2025-10-06 20:08:48.5883648', 6: CAST(1 AS BIGINT), 7: 2}
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5b38ca2c columns: 1 rows: 1 pos: -1
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6282a4e3 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@25575493 columns: 7 rows: 1 pos: -1
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@19e1c347 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@715febbd columns: 1 rows: 1 pos: -1
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5e3513fa columns: 5 rows: 1 pos: -1
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@39d31266 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:48 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully updated inventory for product REM-001-BL-M in store 1 - New quantity: 20 - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1ed19653 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@10c72eb0 columns: 7 rows: 1 pos: -1
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@68c6fd7 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:51 [parallel-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:51 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:51 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@103f43b8 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:51 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:08:51 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@16feb5ae columns: 7 rows: 1 pos: -1
2025-10-06 20:08:51 [parallel-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:51 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:51 [parallel-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4197bbbf columns: 1 rows: 1 pos: -1
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3ca32b69 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@597749a1 columns: 7 rows: 1 pos: -1
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6693612e columns: 1 rows: 1 pos: -1
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2097857f columns: 1 rows: 1 pos: -1
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_dinosaurio', 2: CAST(1 AS BIGINT)}
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7801da2f columns: 1 rows: 1 pos: -1
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@312b710c columns: 1 rows: 1 pos: -1
2025-10-06 20:08:51 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - PUT /api/inventory/REM-001-BL-M2/stores/1 - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - Setting absolute quantity to: 20
2025-10-06 20:08:51 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Updating inventory for product SKU: REM-001-BL-M2 in store: 1 with quantity: 20
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6c5ad30 columns: 1 rows: 1 pos: -1
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.ID, products.sku, products.name, products.description, products.is_active, products.created_at, products.updated_at FROM products WHERE products.sku = $1 {1: 'REM-001-BL-M2'}
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@768f793d columns: 7 rows: 0 pos: -1
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:08:51 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4f8a583f columns: 1 rows: 1 pos: -1
2025-10-06 20:08:51 [reactor-http-nio-3] ERROR c.m.i.a.service.InventoryService - Error updating inventory for SKU REM-001-BL-M2 and store 1: Product not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Product not found
	at com.meli.inventorymanagement.application.service.InventoryService.updateInventory(InventoryService.java:96)
	at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$updateInventory$11(InventoryController.java:99)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:129)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
	at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:549)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
	at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
	at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
	at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
	at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
	at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
	at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
	at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
	at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
	at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
	at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
	at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:08:51 [reactor-http-nio-3] ERROR c.m.i.i.a.i.rest.InventoryController - Failed to update inventory for product REM-001-BL-M2 in store 1 to quantity 20 - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - Error: Product not found
2025-10-06 20:08:51 [reactor-http-nio-3] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Product not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Product not found
	at com.meli.inventorymanagement.application.service.InventoryService.updateInventory(InventoryService.java:96)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#updateInventory(String, Long, InventoryUpdateRequest, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP PUT "/api/inventory/REM-001-BL-M2/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.updateInventory(InventoryService.java:96)
		at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$updateInventory$11(InventoryController.java:99)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:129)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
		at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:08:51 [reactor-http-nio-3] ERROR c.m.i.i.e.GlobalExceptionHandler - Business exception: INV-001 - Product not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Product not found
	at com.meli.inventorymanagement.application.service.InventoryService.updateInventory(InventoryService.java:96)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#updateInventory(String, Long, InventoryUpdateRequest, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP PUT "/api/inventory/REM-001-BL-M2/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.updateInventory(InventoryService.java:96)
		at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$updateInventory$11(InventoryController.java:99)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:129)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
		at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:11:52 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.netty.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-06 20:11:52 [netty-shutdown] INFO  o.s.b.w.e.netty.GracefulShutdown - Graceful shutdown complete
2025-10-06 20:11:57 [restartedMain] INFO  c.m.i.InventoryManagementApplication - Starting InventoryManagementApplication using Java 21.0.8 with PID 2916 (C:\Users\fedem\Documents\Github\inventory-management\target\classes started by fedem in C:\Users\fedem\Documents\Github\inventory-management)
2025-10-06 20:11:57 [restartedMain] DEBUG c.m.i.InventoryManagementApplication - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-06 20:11:57 [restartedMain] INFO  c.m.i.InventoryManagementApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-06 20:11:57 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-06 20:11:57 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-06 20:11:58 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data R2DBC repositories in DEFAULT mode.
2025-10-06 20:11:58 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 90 ms. Found 4 R2DBC repository interfaces.
2025-10-06 20:11:59 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-06 20:11:59 [restartedMain] INFO  c.m.i.i.config.R2dbcConfig - Database initialization configured
2025-10-06 20:12:00 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:12:00 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@20ef63bd columns: 1 rows: 1 pos: -1
2025-10-06 20:12:00 [single-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:12:00 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:12:00 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@646a1349 columns: 1 rows: 1 pos: -1
2025-10-06 20:12:00 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:12:00 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@30a30a7c columns: 1 rows: 1 pos: -1
2025-10-06 20:12:00 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:12:00 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3d707123 columns: 1 rows: 1 pos: -1
2025-10-06 20:12:00 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:12:00 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@540e6c44 columns: 1 rows: 1 pos: -1
2025-10-06 20:12:00 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:12:00 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@31b03251 columns: 1 rows: 1 pos: -1
2025-10-06 20:12:00 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:12:00 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@19e82ef1 columns: 1 rows: 1 pos: -1
2025-10-06 20:12:00 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS inventory
2025-10-06 20:12:00 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:12:00 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@27afad86 columns: 1 rows: 1 pos: -1
2025-10-06 20:12:00 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:12:00 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@e4897b columns: 1 rows: 1 pos: -1
2025-10-06 20:12:00 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS user_store_permissions
2025-10-06 20:12:00 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:12:00 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS products
2025-10-06 20:12:00 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3076118c columns: 1 rows: 1 pos: -1
2025-10-06 20:12:00 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS stores
2025-10-06 20:12:00 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS users
2025-10-06 20:12:00 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:12:00 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@68313ed5 columns: 1 rows: 1 pos: -1
2025-10-06 20:12:00 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS products ( id BIGINT AUTO_INCREMENT PRIMARY KEY, sku VARCHAR(50) NOT NULL UNIQUE, name VARCHAR(200) NOT NULL, description VARCHAR(500), is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 20:12:00 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS stores ( id BIGINT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100) NOT NULL UNIQUE, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 20:12:00 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS users ( id BIGINT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(50) NOT NULL UNIQUE, password_hash VARCHAR(255) NOT NULL, role VARCHAR(20) NOT NULL, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 20:12:00 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS inventory ( id BIGINT AUTO_INCREMENT PRIMARY KEY, product_id BIGINT NOT NULL, store_id BIGINT NOT NULL, available_qty INT NOT NULL DEFAULT 0, version INT NOT NULL DEFAULT 0, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (product_id) REFERENCES products(id), FOREIGN KEY (store_id) REFERENCES stores(id), UNIQUE(product_id, store_id) )
2025-10-06 20:12:00 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS user_store_permissions ( id BIGINT AUTO_INCREMENT PRIMARY KEY, user_id BIGINT NOT NULL, store_id BIGINT NOT NULL, FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (store_id) REFERENCES stores(id), UNIQUE(user_id, store_id) )
2025-10-06 20:12:00 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_inventory_product_id ON inventory(product_id)
2025-10-06 20:12:00 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_inventory_store_id ON inventory(store_id)
2025-10-06 20:12:00 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_user_store_permissions_user_id ON user_store_permissions(user_id)
2025-10-06 20:12:00 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_user_store_permissions_store_id ON user_store_permissions(store_id)
2025-10-06 20:12:00 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_products_sku ON products(sku)
2025-10-06 20:12:00 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_users_username ON users(username)
2025-10-06 20:12:00 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO stores (id, name, is_active, created_at, updated_at) VALUES (1, 'Shopping Dinosaurio Mall', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'Centro Maipu 712', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'Nuevo Centro Shopping', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 20:12:00 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO users (id, username, password_hash, role, is_active, created_at, updated_at) VALUES (1, 'admin', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'ADMIN', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'user_dinosaurio', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'user_maipu', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (4, 'user_nuevo_centro', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 20:12:00 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO user_store_permissions (id, user_id, store_id) VALUES (1, 2, 1), (2, 3, 2), (3, 4, 3)
2025-10-06 20:12:00 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO products (id, sku, name, description, is_active, created_at, updated_at) VALUES (1, 'REM-001-BL-M', 'Remera Básica Blanca M', 'Remera de algodón peinado 160gsm', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'REM-002-NG-L', 'Remera Básica Negra L', 'Remera cuello redondo negra', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'REM-003-AZ-S', 'Remera Azul S', 'Remera azul marino corte clásico', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (4, 'BUZ-001-GR-M', 'Buzo Hoodie Gris M', 'Buzo frisa liviano con capucha', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (5, 'BUZ-002-NG-L', 'Buzo Hoodie Negro L', 'Buzo de algodón grueso con bolsillo canguro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (6, 'PAN-001-NG-32', 'Pantalón Chino Negro 32', 'Pantalón tipo chino con elastano', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (7, 'PAN-002-AZ-34', 'Jeans Azul 34', 'Jeans corte slim fit azul oscuro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (8, 'BER-001-KH-M', 'Bermuda Cargo Khaki M', 'Bermuda con bolsillos laterales', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (9, 'BER-002-AZ-L', 'Bermuda Denim Azul L', 'Bermuda de jean azul clásico', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (10, 'CAM-001-BL-M', 'Camisa Blanca Oxford M', 'Camisa manga larga oxford blanco', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (11, 'CAM-002-CE-L', 'Camisa Celeste L', 'Camisa de poplin celeste claro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (12, 'CMP-001-NG-M', 'Campera Rompeviento Negra M', 'Campera liviana impermeable con cierre', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (13, 'CMP-002-AZ-L', 'Campera Puffer Azul L', 'Campera acolchada pluma sintética', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (14, 'ZAP-001-NG-42', 'Zapatillas Urbanas Negras 42', 'Zapatillas urbanas con suela EVA', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (15, 'ZAP-002-BL-41', 'Zapatillas Running Blancas 41', 'Zapatillas deportivas livianas', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (16, 'GOR-001-NG-U', 'Gorra Negra U', 'Gorra ajustable negra con visera curva', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (17, 'MED-001-BL-U', 'Pack Medias Blancas U', 'Pack x3 medias tobillera blancas', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 20:12:00 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO inventory (id, product_id, store_id, available_qty, version, updated_at) VALUES (1, 1, 1, 25, 0, CURRENT_TIMESTAMP), (2, 1, 2, 18, 0, CURRENT_TIMESTAMP), (3, 1, 3, 35, 0, CURRENT_TIMESTAMP), (4, 2, 1, 20, 0, CURRENT_TIMESTAMP), (5, 2, 2, 15, 0, CURRENT_TIMESTAMP), (6, 2, 3, 30, 0, CURRENT_TIMESTAMP), (7, 3, 1, 14, 0, CURRENT_TIMESTAMP), (8, 3, 2, 22, 0, CURRENT_TIMESTAMP), (9, 3, 3, 28, 0, CURRENT_TIMESTAMP), (10, 4, 1, 10, 0, CURRENT_TIMESTAMP), (11, 4, 2, 12, 0, CURRENT_TIMESTAMP), (12, 4, 3, 20, 0, CURRENT_TIMESTAMP), (13, 5, 1, 8, 0, CURRENT_TIMESTAMP), (14, 5, 2, 11, 0, CURRENT_TIMESTAMP), (15, 5, 3, 16, 0, CURRENT_TIMESTAMP), (16, 6, 1, 12, 0, CURRENT_TIMESTAMP), (17, 6, 2, 10, 0, CURRENT_TIMESTAMP), (18, 6, 3, 18, 0, CURRENT_TIMESTAMP), (19, 7, 1, 14, 0, CURRENT_TIMESTAMP), (20, 7, 2, 13, 0, CURRENT_TIMESTAMP), (21, 7, 3, 22, 0, CURRENT_TIMESTAMP), (22, 8, 1, 16, 0, CURRENT_TIMESTAMP), (23, 8, 2, 12, 0, CURRENT_TIMESTAMP), (24, 8, 3, 24, 0, CURRENT_TIMESTAMP), (25, 9, 1, 10, 0, CURRENT_TIMESTAMP), (26, 9, 2, 14, 0, CURRENT_TIMESTAMP), (27, 9, 3, 20, 0, CURRENT_TIMESTAMP), (28, 10, 1, 11, 0, CURRENT_TIMESTAMP), (29, 10, 2, 10, 0, CURRENT_TIMESTAMP), (30, 10, 3, 19, 0, CURRENT_TIMESTAMP), (31, 11, 1, 9, 0, CURRENT_TIMESTAMP), (32, 11, 2, 12, 0, CURRENT_TIMESTAMP), (33, 11, 3, 18, 0, CURRENT_TIMESTAMP), (34, 12, 1, 6, 0, CURRENT_TIMESTAMP), (35, 12, 2, 7, 0, CURRENT_TIMESTAMP), (36, 12, 3, 12, 0, CURRENT_TIMESTAMP), (37, 13, 1, 5, 0, CURRENT_TIMESTAMP), (38, 13, 2, 6, 0, CURRENT_TIMESTAMP), (39, 13, 3, 10, 0, CURRENT_TIMESTAMP), (40, 14, 1, 8, 0, CURRENT_TIMESTAMP), (41, 14, 2, 10, 0, CURRENT_TIMESTAMP), (42, 14, 3, 15, 0, CURRENT_TIMESTAMP), (43, 15, 1, 7, 0, CURRENT_TIMESTAMP), (44, 15, 2, 9, 0, CURRENT_TIMESTAMP), (45, 15, 3, 14, 0, CURRENT_TIMESTAMP), (46, 16, 1, 20, 0, CURRENT_TIMESTAMP), (47, 16, 2, 18, 0, CURRENT_TIMESTAMP), (48, 16, 3, 30, 0, CURRENT_TIMESTAMP), (49, 17, 1, 35, 0, CURRENT_TIMESTAMP), (50, 17, 2, 28, 0, CURRENT_TIMESTAMP), (51, 17, 3, 50, 0, CURRENT_TIMESTAMP)
2025-10-06 20:12:00 [Thread-18] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:12:00 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:12:00 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4453b64b columns: 1 rows: 1 pos: -1
2025-10-06 20:12:00 [restartedMain] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: 416f427a-bd5e-4fbc-9da1-753d3508c661

2025-10-06 20:12:00 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 4 endpoints beneath base path '/actuator'
2025-10-06 20:12:01 [restartedMain] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080 (http)
2025-10-06 20:12:01 [restartedMain] INFO  c.m.i.InventoryManagementApplication - Started InventoryManagementApplication in 3.689 seconds (process running for 4.276)
2025-10-06 20:12:01 [RMI TCP Connection(2)-172.18.16.1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:12:01 [RMI TCP Connection(2)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:12:01 [RMI TCP Connection(2)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4928a147 columns: 1 rows: 1 pos: -1
2025-10-06 20:12:01 [RMI TCP Connection(2)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:12:01 [RMI TCP Connection(2)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6b3bbb65 columns: 1 rows: 1 pos: -1
2025-10-06 20:12:01 [RMI TCP Connection(2)-172.18.16.1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:12:01 [RMI TCP Connection(2)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:12:01 [RMI TCP Connection(2)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@67c8adb0 columns: 1 rows: 1 pos: -1
2025-10-06 20:15:38 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.netty.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-06 20:15:38 [netty-shutdown] INFO  o.s.b.w.e.netty.GracefulShutdown - Graceful shutdown complete
2025-10-06 20:15:40 [restartedMain] INFO  c.m.i.InventoryManagementApplication - Starting InventoryManagementApplication using Java 21.0.8 with PID 45712 (C:\Users\fedem\Documents\Github\inventory-management\target\classes started by fedem in C:\Users\fedem\Documents\Github\inventory-management)
2025-10-06 20:15:40 [restartedMain] DEBUG c.m.i.InventoryManagementApplication - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-06 20:15:40 [restartedMain] INFO  c.m.i.InventoryManagementApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-06 20:15:40 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-06 20:15:40 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-06 20:15:41 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data R2DBC repositories in DEFAULT mode.
2025-10-06 20:15:41 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 90 ms. Found 4 R2DBC repository interfaces.
2025-10-06 20:15:42 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-06 20:15:43 [restartedMain] INFO  c.m.i.i.config.R2dbcConfig - Database initialization configured
2025-10-06 20:15:43 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:15:43 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@20ef63bd columns: 1 rows: 1 pos: -1
2025-10-06 20:15:43 [single-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:15:43 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:15:43 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@646a1349 columns: 1 rows: 1 pos: -1
2025-10-06 20:15:43 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:15:43 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@30a30a7c columns: 1 rows: 1 pos: -1
2025-10-06 20:15:43 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:15:43 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3d707123 columns: 1 rows: 1 pos: -1
2025-10-06 20:15:43 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:15:43 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@540e6c44 columns: 1 rows: 1 pos: -1
2025-10-06 20:15:43 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS inventory
2025-10-06 20:15:43 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:15:43 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@31b03251 columns: 1 rows: 1 pos: -1
2025-10-06 20:15:43 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:15:43 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@19e82ef1 columns: 1 rows: 1 pos: -1
2025-10-06 20:15:43 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS user_store_permissions
2025-10-06 20:15:43 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:15:43 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@27afad86 columns: 1 rows: 1 pos: -1
2025-10-06 20:15:43 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS products
2025-10-06 20:15:43 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS stores
2025-10-06 20:15:43 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:15:43 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@e4897b columns: 1 rows: 1 pos: -1
2025-10-06 20:15:43 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS users
2025-10-06 20:15:43 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS products ( id BIGINT AUTO_INCREMENT PRIMARY KEY, sku VARCHAR(50) NOT NULL UNIQUE, name VARCHAR(200) NOT NULL, description VARCHAR(500), is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 20:15:43 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:15:43 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3076118c columns: 1 rows: 1 pos: -1
2025-10-06 20:15:43 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:15:43 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@68313ed5 columns: 1 rows: 1 pos: -1
2025-10-06 20:15:43 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS stores ( id BIGINT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100) NOT NULL UNIQUE, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 20:15:43 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS users ( id BIGINT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(50) NOT NULL UNIQUE, password_hash VARCHAR(255) NOT NULL, role VARCHAR(20) NOT NULL, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 20:15:43 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS inventory ( id BIGINT AUTO_INCREMENT PRIMARY KEY, product_id BIGINT NOT NULL, store_id BIGINT NOT NULL, available_qty INT NOT NULL DEFAULT 0, version INT NOT NULL DEFAULT 0, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (product_id) REFERENCES products(id), FOREIGN KEY (store_id) REFERENCES stores(id), UNIQUE(product_id, store_id) )
2025-10-06 20:15:43 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS user_store_permissions ( id BIGINT AUTO_INCREMENT PRIMARY KEY, user_id BIGINT NOT NULL, store_id BIGINT NOT NULL, FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (store_id) REFERENCES stores(id), UNIQUE(user_id, store_id) )
2025-10-06 20:15:43 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_inventory_product_id ON inventory(product_id)
2025-10-06 20:15:43 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_inventory_store_id ON inventory(store_id)
2025-10-06 20:15:43 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_user_store_permissions_user_id ON user_store_permissions(user_id)
2025-10-06 20:15:43 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_user_store_permissions_store_id ON user_store_permissions(store_id)
2025-10-06 20:15:43 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_products_sku ON products(sku)
2025-10-06 20:15:43 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_users_username ON users(username)
2025-10-06 20:15:43 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO stores (id, name, is_active, created_at, updated_at) VALUES (1, 'Shopping Dinosaurio Mall', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'Centro Maipu 712', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'Nuevo Centro Shopping', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 20:15:43 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO users (id, username, password_hash, role, is_active, created_at, updated_at) VALUES (1, 'admin', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'ADMIN', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'user_dinosaurio', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'user_maipu', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (4, 'user_nuevo_centro', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 20:15:43 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO user_store_permissions (id, user_id, store_id) VALUES (1, 2, 1), (2, 3, 2), (3, 4, 3)
2025-10-06 20:15:43 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO products (id, sku, name, description, is_active, created_at, updated_at) VALUES (1, 'REM-001-BL-M', 'Remera Básica Blanca M', 'Remera de algodón peinado 160gsm', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'REM-002-NG-L', 'Remera Básica Negra L', 'Remera cuello redondo negra', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'REM-003-AZ-S', 'Remera Azul S', 'Remera azul marino corte clásico', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (4, 'BUZ-001-GR-M', 'Buzo Hoodie Gris M', 'Buzo frisa liviano con capucha', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (5, 'BUZ-002-NG-L', 'Buzo Hoodie Negro L', 'Buzo de algodón grueso con bolsillo canguro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (6, 'PAN-001-NG-32', 'Pantalón Chino Negro 32', 'Pantalón tipo chino con elastano', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (7, 'PAN-002-AZ-34', 'Jeans Azul 34', 'Jeans corte slim fit azul oscuro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (8, 'BER-001-KH-M', 'Bermuda Cargo Khaki M', 'Bermuda con bolsillos laterales', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (9, 'BER-002-AZ-L', 'Bermuda Denim Azul L', 'Bermuda de jean azul clásico', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (10, 'CAM-001-BL-M', 'Camisa Blanca Oxford M', 'Camisa manga larga oxford blanco', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (11, 'CAM-002-CE-L', 'Camisa Celeste L', 'Camisa de poplin celeste claro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (12, 'CMP-001-NG-M', 'Campera Rompeviento Negra M', 'Campera liviana impermeable con cierre', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (13, 'CMP-002-AZ-L', 'Campera Puffer Azul L', 'Campera acolchada pluma sintética', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (14, 'ZAP-001-NG-42', 'Zapatillas Urbanas Negras 42', 'Zapatillas urbanas con suela EVA', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (15, 'ZAP-002-BL-41', 'Zapatillas Running Blancas 41', 'Zapatillas deportivas livianas', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (16, 'GOR-001-NG-U', 'Gorra Negra U', 'Gorra ajustable negra con visera curva', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (17, 'MED-001-BL-U', 'Pack Medias Blancas U', 'Pack x3 medias tobillera blancas', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 20:15:43 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO inventory (id, product_id, store_id, available_qty, version, updated_at) VALUES (1, 1, 1, 25, 0, CURRENT_TIMESTAMP), (2, 1, 2, 18, 0, CURRENT_TIMESTAMP), (3, 1, 3, 35, 0, CURRENT_TIMESTAMP), (4, 2, 1, 20, 0, CURRENT_TIMESTAMP), (5, 2, 2, 15, 0, CURRENT_TIMESTAMP), (6, 2, 3, 30, 0, CURRENT_TIMESTAMP), (7, 3, 1, 14, 0, CURRENT_TIMESTAMP), (8, 3, 2, 22, 0, CURRENT_TIMESTAMP), (9, 3, 3, 28, 0, CURRENT_TIMESTAMP), (10, 4, 1, 10, 0, CURRENT_TIMESTAMP), (11, 4, 2, 12, 0, CURRENT_TIMESTAMP), (12, 4, 3, 20, 0, CURRENT_TIMESTAMP), (13, 5, 1, 8, 0, CURRENT_TIMESTAMP), (14, 5, 2, 11, 0, CURRENT_TIMESTAMP), (15, 5, 3, 16, 0, CURRENT_TIMESTAMP), (16, 6, 1, 12, 0, CURRENT_TIMESTAMP), (17, 6, 2, 10, 0, CURRENT_TIMESTAMP), (18, 6, 3, 18, 0, CURRENT_TIMESTAMP), (19, 7, 1, 14, 0, CURRENT_TIMESTAMP), (20, 7, 2, 13, 0, CURRENT_TIMESTAMP), (21, 7, 3, 22, 0, CURRENT_TIMESTAMP), (22, 8, 1, 16, 0, CURRENT_TIMESTAMP), (23, 8, 2, 12, 0, CURRENT_TIMESTAMP), (24, 8, 3, 24, 0, CURRENT_TIMESTAMP), (25, 9, 1, 10, 0, CURRENT_TIMESTAMP), (26, 9, 2, 14, 0, CURRENT_TIMESTAMP), (27, 9, 3, 20, 0, CURRENT_TIMESTAMP), (28, 10, 1, 11, 0, CURRENT_TIMESTAMP), (29, 10, 2, 10, 0, CURRENT_TIMESTAMP), (30, 10, 3, 19, 0, CURRENT_TIMESTAMP), (31, 11, 1, 9, 0, CURRENT_TIMESTAMP), (32, 11, 2, 12, 0, CURRENT_TIMESTAMP), (33, 11, 3, 18, 0, CURRENT_TIMESTAMP), (34, 12, 1, 6, 0, CURRENT_TIMESTAMP), (35, 12, 2, 7, 0, CURRENT_TIMESTAMP), (36, 12, 3, 12, 0, CURRENT_TIMESTAMP), (37, 13, 1, 5, 0, CURRENT_TIMESTAMP), (38, 13, 2, 6, 0, CURRENT_TIMESTAMP), (39, 13, 3, 10, 0, CURRENT_TIMESTAMP), (40, 14, 1, 8, 0, CURRENT_TIMESTAMP), (41, 14, 2, 10, 0, CURRENT_TIMESTAMP), (42, 14, 3, 15, 0, CURRENT_TIMESTAMP), (43, 15, 1, 7, 0, CURRENT_TIMESTAMP), (44, 15, 2, 9, 0, CURRENT_TIMESTAMP), (45, 15, 3, 14, 0, CURRENT_TIMESTAMP), (46, 16, 1, 20, 0, CURRENT_TIMESTAMP), (47, 16, 2, 18, 0, CURRENT_TIMESTAMP), (48, 16, 3, 30, 0, CURRENT_TIMESTAMP), (49, 17, 1, 35, 0, CURRENT_TIMESTAMP), (50, 17, 2, 28, 0, CURRENT_TIMESTAMP), (51, 17, 3, 50, 0, CURRENT_TIMESTAMP)
2025-10-06 20:15:43 [Thread-18] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:15:43 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:15:43 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6bcbfda2 columns: 1 rows: 1 pos: -1
2025-10-06 20:15:43 [restartedMain] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: 2be6fbb3-16fc-4faa-a3ef-878ce8d45a81

2025-10-06 20:15:43 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 4 endpoints beneath base path '/actuator'
2025-10-06 20:15:44 [restartedMain] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080 (http)
2025-10-06 20:15:44 [restartedMain] INFO  c.m.i.InventoryManagementApplication - Started InventoryManagementApplication in 3.899 seconds (process running for 4.472)
2025-10-06 20:15:44 [RMI TCP Connection(2)-172.18.16.1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:15:44 [RMI TCP Connection(2)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:15:44 [RMI TCP Connection(2)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@152909e7 columns: 1 rows: 1 pos: -1
2025-10-06 20:15:44 [RMI TCP Connection(2)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:15:44 [RMI TCP Connection(2)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@67a372b6 columns: 1 rows: 1 pos: -1
2025-10-06 20:15:44 [RMI TCP Connection(2)-172.18.16.1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:15:44 [RMI TCP Connection(2)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:15:44 [RMI TCP Connection(2)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@43882e0f columns: 1 rows: 1 pos: -1
2025-10-06 20:15:45 [reactor-http-nio-3] INFO  c.m.i.i.a.input.rest.AuthController - POST /api/auth/login - Username: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - User-Agent: PostmanRuntime/7.48.0 - Authentication attempt
2025-10-06 20:15:45 [reactor-http-nio-3] INFO  c.m.i.a.service.AuthService - Authentication attempt for user: user_dinosaurio
2025-10-06 20:15:45 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:15:45 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:15:45 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4d16c5af columns: 1 rows: 1 pos: -1
2025-10-06 20:15:45 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:15:45 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6487037e columns: 7 rows: 1 pos: -1
2025-10-06 20:15:45 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:15:45 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:15:45 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@26eb8cbf columns: 1 rows: 1 pos: -1
2025-10-06 20:15:46 [reactor-http-nio-3] INFO  c.m.i.i.security.JwtUtil - JWT token generated successfully for user: user_dinosaurio - Token expires in 86400000 ms
2025-10-06 20:15:46 [reactor-http-nio-3] INFO  c.m.i.a.service.AuthService - Authentication successful for user: user_dinosaurio
2025-10-06 20:15:46 [reactor-http-nio-3] INFO  c.m.i.i.a.input.rest.AuthController - Authentication successful - Username: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - Token generated successfully
2025-10-06 20:15:48 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:15:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:15:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@557aa440 columns: 1 rows: 1 pos: -1
2025-10-06 20:15:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:15:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4292dbf8 columns: 7 rows: 1 pos: -1
2025-10-06 20:15:48 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:15:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:15:48 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6a566888 columns: 1 rows: 1 pos: -1
2025-10-06 20:15:48 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:15:48 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:15:48 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1f748ab1 columns: 1 rows: 1 pos: -1
2025-10-06 20:15:48 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:15:48 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@25180a68 columns: 7 rows: 1 pos: -1
2025-10-06 20:15:48 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:15:48 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:15:48 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@559c809d columns: 1 rows: 1 pos: -1
2025-10-06 20:15:48 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:15:48 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:15:48 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3c78c004 columns: 1 rows: 1 pos: -1
2025-10-06 20:15:48 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:15:48 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3bf205cb columns: 7 rows: 1 pos: -1
2025-10-06 20:15:48 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:15:48 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:15:48 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@18b75aa columns: 1 rows: 1 pos: -1
2025-10-06 20:15:48 [parallel-7] WARN  c.m.i.i.s.StorePermissionAspect - User user_dinosaurio attempted admin-only operation without admin role
2025-10-06 20:15:48 [parallel-7] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Administrator access required for this operation
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Administrator access required for this operation
	at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$1(StorePermissionAspect.java:56)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProduct(String, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/REM-001-BL-M/stores" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$1(StorePermissionAspect.java:56)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:15:48 [parallel-7] ERROR c.m.i.i.e.GlobalExceptionHandler - Business exception: AUTH-009 - Administrator access required for this operation
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Administrator access required for this operation
	at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$1(StorePermissionAspect.java:56)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProduct(String, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/REM-001-BL-M/stores" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$1(StorePermissionAspect.java:56)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:15:54 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:15:54 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:15:54 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@71afcba1 columns: 1 rows: 1 pos: -1
2025-10-06 20:15:54 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:15:54 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7b47f599 columns: 7 rows: 1 pos: -1
2025-10-06 20:15:54 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:15:54 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:15:54 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1d5d214d columns: 1 rows: 1 pos: -1
2025-10-06 20:15:54 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:15:54 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:15:54 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@70c5f869 columns: 1 rows: 1 pos: -1
2025-10-06 20:15:54 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:15:54 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@291f078f columns: 7 rows: 1 pos: -1
2025-10-06 20:15:54 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:15:54 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:15:54 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4c4de0c0 columns: 1 rows: 1 pos: -1
2025-10-06 20:15:54 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:15:54 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:15:54 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7628dd02 columns: 1 rows: 1 pos: -1
2025-10-06 20:15:54 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:15:54 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@25da372 columns: 7 rows: 1 pos: -1
2025-10-06 20:15:54 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:15:54 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:15:54 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@175041ad columns: 1 rows: 1 pos: -1
2025-10-06 20:15:54 [parallel-11] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 20:15:54 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:15:54 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:15:54 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6114b81a columns: 1 rows: 1 pos: -1
2025-10-06 20:15:54 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_dinosaurio', 2: CAST(3 AS BIGINT)}
2025-10-06 20:15:54 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@36a176c0 columns: 1 rows: 1 pos: -1
2025-10-06 20:15:54 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:15:54 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:15:54 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@b7b701 columns: 1 rows: 1 pos: -1
2025-10-06 20:15:54 [parallel-11] WARN  c.m.i.i.s.StorePermissionAspect - User user_dinosaurio denied access to store 3
2025-10-06 20:15:54 [parallel-11] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Access denied to the specified store
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Access denied to the specified store
	at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$0(StorePermissionAspect.java:79)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProductAndStore(String, Long, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/REM-001-BL-M/stores/3" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$0(StorePermissionAspect.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:129)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:15:54 [parallel-11] ERROR c.m.i.i.e.GlobalExceptionHandler - Business exception: AUTH-008 - Access denied to the specified store
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Access denied to the specified store
	at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$0(StorePermissionAspect.java:79)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProductAndStore(String, Long, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/REM-001-BL-M/stores/3" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$0(StorePermissionAspect.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:129)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:16:01 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:01 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:01 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4c9e7fdb columns: 1 rows: 1 pos: -1
2025-10-06 20:16:01 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:16:01 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2878408a columns: 7 rows: 1 pos: -1
2025-10-06 20:16:01 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:01 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:01 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6c92ab8d columns: 1 rows: 1 pos: -1
2025-10-06 20:16:01 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:01 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:01 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3eb0941a columns: 1 rows: 1 pos: -1
2025-10-06 20:16:01 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:16:01 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@27430e54 columns: 7 rows: 1 pos: -1
2025-10-06 20:16:01 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:01 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:01 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@266ba221 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:01 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:01 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:01 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7fee4eef columns: 1 rows: 1 pos: -1
2025-10-06 20:16:01 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:16:01 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7450e813 columns: 7 rows: 1 pos: -1
2025-10-06 20:16:01 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:01 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:01 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@67470a58 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:01 [parallel-4] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 20:16:01 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:01 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:01 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@19b0c450 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:01 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_dinosaurio', 2: CAST(3 AS BIGINT)}
2025-10-06 20:16:01 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@38df558f columns: 1 rows: 1 pos: -1
2025-10-06 20:16:01 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:01 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:01 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@10faf87c columns: 1 rows: 1 pos: -1
2025-10-06 20:16:01 [parallel-4] WARN  c.m.i.i.s.StorePermissionAspect - User user_dinosaurio denied access to store 3
2025-10-06 20:16:01 [parallel-4] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Access denied to the specified store
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Access denied to the specified store
	at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$0(StorePermissionAspect.java:79)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProductAndStore(String, Long, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/REM-001-BL-Ms/stores/3" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$0(StorePermissionAspect.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:129)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:16:01 [parallel-4] ERROR c.m.i.i.e.GlobalExceptionHandler - Business exception: AUTH-008 - Access denied to the specified store
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Access denied to the specified store
	at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$0(StorePermissionAspect.java:79)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProductAndStore(String, Long, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/REM-001-BL-Ms/stores/3" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$0(StorePermissionAspect.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:129)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:16:06 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:06 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:06 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3b941c94 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:06 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:16:06 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6a82fa15 columns: 7 rows: 1 pos: -1
2025-10-06 20:16:06 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:06 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:06 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@80af0cd columns: 1 rows: 1 pos: -1
2025-10-06 20:16:06 [parallel-9] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:06 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:06 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@ea9eab7 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:06 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:16:06 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@173976fe columns: 7 rows: 1 pos: -1
2025-10-06 20:16:06 [parallel-9] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:06 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:06 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6e433f60 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:06 [parallel-9] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:06 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:06 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@489f5442 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:06 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:16:06 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6ecd7a31 columns: 7 rows: 1 pos: -1
2025-10-06 20:16:06 [parallel-9] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:06 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:06 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4eeaa1b9 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:06 [parallel-9] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 20:16:06 [parallel-9] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:06 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:06 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@79fc303d columns: 1 rows: 1 pos: -1
2025-10-06 20:16:06 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_dinosaurio', 2: CAST(3 AS BIGINT)}
2025-10-06 20:16:06 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@452f4af2 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:06 [parallel-9] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:06 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:06 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@cef68fe columns: 1 rows: 1 pos: -1
2025-10-06 20:16:06 [parallel-9] WARN  c.m.i.i.s.StorePermissionAspect - User user_dinosaurio denied access to store 3
2025-10-06 20:16:06 [parallel-9] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Access denied to the specified store
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Access denied to the specified store
	at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$0(StorePermissionAspect.java:79)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProductAndStore(String, Long, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/REM-001-BL-Ms/stores/3" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$0(StorePermissionAspect.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:129)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:16:06 [parallel-9] ERROR c.m.i.i.e.GlobalExceptionHandler - Business exception: AUTH-008 - Access denied to the specified store
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Access denied to the specified store
	at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$0(StorePermissionAspect.java:79)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProductAndStore(String, Long, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/REM-001-BL-Ms/stores/3" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$0(StorePermissionAspect.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:129)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:16:11 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:11 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:11 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2de89b22 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:11 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:16:11 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2d80a4fd columns: 7 rows: 1 pos: -1
2025-10-06 20:16:11 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:11 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:11 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@66fd21f7 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1fcd02a columns: 1 rows: 1 pos: -1
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2028ca9f columns: 7 rows: 1 pos: -1
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@12514230 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@16692092 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@36cafbd7 columns: 7 rows: 1 pos: -1
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@70310f32 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:11 [parallel-2] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4ef69e72 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_dinosaurio', 2: CAST(1 AS BIGINT)}
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@11b0b2a4 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5a1da098 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:11 [parallel-2] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/REM-001-BL-Ms/stores/1 - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - Store-specific inventory query
2025-10-06 20:16:11 [parallel-2] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: REM-001-BL-Ms in store: 1
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4d57b10b columns: 1 rows: 1 pos: -1
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT 1 FROM stores WHERE stores.ID = $1 LIMIT 1 {1: CAST(1 AS BIGINT)}
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2d6c9c41 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1a8fa049 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:11 [parallel-2] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@69a094c3 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'REM-001-BL-Ms', 2: CAST(1 AS BIGINT)}
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2c0343de columns: 6 rows: 0 pos: -1
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:11 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@157289bb columns: 1 rows: 1 pos: -1
2025-10-06 20:16:11 [parallel-2] ERROR c.m.i.a.service.InventoryService - Database error while fetching inventory for SKU REM-001-BL-Ms and store 1: Inventory not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Inventory not found
	at com.meli.inventorymanagement.application.service.InventoryService.getInventoryByProductSkuAndStore(InventoryService.java:70)
	at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$getInventoryByProductAndStore$7(InventoryController.java:72)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:129)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
	at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:549)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
	at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
	at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
	at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
	at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
	at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
	at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
	at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
	at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
	at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
	at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:16:11 [parallel-2] ERROR c.m.i.i.a.i.rest.InventoryController - Failed to retrieve inventory for product REM-001-BL-Ms in store 1 - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - Error: Inventory not found
2025-10-06 20:16:11 [parallel-2] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Inventory not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Inventory not found
	at com.meli.inventorymanagement.application.service.InventoryService.getInventoryByProductSkuAndStore(InventoryService.java:70)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProductAndStore(String, Long, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/REM-001-BL-Ms/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.getInventoryByProductSkuAndStore(InventoryService.java:70)
		at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$getInventoryByProductAndStore$7(InventoryController.java:72)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:129)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:16:11 [parallel-2] ERROR c.m.i.i.e.GlobalExceptionHandler - Business exception: INV-003 - Inventory not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Inventory not found
	at com.meli.inventorymanagement.application.service.InventoryService.getInventoryByProductSkuAndStore(InventoryService.java:70)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProductAndStore(String, Long, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/REM-001-BL-Ms/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.getInventoryByProductSkuAndStore(InventoryService.java:70)
		at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$getInventoryByProductAndStore$7(InventoryController.java:72)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:129)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7f993a8b columns: 1 rows: 1 pos: -1
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@52716328 columns: 7 rows: 1 pos: -1
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@28457497 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:20 [parallel-9] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:20 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:20 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@54ffa436 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:20 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:16:20 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@61648060 columns: 7 rows: 1 pos: -1
2025-10-06 20:16:20 [parallel-9] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:20 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:20 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@77d7a52 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@f032d1f columns: 1 rows: 1 pos: -1
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6c6b1a6f columns: 7 rows: 1 pos: -1
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@285e4f98 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@529509aa columns: 1 rows: 1 pos: -1
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_dinosaurio', 2: CAST(1 AS BIGINT)}
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@73a342a8 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2185421e columns: 1 rows: 1 pos: -1
2025-10-06 20:16:20 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - PUT /api/inventory/REM-001-BL-M2/stores/1 - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - Setting absolute quantity to: 20
2025-10-06 20:16:20 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Updating inventory for product SKU: REM-001-BL-M2 in store: 1 with quantity: 20
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@76ca8b00 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.ID, products.sku, products.name, products.description, products.is_active, products.created_at, products.updated_at FROM products WHERE products.sku = $1 {1: 'REM-001-BL-M2'}
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7b98bdab columns: 7 rows: 0 pos: -1
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:20 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7e715bf1 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:20 [reactor-http-nio-3] ERROR c.m.i.a.service.InventoryService - Error updating inventory for SKU REM-001-BL-M2 and store 1: Product not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Product not found
	at com.meli.inventorymanagement.application.service.InventoryService.updateInventory(InventoryService.java:96)
	at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$updateInventory$11(InventoryController.java:99)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:129)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
	at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:549)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
	at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
	at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
	at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
	at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
	at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
	at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
	at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
	at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:413)
	at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:455)
	at reactor.netty.http.server.HttpServerOperations.handleLastHttpContent(HttpServerOperations.java:903)
	at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:812)
	at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:115)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:321)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:16:20 [reactor-http-nio-3] ERROR c.m.i.i.a.i.rest.InventoryController - Failed to update inventory for product REM-001-BL-M2 in store 1 to quantity 20 - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - Error: Product not found
2025-10-06 20:16:20 [reactor-http-nio-3] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Product not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Product not found
	at com.meli.inventorymanagement.application.service.InventoryService.updateInventory(InventoryService.java:96)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#updateInventory(String, Long, InventoryUpdateRequest, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP PUT "/api/inventory/REM-001-BL-M2/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.updateInventory(InventoryService.java:96)
		at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$updateInventory$11(InventoryController.java:99)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:129)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
		at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:413)
		at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:455)
		at reactor.netty.http.server.HttpServerOperations.handleLastHttpContent(HttpServerOperations.java:903)
		at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:812)
		at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:115)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:321)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
		at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
		at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
		at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:16:20 [reactor-http-nio-3] ERROR c.m.i.i.e.GlobalExceptionHandler - Business exception: INV-001 - Product not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Product not found
	at com.meli.inventorymanagement.application.service.InventoryService.updateInventory(InventoryService.java:96)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#updateInventory(String, Long, InventoryUpdateRequest, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP PUT "/api/inventory/REM-001-BL-M2/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.updateInventory(InventoryService.java:96)
		at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$updateInventory$11(InventoryController.java:99)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:129)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
		at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:413)
		at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:455)
		at reactor.netty.http.server.HttpServerOperations.handleLastHttpContent(HttpServerOperations.java:903)
		at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:812)
		at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:115)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:321)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)
		at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)
		at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)
		at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
		at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1357)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
		at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
		at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:868)
		at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
		at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:796)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:732)
		at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:658)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@11413beb columns: 1 rows: 1 pos: -1
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@390f2cc9 columns: 7 rows: 1 pos: -1
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@68b24df8 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:25 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:25 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:25 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5ab31ee3 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:25 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:16:25 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@437f4734 columns: 7 rows: 1 pos: -1
2025-10-06 20:16:25 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:25 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:25 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@76083915 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5f0a9452 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5c9caa7e columns: 7 rows: 1 pos: -1
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6032960c columns: 1 rows: 1 pos: -1
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@52e7ae0a columns: 1 rows: 1 pos: -1
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_dinosaurio', 2: CAST(1 AS BIGINT)}
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2b77a6ed columns: 1 rows: 1 pos: -1
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3d40b913 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:25 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - PUT /api/inventory/REM-001-BL-M/stores/1 - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - Setting absolute quantity to: 20
2025-10-06 20:16:25 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Updating inventory for product SKU: REM-001-BL-M in store: 1 with quantity: 20
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2db5d542 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.ID, products.sku, products.name, products.description, products.is_active, products.created_at, products.updated_at FROM products WHERE products.sku = $1 {1: 'REM-001-BL-M'}
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@39236d14 columns: 7 rows: 1 pos: -1
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@f9304e2 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6a8fb8ba columns: 1 rows: 1 pos: -1
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2ca0e23a columns: 5 rows: 1 pos: -1
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7f344569 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i WHERE i.product_id = :productId AND i.store_id = :storeId] to [SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2]
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6d8256c4 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2 {1: CAST(1 AS BIGINT), 2: CAST(1 AS BIGINT)}
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@711020b8 columns: 6 rows: 1 pos: -1
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@61c6dbea columns: 1 rows: 1 pos: -1
2025-10-06 20:16:25 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Updating existing inventory ID: 1
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5ba02746 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  UPDATE inventory SET product_id = $1, store_id = $2, available_qty = $3, VERSION = $4, updated_at = $5 WHERE inventory.ID = $6 AND (inventory.VERSION = $7) {1: CAST(1 AS BIGINT), 2: CAST(1 AS BIGINT), 3: 20, 4: 1, 5: TIMESTAMP '2025-10-06 20:16:25.1049125', 6: CAST(1 AS BIGINT), 7: 0}
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1fdeb128 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@66072e1b columns: 1 rows: 1 pos: -1
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@39d853cc columns: 7 rows: 1 pos: -1
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3e5e5c57 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1a4ba3a0 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@21efeeeb columns: 5 rows: 1 pos: -1
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3aed58f5 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:25 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully updated inventory for product REM-001-BL-M in store 1 - New quantity: 20 - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@66b8864f columns: 1 rows: 1 pos: -1
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@b6485f9 columns: 7 rows: 1 pos: -1
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@79ddc02a columns: 1 rows: 1 pos: -1
2025-10-06 20:16:33 [parallel-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:33 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:33 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@34b52b24 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:33 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:16:33 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@eb70dab columns: 7 rows: 1 pos: -1
2025-10-06 20:16:33 [parallel-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:33 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:33 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@502b6d08 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3504094c columns: 1 rows: 1 pos: -1
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1bdcdc05 columns: 7 rows: 1 pos: -1
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4357c4f5 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2bcd298a columns: 1 rows: 1 pos: -1
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_dinosaurio', 2: CAST(1 AS BIGINT)}
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@204c2bb columns: 1 rows: 1 pos: -1
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4ee9ab12 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:33 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - POST /api/inventory/REM-001-BL-M/stores/1/adjustments - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - Adjusting by: -40
2025-10-06 20:16:33 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: REM-001-BL-M in store: 1 by: -40
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@33629209 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'REM-001-BL-M', 2: CAST(1 AS BIGINT)}
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1dead11b columns: 6 rows: 1 pos: -1
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:16:33 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@48c68bf0 columns: 1 rows: 1 pos: -1
2025-10-06 20:16:33 [reactor-http-nio-3] ERROR c.m.i.a.service.InventoryService - Error adjusting inventory for SKU REM-001-BL-M and store 1: Insufficient stock available
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Insufficient stock available
	at com.meli.inventorymanagement.application.service.InventoryService.lambda$adjustInventory$17(InventoryService.java:161)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
	at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:549)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
	at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
	at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
	at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
	at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
	at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
	at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
	at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
	at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
	at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
	at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
	at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
	at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
	at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:16:33 [reactor-http-nio-3] ERROR c.m.i.i.a.i.rest.InventoryController - Failed to adjust inventory for product REM-001-BL-M in store 1 by -40 - User: user_dinosaurio - IP: 0:0:0:0:0:0:0:1 - Error: Insufficient stock available
2025-10-06 20:16:33 [reactor-http-nio-3] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Insufficient stock available
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Insufficient stock available
	at com.meli.inventorymanagement.application.service.InventoryService.lambda$adjustInventory$17(InventoryService.java:161)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#adjustInventory(String, Long, InventoryAdjustmentRequest, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP POST "/api/inventory/REM-001-BL-M/stores/1/adjustments" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.lambda$adjustInventory$17(InventoryService.java:161)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
		at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:16:33 [reactor-http-nio-3] ERROR c.m.i.i.e.GlobalExceptionHandler - Business exception: INV-004 - Insufficient stock available
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Insufficient stock available
	at com.meli.inventorymanagement.application.service.InventoryService.lambda$adjustInventory$17(InventoryService.java:161)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#adjustInventory(String, Long, InventoryAdjustmentRequest, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP POST "/api/inventory/REM-001-BL-M/stores/1/adjustments" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.lambda$adjustInventory$17(InventoryService.java:161)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
		at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:17:09 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:17:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:17:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6b9f8fb columns: 1 rows: 1 pos: -1
2025-10-06 20:17:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:17:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5cd71999 columns: 7 rows: 1 pos: -1
2025-10-06 20:17:09 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:17:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:17:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@47c2c3f3 columns: 1 rows: 1 pos: -1
2025-10-06 20:17:09 [parallel-9] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:17:09 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:17:09 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1cbb77bc columns: 1 rows: 1 pos: -1
2025-10-06 20:17:09 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:17:09 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@794e3abb columns: 7 rows: 1 pos: -1
2025-10-06 20:17:09 [parallel-9] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:17:09 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:17:09 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@72db6fe columns: 1 rows: 1 pos: -1
2025-10-06 20:17:09 [parallel-9] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:17:09 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:17:09 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5a7df930 columns: 1 rows: 1 pos: -1
2025-10-06 20:17:09 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_dinosaurio'}
2025-10-06 20:17:09 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@be5ed5b columns: 7 rows: 1 pos: -1
2025-10-06 20:17:09 [parallel-9] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:17:09 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:17:09 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@31948316 columns: 1 rows: 1 pos: -1
2025-10-06 20:17:09 [parallel-9] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 20:17:09 [parallel-9] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:17:09 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:17:09 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@20bee291 columns: 1 rows: 1 pos: -1
2025-10-06 20:17:09 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_dinosaurio', 2: CAST(6 AS BIGINT)}
2025-10-06 20:17:09 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7f793ac4 columns: 1 rows: 1 pos: -1
2025-10-06 20:17:09 [parallel-9] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:17:09 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:17:09 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4418e10f columns: 1 rows: 1 pos: -1
2025-10-06 20:17:09 [parallel-9] WARN  c.m.i.i.s.StorePermissionAspect - User user_dinosaurio denied access to store 6
2025-10-06 20:17:09 [parallel-9] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Access denied to the specified store
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Access denied to the specified store
	at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$0(StorePermissionAspect.java:79)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProductAndStore(String, Long, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/REM-001-BL-Ms/stores/6" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$0(StorePermissionAspect.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:129)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:17:09 [parallel-9] ERROR c.m.i.i.e.GlobalExceptionHandler - Business exception: AUTH-008 - Access denied to the specified store
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Access denied to the specified store
	at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$0(StorePermissionAspect.java:79)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProductAndStore(String, Long, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/REM-001-BL-Ms/stores/6" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$0(StorePermissionAspect.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:129)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:17:22 [reactor-http-nio-3] INFO  c.m.i.i.a.input.rest.AuthController - POST /api/auth/login - Username: admin - IP: 0:0:0:0:0:0:0:1 - User-Agent: PostmanRuntime/7.48.0 - Authentication attempt
2025-10-06 20:17:22 [reactor-http-nio-3] INFO  c.m.i.a.service.AuthService - Authentication attempt for user: admin
2025-10-06 20:17:22 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:17:22 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:17:22 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@703dbbe2 columns: 1 rows: 1 pos: -1
2025-10-06 20:17:22 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 20:17:22 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@394114e0 columns: 7 rows: 1 pos: -1
2025-10-06 20:17:22 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:17:22 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:17:22 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3b6d069 columns: 1 rows: 1 pos: -1
2025-10-06 20:17:22 [reactor-http-nio-3] INFO  c.m.i.i.security.JwtUtil - JWT token generated successfully for user: admin - Token expires in 86400000 ms
2025-10-06 20:17:22 [reactor-http-nio-3] INFO  c.m.i.a.service.AuthService - Authentication successful for user: admin
2025-10-06 20:17:22 [reactor-http-nio-3] INFO  c.m.i.i.a.input.rest.AuthController - Authentication successful - Username: admin - IP: 0:0:0:0:0:0:0:1 - Token generated successfully
2025-10-06 20:17:27 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:17:27 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:17:27 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@658b501a columns: 1 rows: 1 pos: -1
2025-10-06 20:17:27 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 20:17:27 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1294a2a9 columns: 7 rows: 1 pos: -1
2025-10-06 20:17:27 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:17:27 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:17:27 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@615389bb columns: 1 rows: 1 pos: -1
2025-10-06 20:17:27 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:17:27 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:17:27 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3064fbb4 columns: 1 rows: 1 pos: -1
2025-10-06 20:17:27 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 20:17:27 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@76be6e35 columns: 7 rows: 1 pos: -1
2025-10-06 20:17:27 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:17:27 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:17:27 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@496f4778 columns: 1 rows: 1 pos: -1
2025-10-06 20:17:27 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:17:27 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:17:27 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@15de1372 columns: 1 rows: 1 pos: -1
2025-10-06 20:17:27 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 20:17:27 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7e118d76 columns: 7 rows: 1 pos: -1
2025-10-06 20:17:27 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:17:27 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:17:27 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@40f0514a columns: 1 rows: 1 pos: -1
2025-10-06 20:17:27 [parallel-4] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/REM-001-BL-Ms/stores/6 - User: admin - IP: 0:0:0:0:0:0:0:1 - Store-specific inventory query
2025-10-06 20:17:27 [parallel-4] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: REM-001-BL-Ms in store: 6
2025-10-06 20:17:27 [parallel-4] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:17:27 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:17:27 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@bb21f03 columns: 1 rows: 1 pos: -1
2025-10-06 20:17:27 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT 1 FROM stores WHERE stores.ID = $1 LIMIT 1 {1: CAST(6 AS BIGINT)}
2025-10-06 20:17:27 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@490a653e columns: 1 rows: 0 pos: -1
2025-10-06 20:17:27 [parallel-4] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:17:27 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:17:27 [parallel-4] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@792d2d35 columns: 1 rows: 1 pos: -1
2025-10-06 20:17:27 [parallel-4] ERROR c.m.i.a.service.InventoryService - Database error while fetching inventory for SKU REM-001-BL-Ms and store 6: Store not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Store not found
	at com.meli.inventorymanagement.application.service.InventoryService.lambda$validateStoreExists$23(InventoryService.java:188)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.MonoUsingWhen$MonoUsingWhenSubscriber.deferredComplete(MonoUsingWhen.java:268)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
	at reactor.core.publisher.MonoHasElement$HasElementSubscriber.onComplete(MonoHasElement.java:96)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:549)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
	at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
	at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
	at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
	at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
	at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
	at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
	at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
	at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
	at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
	at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:17:27 [parallel-4] ERROR c.m.i.i.a.i.rest.InventoryController - Failed to retrieve inventory for product REM-001-BL-Ms in store 6 - User: admin - IP: 0:0:0:0:0:0:0:1 - Error: Store not found
2025-10-06 20:17:27 [parallel-4] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Store not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Store not found
	at com.meli.inventorymanagement.application.service.InventoryService.lambda$validateStoreExists$23(InventoryService.java:188)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProductAndStore(String, Long, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/REM-001-BL-Ms/stores/6" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.lambda$validateStoreExists$23(InventoryService.java:188)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.MonoUsingWhen$MonoUsingWhenSubscriber.deferredComplete(MonoUsingWhen.java:268)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
		at reactor.core.publisher.MonoHasElement$HasElementSubscriber.onComplete(MonoHasElement.java:96)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:17:27 [parallel-4] ERROR c.m.i.i.e.GlobalExceptionHandler - Business exception: INV-002 - Store not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Store not found
	at com.meli.inventorymanagement.application.service.InventoryService.lambda$validateStoreExists$23(InventoryService.java:188)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProductAndStore(String, Long, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/REM-001-BL-Ms/stores/6" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.lambda$validateStoreExists$23(InventoryService.java:188)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.MonoUsingWhen$MonoUsingWhenSubscriber.deferredComplete(MonoUsingWhen.java:268)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097)
		at reactor.core.publisher.MonoHasElement$HasElementSubscriber.onComplete(MonoHasElement.java:96)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:17:46 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:17:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:17:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1528e51e columns: 1 rows: 1 pos: -1
2025-10-06 20:17:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 20:17:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5780c6aa columns: 7 rows: 1 pos: -1
2025-10-06 20:17:46 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:17:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:17:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@600e9cd columns: 1 rows: 1 pos: -1
2025-10-06 20:17:46 [parallel-9] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:17:46 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:17:46 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@f7bf055 columns: 1 rows: 1 pos: -1
2025-10-06 20:17:46 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 20:17:46 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@256335d9 columns: 7 rows: 1 pos: -1
2025-10-06 20:17:46 [parallel-9] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:17:46 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:17:46 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4e5232ae columns: 1 rows: 1 pos: -1
2025-10-06 20:17:46 [reactor-http-nio-3] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [-20]; codes [Min.inventoryUpdateRequest.availableQty,Min.availableQty,Min.java.lang.Integer,Min]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty],0]; default message [Available quantity cannot be negative]] 
org.springframework.web.bind.support.WebExchangeBindException: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [-20]; codes [Min.inventoryUpdateRequest.availableQty,Min.availableQty,Min.java.lang.Integer,Min]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty],0]; default message [Available quantity cannot be negative]] 
	at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP PUT "/api/inventory/REM-001-BL-M/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.lambda$readBody$5(AbstractMessageReaderArgumentResolver.java:210)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:17:46 [reactor-http-nio-3] ERROR c.m.i.i.e.GlobalExceptionHandler - Validation error
org.springframework.web.bind.support.WebExchangeBindException: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [-20]; codes [Min.inventoryUpdateRequest.availableQty,Min.availableQty,Min.java.lang.Integer,Min]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty],0]; default message [Available quantity cannot be negative]] 
	at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP PUT "/api/inventory/REM-001-BL-M/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.lambda$readBody$5(AbstractMessageReaderArgumentResolver.java:210)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:18:50 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:18:50 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:18:50 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5b6a4a7c columns: 1 rows: 1 pos: -1
2025-10-06 20:18:50 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 20:18:50 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6bb04565 columns: 7 rows: 1 pos: -1
2025-10-06 20:18:50 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:18:50 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:18:50 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@57ac1148 columns: 1 rows: 1 pos: -1
2025-10-06 20:18:50 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:18:50 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:18:50 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2c90061c columns: 1 rows: 1 pos: -1
2025-10-06 20:18:50 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 20:18:50 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6408d848 columns: 7 rows: 1 pos: -1
2025-10-06 20:18:50 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:18:50 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:18:50 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4c2be58c columns: 1 rows: 1 pos: -1
2025-10-06 20:18:50 [reactor-http-nio-5] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [null]; codes [NotNull.inventoryUpdateRequest.availableQty,NotNull.availableQty,NotNull.java.lang.Integer,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty]]; default message [Available quantity cannot be null]] 
org.springframework.web.bind.support.WebExchangeBindException: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [null]; codes [NotNull.inventoryUpdateRequest.availableQty,NotNull.availableQty,NotNull.java.lang.Integer,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty]]; default message [Available quantity cannot be null]] 
	at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP PUT "/api/inventory/REM-001-BL-M/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.lambda$readBody$5(AbstractMessageReaderArgumentResolver.java:210)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:18:50 [reactor-http-nio-5] ERROR c.m.i.i.e.GlobalExceptionHandler - Validation error
org.springframework.web.bind.support.WebExchangeBindException: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [null]; codes [NotNull.inventoryUpdateRequest.availableQty,NotNull.availableQty,NotNull.java.lang.Integer,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty]]; default message [Available quantity cannot be null]] 
	at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP PUT "/api/inventory/REM-001-BL-M/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.lambda$readBody$5(AbstractMessageReaderArgumentResolver.java:210)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:18:56 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:18:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:18:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@e495799 columns: 1 rows: 1 pos: -1
2025-10-06 20:18:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 20:18:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@57d94ed1 columns: 7 rows: 1 pos: -1
2025-10-06 20:18:56 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:18:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:18:56 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@71dc8603 columns: 1 rows: 1 pos: -1
2025-10-06 20:18:56 [parallel-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:18:56 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:18:56 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@78d51e7e columns: 1 rows: 1 pos: -1
2025-10-06 20:18:56 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 20:18:56 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@77b53b03 columns: 7 rows: 1 pos: -1
2025-10-06 20:18:56 [parallel-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:18:56 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:18:56 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@29e80bb3 columns: 1 rows: 1 pos: -1
2025-10-06 20:18:56 [reactor-http-nio-5] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [null]; codes [NotNull.inventoryUpdateRequest.availableQty,NotNull.availableQty,NotNull.java.lang.Integer,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty]]; default message [Available quantity cannot be null]] 
org.springframework.web.bind.support.WebExchangeBindException: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [null]; codes [NotNull.inventoryUpdateRequest.availableQty,NotNull.availableQty,NotNull.java.lang.Integer,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty]]; default message [Available quantity cannot be null]] 
	at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP PUT "/api/inventory/REM-001-BL-M/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.lambda$readBody$5(AbstractMessageReaderArgumentResolver.java:210)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:18:56 [reactor-http-nio-5] ERROR c.m.i.i.e.GlobalExceptionHandler - Validation error
org.springframework.web.bind.support.WebExchangeBindException: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [null]; codes [NotNull.inventoryUpdateRequest.availableQty,NotNull.availableQty,NotNull.java.lang.Integer,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty]]; default message [Available quantity cannot be null]] 
	at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP PUT "/api/inventory/REM-001-BL-M/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.lambda$readBody$5(AbstractMessageReaderArgumentResolver.java:210)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:19:05 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:19:05 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:19:05 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@b0159a columns: 1 rows: 1 pos: -1
2025-10-06 20:19:05 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 20:19:05 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@253b717d columns: 7 rows: 1 pos: -1
2025-10-06 20:19:05 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:19:05 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:19:05 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@e41892c columns: 1 rows: 1 pos: -1
2025-10-06 20:19:05 [parallel-6] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:19:05 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:19:05 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4f92462a columns: 1 rows: 1 pos: -1
2025-10-06 20:19:05 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 20:19:05 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@69a2e23f columns: 7 rows: 1 pos: -1
2025-10-06 20:19:05 [parallel-6] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:19:05 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:19:05 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@e574af8 columns: 1 rows: 1 pos: -1
2025-10-06 20:19:05 [reactor-http-nio-5] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [null]; codes [NotNull.inventoryUpdateRequest.availableQty,NotNull.availableQty,NotNull.java.lang.Integer,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty]]; default message [Available quantity cannot be null]] 
org.springframework.web.bind.support.WebExchangeBindException: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [null]; codes [NotNull.inventoryUpdateRequest.availableQty,NotNull.availableQty,NotNull.java.lang.Integer,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty]]; default message [Available quantity cannot be null]] 
	at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP PUT "/api/inventory/REM-001-BL-M/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.lambda$readBody$5(AbstractMessageReaderArgumentResolver.java:210)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:19:05 [reactor-http-nio-5] ERROR c.m.i.i.e.GlobalExceptionHandler - Validation error
org.springframework.web.bind.support.WebExchangeBindException: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [null]; codes [NotNull.inventoryUpdateRequest.availableQty,NotNull.availableQty,NotNull.java.lang.Integer,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty]]; default message [Available quantity cannot be null]] 
	at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP PUT "/api/inventory/REM-001-BL-M/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.lambda$readBody$5(AbstractMessageReaderArgumentResolver.java:210)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:19:15 [reactor-http-nio-5] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:19:15 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:19:15 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2c1dc4fa columns: 1 rows: 1 pos: -1
2025-10-06 20:19:15 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 20:19:15 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7b493f5a columns: 7 rows: 1 pos: -1
2025-10-06 20:19:15 [reactor-http-nio-5] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:19:15 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:19:15 [reactor-http-nio-5] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4c92d84a columns: 1 rows: 1 pos: -1
2025-10-06 20:19:15 [parallel-9] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:19:15 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:19:15 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@bd71c4c columns: 1 rows: 1 pos: -1
2025-10-06 20:19:15 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 20:19:15 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@72abbd0b columns: 7 rows: 1 pos: -1
2025-10-06 20:19:15 [parallel-9] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:19:15 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:19:15 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@567c773a columns: 1 rows: 1 pos: -1
2025-10-06 20:19:15 [reactor-http-nio-5] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.adjustInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryAdjustmentRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryAdjustmentRequest' on field 'adjustment': rejected value [null]; codes [NotNull.inventoryAdjustmentRequest.adjustment,NotNull.adjustment,NotNull.java.lang.Integer,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryAdjustmentRequest.adjustment,adjustment]; arguments []; default message [adjustment]]; default message [Adjustment quantity cannot be null]] 
org.springframework.web.bind.support.WebExchangeBindException: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.adjustInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryAdjustmentRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryAdjustmentRequest' on field 'adjustment': rejected value [null]; codes [NotNull.inventoryAdjustmentRequest.adjustment,NotNull.adjustment,NotNull.java.lang.Integer,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryAdjustmentRequest.adjustment,adjustment]; arguments []; default message [adjustment]]; default message [Adjustment quantity cannot be null]] 
	at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP POST "/api/inventory/REM-001-BL-M/stores/1/adjustments" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.lambda$readBody$5(AbstractMessageReaderArgumentResolver.java:210)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:19:15 [reactor-http-nio-5] ERROR c.m.i.i.e.GlobalExceptionHandler - Validation error
org.springframework.web.bind.support.WebExchangeBindException: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.adjustInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryAdjustmentRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryAdjustmentRequest' on field 'adjustment': rejected value [null]; codes [NotNull.inventoryAdjustmentRequest.adjustment,NotNull.adjustment,NotNull.java.lang.Integer,NotNull]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryAdjustmentRequest.adjustment,adjustment]; arguments []; default message [adjustment]]; default message [Adjustment quantity cannot be null]] 
	at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP POST "/api/inventory/REM-001-BL-M/stores/1/adjustments" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.lambda$readBody$5(AbstractMessageReaderArgumentResolver.java:210)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 20:19:47 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.netty.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-06 20:19:47 [netty-shutdown] INFO  o.s.b.w.e.netty.GracefulShutdown - Graceful shutdown complete
2025-10-06 20:19:49 [restartedMain] INFO  c.m.i.InventoryManagementApplication - Starting InventoryManagementApplication using Java 21.0.8 with PID 520 (C:\Users\fedem\Documents\Github\inventory-management\target\classes started by fedem in C:\Users\fedem\Documents\Github\inventory-management)
2025-10-06 20:19:49 [restartedMain] DEBUG c.m.i.InventoryManagementApplication - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-06 20:19:49 [restartedMain] INFO  c.m.i.InventoryManagementApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-06 20:19:49 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-06 20:19:49 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-06 20:19:49 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data R2DBC repositories in DEFAULT mode.
2025-10-06 20:19:50 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 102 ms. Found 4 R2DBC repository interfaces.
2025-10-06 20:19:51 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-06 20:19:51 [restartedMain] INFO  c.m.i.i.config.R2dbcConfig - Database initialization configured
2025-10-06 20:19:51 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:19:51 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@453c0bea columns: 1 rows: 1 pos: -1
2025-10-06 20:19:51 [single-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:19:51 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:19:51 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@454dcf07 columns: 1 rows: 1 pos: -1
2025-10-06 20:19:51 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:19:51 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5dbffdc7 columns: 1 rows: 1 pos: -1
2025-10-06 20:19:51 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:19:51 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@d63e11f columns: 1 rows: 1 pos: -1
2025-10-06 20:19:51 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:19:51 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@aa769d9 columns: 1 rows: 1 pos: -1
2025-10-06 20:19:51 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:19:51 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2483f737 columns: 1 rows: 1 pos: -1
2025-10-06 20:19:51 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:19:51 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6f067a5 columns: 1 rows: 1 pos: -1
2025-10-06 20:19:51 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:19:51 [Thread-13] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS inventory
2025-10-06 20:19:51 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1409157d columns: 1 rows: 1 pos: -1
2025-10-06 20:19:51 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:19:51 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@25514f84 columns: 1 rows: 1 pos: -1
2025-10-06 20:19:51 [Thread-13] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS user_store_permissions
2025-10-06 20:19:51 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:19:51 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1e503e56 columns: 1 rows: 1 pos: -1
2025-10-06 20:19:51 [Thread-13] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS products
2025-10-06 20:19:51 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 20:19:51 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1b18bf76 columns: 1 rows: 1 pos: -1
2025-10-06 20:19:51 [Thread-13] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS stores
2025-10-06 20:19:51 [Thread-13] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS users
2025-10-06 20:19:51 [Thread-13] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS products ( id BIGINT AUTO_INCREMENT PRIMARY KEY, sku VARCHAR(50) NOT NULL UNIQUE, name VARCHAR(200) NOT NULL, description VARCHAR(500), is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 20:19:51 [Thread-13] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS stores ( id BIGINT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100) NOT NULL UNIQUE, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 20:19:51 [Thread-13] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS users ( id BIGINT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(50) NOT NULL UNIQUE, password_hash VARCHAR(255) NOT NULL, role VARCHAR(20) NOT NULL, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 20:19:51 [Thread-13] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS inventory ( id BIGINT AUTO_INCREMENT PRIMARY KEY, product_id BIGINT NOT NULL, store_id BIGINT NOT NULL, available_qty INT NOT NULL DEFAULT 0, version INT NOT NULL DEFAULT 0, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (product_id) REFERENCES products(id), FOREIGN KEY (store_id) REFERENCES stores(id), UNIQUE(product_id, store_id) )
2025-10-06 20:19:51 [Thread-13] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS user_store_permissions ( id BIGINT AUTO_INCREMENT PRIMARY KEY, user_id BIGINT NOT NULL, store_id BIGINT NOT NULL, FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (store_id) REFERENCES stores(id), UNIQUE(user_id, store_id) )
2025-10-06 20:19:51 [Thread-13] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_inventory_product_id ON inventory(product_id)
2025-10-06 20:19:51 [Thread-13] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_inventory_store_id ON inventory(store_id)
2025-10-06 20:19:51 [Thread-13] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_user_store_permissions_user_id ON user_store_permissions(user_id)
2025-10-06 20:19:51 [Thread-13] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_user_store_permissions_store_id ON user_store_permissions(store_id)
2025-10-06 20:19:51 [Thread-13] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_products_sku ON products(sku)
2025-10-06 20:19:51 [Thread-13] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_users_username ON users(username)
2025-10-06 20:19:51 [Thread-13] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO stores (id, name, is_active, created_at, updated_at) VALUES (1, 'Shopping Dinosaurio Mall', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'Centro Maipu 712', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'Nuevo Centro Shopping', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 20:19:51 [Thread-13] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO users (id, username, password_hash, role, is_active, created_at, updated_at) VALUES (1, 'admin', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'ADMIN', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'user_dinosaurio', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'user_maipu', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (4, 'user_nuevo_centro', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 20:19:51 [Thread-13] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO user_store_permissions (id, user_id, store_id) VALUES (1, 2, 1), (2, 3, 2), (3, 4, 3)
2025-10-06 20:19:51 [Thread-13] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO products (id, sku, name, description, is_active, created_at, updated_at) VALUES (1, 'REM-001-BL-M', 'Remera Básica Blanca M', 'Remera de algodón peinado 160gsm', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'REM-002-NG-L', 'Remera Básica Negra L', 'Remera cuello redondo negra', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'REM-003-AZ-S', 'Remera Azul S', 'Remera azul marino corte clásico', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (4, 'BUZ-001-GR-M', 'Buzo Hoodie Gris M', 'Buzo frisa liviano con capucha', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (5, 'BUZ-002-NG-L', 'Buzo Hoodie Negro L', 'Buzo de algodón grueso con bolsillo canguro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (6, 'PAN-001-NG-32', 'Pantalón Chino Negro 32', 'Pantalón tipo chino con elastano', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (7, 'PAN-002-AZ-34', 'Jeans Azul 34', 'Jeans corte slim fit azul oscuro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (8, 'BER-001-KH-M', 'Bermuda Cargo Khaki M', 'Bermuda con bolsillos laterales', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (9, 'BER-002-AZ-L', 'Bermuda Denim Azul L', 'Bermuda de jean azul clásico', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (10, 'CAM-001-BL-M', 'Camisa Blanca Oxford M', 'Camisa manga larga oxford blanco', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (11, 'CAM-002-CE-L', 'Camisa Celeste L', 'Camisa de poplin celeste claro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (12, 'CMP-001-NG-M', 'Campera Rompeviento Negra M', 'Campera liviana impermeable con cierre', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (13, 'CMP-002-AZ-L', 'Campera Puffer Azul L', 'Campera acolchada pluma sintética', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (14, 'ZAP-001-NG-42', 'Zapatillas Urbanas Negras 42', 'Zapatillas urbanas con suela EVA', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (15, 'ZAP-002-BL-41', 'Zapatillas Running Blancas 41', 'Zapatillas deportivas livianas', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (16, 'GOR-001-NG-U', 'Gorra Negra U', 'Gorra ajustable negra con visera curva', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (17, 'MED-001-BL-U', 'Pack Medias Blancas U', 'Pack x3 medias tobillera blancas', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 20:19:51 [Thread-13] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO inventory (id, product_id, store_id, available_qty, version, updated_at) VALUES (1, 1, 1, 25, 0, CURRENT_TIMESTAMP), (2, 1, 2, 18, 0, CURRENT_TIMESTAMP), (3, 1, 3, 35, 0, CURRENT_TIMESTAMP), (4, 2, 1, 20, 0, CURRENT_TIMESTAMP), (5, 2, 2, 15, 0, CURRENT_TIMESTAMP), (6, 2, 3, 30, 0, CURRENT_TIMESTAMP), (7, 3, 1, 14, 0, CURRENT_TIMESTAMP), (8, 3, 2, 22, 0, CURRENT_TIMESTAMP), (9, 3, 3, 28, 0, CURRENT_TIMESTAMP), (10, 4, 1, 10, 0, CURRENT_TIMESTAMP), (11, 4, 2, 12, 0, CURRENT_TIMESTAMP), (12, 4, 3, 20, 0, CURRENT_TIMESTAMP), (13, 5, 1, 8, 0, CURRENT_TIMESTAMP), (14, 5, 2, 11, 0, CURRENT_TIMESTAMP), (15, 5, 3, 16, 0, CURRENT_TIMESTAMP), (16, 6, 1, 12, 0, CURRENT_TIMESTAMP), (17, 6, 2, 10, 0, CURRENT_TIMESTAMP), (18, 6, 3, 18, 0, CURRENT_TIMESTAMP), (19, 7, 1, 14, 0, CURRENT_TIMESTAMP), (20, 7, 2, 13, 0, CURRENT_TIMESTAMP), (21, 7, 3, 22, 0, CURRENT_TIMESTAMP), (22, 8, 1, 16, 0, CURRENT_TIMESTAMP), (23, 8, 2, 12, 0, CURRENT_TIMESTAMP), (24, 8, 3, 24, 0, CURRENT_TIMESTAMP), (25, 9, 1, 10, 0, CURRENT_TIMESTAMP), (26, 9, 2, 14, 0, CURRENT_TIMESTAMP), (27, 9, 3, 20, 0, CURRENT_TIMESTAMP), (28, 10, 1, 11, 0, CURRENT_TIMESTAMP), (29, 10, 2, 10, 0, CURRENT_TIMESTAMP), (30, 10, 3, 19, 0, CURRENT_TIMESTAMP), (31, 11, 1, 9, 0, CURRENT_TIMESTAMP), (32, 11, 2, 12, 0, CURRENT_TIMESTAMP), (33, 11, 3, 18, 0, CURRENT_TIMESTAMP), (34, 12, 1, 6, 0, CURRENT_TIMESTAMP), (35, 12, 2, 7, 0, CURRENT_TIMESTAMP), (36, 12, 3, 12, 0, CURRENT_TIMESTAMP), (37, 13, 1, 5, 0, CURRENT_TIMESTAMP), (38, 13, 2, 6, 0, CURRENT_TIMESTAMP), (39, 13, 3, 10, 0, CURRENT_TIMESTAMP), (40, 14, 1, 8, 0, CURRENT_TIMESTAMP), (41, 14, 2, 10, 0, CURRENT_TIMESTAMP), (42, 14, 3, 15, 0, CURRENT_TIMESTAMP), (43, 15, 1, 7, 0, CURRENT_TIMESTAMP), (44, 15, 2, 9, 0, CURRENT_TIMESTAMP), (45, 15, 3, 14, 0, CURRENT_TIMESTAMP), (46, 16, 1, 20, 0, CURRENT_TIMESTAMP), (47, 16, 2, 18, 0, CURRENT_TIMESTAMP), (48, 16, 3, 30, 0, CURRENT_TIMESTAMP), (49, 17, 1, 35, 0, CURRENT_TIMESTAMP), (50, 17, 2, 28, 0, CURRENT_TIMESTAMP), (51, 17, 3, 50, 0, CURRENT_TIMESTAMP)
2025-10-06 20:19:51 [Thread-13] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:19:51 [Thread-13] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:19:51 [Thread-13] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@b3ff287 columns: 1 rows: 1 pos: -1
2025-10-06 20:19:51 [restartedMain] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: 9215be34-dcf0-49c0-9152-66e27bb9319b

2025-10-06 20:19:52 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 4 endpoints beneath base path '/actuator'
2025-10-06 20:19:52 [restartedMain] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080 (http)
2025-10-06 20:19:52 [restartedMain] INFO  c.m.i.InventoryManagementApplication - Started InventoryManagementApplication in 3.684 seconds (process running for 4.351)
2025-10-06 20:19:53 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:19:53 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:19:53 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4617ec5c columns: 1 rows: 1 pos: -1
2025-10-06 20:19:53 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:19:53 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3a0a605f columns: 1 rows: 1 pos: -1
2025-10-06 20:19:53 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:19:53 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:19:53 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@324456db columns: 1 rows: 1 pos: -1
2025-10-06 20:24:49 [parallel-11] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 177 ms
2025-10-06 20:26:31 [reactor-http-nio-7] INFO  c.m.i.i.a.input.rest.AuthController - POST /api/auth/login - Username: admin - IP: 0:0:0:0:0:0:0:1 - User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 - Authentication attempt
2025-10-06 20:26:31 [reactor-http-nio-7] INFO  c.m.i.a.service.AuthService - Authentication attempt for user: admin
2025-10-06 20:26:31 [reactor-http-nio-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 20:26:31 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:26:31 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6ed5a7a1 columns: 1 rows: 1 pos: -1
2025-10-06 20:26:31 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 20:26:31 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6b86fda4 columns: 7 rows: 1 pos: -1
2025-10-06 20:26:31 [reactor-http-nio-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 20:26:31 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 20:26:31 [reactor-http-nio-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@20b95224 columns: 1 rows: 1 pos: -1
2025-10-06 20:26:31 [reactor-http-nio-7] INFO  c.m.i.i.security.JwtUtil - JWT token generated successfully for user: admin - Token expires in 86400000 ms
2025-10-06 20:26:31 [reactor-http-nio-7] INFO  c.m.i.a.service.AuthService - Authentication successful for user: admin
2025-10-06 20:26:31 [reactor-http-nio-7] INFO  c.m.i.i.a.input.rest.AuthController - Authentication successful - Username: admin - IP: 0:0:0:0:0:0:0:1 - Token generated successfully
2025-10-06 21:58:25 [main] INFO  c.m.i.c.InventoryControllerTest - Starting InventoryControllerTest using Java 21.0.8 with PID 12656 (started by fedem in C:\Users\fedem\Documents\Github\inventory-management)
2025-10-06 21:58:25 [main] DEBUG c.m.i.c.InventoryControllerTest - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-06 21:58:25 [main] INFO  c.m.i.c.InventoryControllerTest - No active profile set, falling back to 1 default profile: "default"
2025-10-06 21:58:27 [main] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: f0822658-9b4f-411b-8184-8654c9854ed7

2025-10-06 21:58:28 [main] INFO  c.m.i.c.InventoryControllerTest - Started InventoryControllerTest in 3.331 seconds (process running for 4.566)
2025-10-06 21:58:28 [parallel-2] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/REM-001-BL-M/stores - User: user - IP: unknown - Admin inventory query for all stores
2025-10-06 21:58:28 [parallel-2] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully retrieved inventory for product REM-001-BL-M - User: user - IP: unknown
2025-10-06 21:58:28 [parallel-4] INFO  c.m.i.i.a.i.rest.InventoryController - PUT /api/inventory/REM-001-BL-M/stores/1 - User: user - IP: unknown - Setting absolute quantity to: 30
2025-10-06 21:58:28 [parallel-4] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully updated inventory for product REM-001-BL-M in store 1 - New quantity: 30 - User: user - IP: unknown
2025-10-06 21:58:28 [parallel-6] INFO  c.m.i.i.a.i.rest.InventoryController - POST /api/inventory/REM-001-BL-M/stores/1/adjustments - User: user - IP: unknown - Adjusting by: 5
2025-10-06 21:58:28 [parallel-6] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully adjusted inventory for product REM-001-BL-M in store 1 by 5 - Final quantity: 30 - User: user - IP: unknown
2025-10-06 21:58:28 [parallel-10] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/REM-001-BL-M/stores/1 - User: user - IP: unknown - Store-specific inventory query
2025-10-06 21:58:28 [parallel-10] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully retrieved inventory for product REM-001-BL-M in store 1 - Quantity: 25 - User: user - IP: unknown
2025-10-06 21:58:28 [parallel-12] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [-5]; codes [Min.inventoryUpdateRequest.availableQty,Min.availableQty,Min.java.lang.Integer,Min]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty],0]; default message [Available quantity cannot be negative]] 
org.springframework.web.bind.support.WebExchangeBindException: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [-5]; codes [Min.inventoryUpdateRequest.availableQty,Min.availableQty,Min.java.lang.Integer,Min]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty],0]; default message [Available quantity cannot be negative]] 
	at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers$MutatorFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers$SetupMutatorFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP PUT "/api/inventory/REM-001-BL-M/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.lambda$readBody$5(AbstractMessageReaderArgumentResolver.java:210)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onComplete(FluxContextWrite.java:126)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoZip$ZipCoordinator.request(MonoZip.java:220)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:129)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onComplete(ReactorContextTestExecutionListener.java:130)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:121)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onNext(ReactorContextTestExecutionListener.java:120)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onNext(ReactorContextTestExecutionListener.java:120)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onComplete(ReactorContextTestExecutionListener.java:130)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onSubscribe(ReactorContextTestExecutionListener.java:115)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onNext(ReactorContextTestExecutionListener.java:120)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 21:58:28 [parallel-12] ERROR c.m.i.i.e.GlobalExceptionHandler - Validation error
org.springframework.web.bind.support.WebExchangeBindException: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [-5]; codes [Min.inventoryUpdateRequest.availableQty,Min.availableQty,Min.java.lang.Integer,Min]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty],0]; default message [Available quantity cannot be negative]] 
	at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers$MutatorFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers$SetupMutatorFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP PUT "/api/inventory/REM-001-BL-M/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.lambda$readBody$5(AbstractMessageReaderArgumentResolver.java:210)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onComplete(FluxContextWrite.java:126)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoZip$ZipCoordinator.request(MonoZip.java:220)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:129)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onComplete(ReactorContextTestExecutionListener.java:130)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:121)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onNext(ReactorContextTestExecutionListener.java:120)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onNext(ReactorContextTestExecutionListener.java:120)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onComplete(ReactorContextTestExecutionListener.java:130)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onSubscribe(ReactorContextTestExecutionListener.java:115)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onNext(ReactorContextTestExecutionListener.java:120)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 21:58:29 [main] INFO  c.m.i.a.service.InventoryService - Updating inventory for product SKU: REM-001-BL-M in store: 1 with quantity: -5
2025-10-06 21:58:29 [main] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: REM-001-BL-M
2025-10-06 21:58:29 [main] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: REM-001-BL-M in store: 1 by: 5
2025-10-06 21:58:29 [main] INFO  c.m.i.a.service.InventoryService - Inventory adjusted successfully. New quantity: 30, Version: 1
2025-10-06 21:58:29 [main] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: INVALID-SKU in store: 1 by: 5
2025-10-06 21:58:29 [main] ERROR c.m.i.a.service.InventoryService - Error adjusting inventory for SKU INVALID-SKU and store 1: Inventory not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Inventory not found
	at com.meli.inventorymanagement.application.service.InventoryService.adjustInventory(InventoryService.java:155)
	at com.meli.inventorymanagement.service.InventoryServiceTest.adjustInventory_InventoryNotFound(InventoryServiceTest.java:290)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:775)
	at org.junit.platform.commons.support.ReflectionSupport.invokeMethod(ReflectionSupport.java:479)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:161)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:152)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:91)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:112)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:94)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:87)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:216)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:212)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:137)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:201)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:170)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:94)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:59)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:142)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.junit.platform.launcher.core.InterceptingLauncher.lambda$execute$1(InterceptingLauncher.java:39)
	at org.junit.platform.launcher.core.ClasspathAlignmentCheckingLauncherInterceptor.intercept(ClasspathAlignmentCheckingLauncherInterceptor.java:25)
	at org.junit.platform.launcher.core.InterceptingLauncher.execute(InterceptingLauncher.java:38)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.apache.maven.surefire.junitplatform.LauncherAdapter.executeWithoutCancellationToken(LauncherAdapter.java:60)
	at org.apache.maven.surefire.junitplatform.LauncherAdapter.execute(LauncherAdapter.java:52)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:203)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:168)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:136)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
2025-10-06 21:58:29 [main] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: INVALID-SKU
2025-10-06 21:58:29 [main] ERROR c.m.i.a.service.InventoryService - Database error while fetching inventory for SKU INVALID-SKU: Product not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Product not found
	at com.meli.inventorymanagement.application.service.InventoryService.getInventoryByProductSku(InventoryService.java:44)
	at com.meli.inventorymanagement.service.InventoryServiceTest.getInventoryByProductSku_ProductNotFound(InventoryServiceTest.java:128)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:775)
	at org.junit.platform.commons.support.ReflectionSupport.invokeMethod(ReflectionSupport.java:479)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:161)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:152)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:91)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:112)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:94)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:87)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:216)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:212)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:137)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:201)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:170)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:94)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:59)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:142)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.junit.platform.launcher.core.InterceptingLauncher.lambda$execute$1(InterceptingLauncher.java:39)
	at org.junit.platform.launcher.core.ClasspathAlignmentCheckingLauncherInterceptor.intercept(ClasspathAlignmentCheckingLauncherInterceptor.java:25)
	at org.junit.platform.launcher.core.InterceptingLauncher.execute(InterceptingLauncher.java:38)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.apache.maven.surefire.junitplatform.LauncherAdapter.executeWithoutCancellationToken(LauncherAdapter.java:60)
	at org.apache.maven.surefire.junitplatform.LauncherAdapter.execute(LauncherAdapter.java:52)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:203)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:168)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:136)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
2025-10-06 21:58:29 [main] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: REM-001-BL-M in store: 1 by: -30
2025-10-06 21:58:29 [main] ERROR c.m.i.a.service.InventoryService - Error adjusting inventory for SKU REM-001-BL-M and store 1: Insufficient stock available
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Insufficient stock available
	at com.meli.inventorymanagement.application.service.InventoryService.lambda$adjustInventory$17(InventoryService.java:161)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.FluxRetryWhen.subscribe(FluxRetryWhen.java:81)
	at reactor.core.publisher.MonoRetryWhen.subscribeOrReturn(MonoRetryWhen.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.toVerifierAndSubscribe(DefaultStepVerifierBuilder.java:891)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:831)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:823)
	at com.meli.inventorymanagement.service.InventoryServiceTest.adjustInventory_InsufficientStock(InventoryServiceTest.java:274)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:775)
	at org.junit.platform.commons.support.ReflectionSupport.invokeMethod(ReflectionSupport.java:479)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:161)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:152)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:91)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:112)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:94)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:87)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:216)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:212)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:137)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:201)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:170)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:94)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:59)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:142)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.junit.platform.launcher.core.InterceptingLauncher.lambda$execute$1(InterceptingLauncher.java:39)
	at org.junit.platform.launcher.core.ClasspathAlignmentCheckingLauncherInterceptor.intercept(ClasspathAlignmentCheckingLauncherInterceptor.java:25)
	at org.junit.platform.launcher.core.InterceptingLauncher.execute(InterceptingLauncher.java:38)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.apache.maven.surefire.junitplatform.LauncherAdapter.executeWithoutCancellationToken(LauncherAdapter.java:60)
	at org.apache.maven.surefire.junitplatform.LauncherAdapter.execute(LauncherAdapter.java:52)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:203)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:168)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:136)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
2025-10-06 21:58:29 [main] INFO  c.m.i.a.service.InventoryService - Updating inventory for product SKU: REM-001-BL-M in store: 1 with quantity: 30
2025-10-06 21:58:29 [main] INFO  c.m.i.a.service.InventoryService - Creating new inventory entry
2025-10-06 21:58:29 [main] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: REM-001-BL-M in store: 999
2025-10-06 21:58:29 [main] ERROR c.m.i.a.service.InventoryService - Database error while fetching inventory for SKU REM-001-BL-M and store 999: Store not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Store not found
	at com.meli.inventorymanagement.application.service.InventoryService.lambda$validateStoreExists$23(InventoryService.java:188)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:153)
	at reactor.core.publisher.MonoFlatMap.subscribeOrReturn(MonoFlatMap.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.toVerifierAndSubscribe(DefaultStepVerifierBuilder.java:891)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:831)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:823)
	at com.meli.inventorymanagement.service.InventoryServiceTest.getInventoryByProductSkuAndStore_StoreNotFound(InventoryServiceTest.java:181)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:775)
	at org.junit.platform.commons.support.ReflectionSupport.invokeMethod(ReflectionSupport.java:479)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:161)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:152)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:91)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:112)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:94)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:87)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:216)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:212)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:137)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:201)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:170)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:94)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:59)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:142)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.junit.platform.launcher.core.InterceptingLauncher.lambda$execute$1(InterceptingLauncher.java:39)
	at org.junit.platform.launcher.core.ClasspathAlignmentCheckingLauncherInterceptor.intercept(ClasspathAlignmentCheckingLauncherInterceptor.java:25)
	at org.junit.platform.launcher.core.InterceptingLauncher.execute(InterceptingLauncher.java:38)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.apache.maven.surefire.junitplatform.LauncherAdapter.executeWithoutCancellationToken(LauncherAdapter.java:60)
	at org.apache.maven.surefire.junitplatform.LauncherAdapter.execute(LauncherAdapter.java:52)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:203)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:168)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:136)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
2025-10-06 21:58:29 [main] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: REM-001-BL-M in store: 1
2025-10-06 22:02:55 [restartedMain] INFO  c.m.i.InventoryManagementApplication - Starting InventoryManagementApplication using Java 21.0.8 with PID 32740 (C:\Users\fedem\Documents\Github\inventory-management\target\classes started by fedem in C:\Users\fedem\Documents\Github\inventory-management)
2025-10-06 22:02:55 [restartedMain] DEBUG c.m.i.InventoryManagementApplication - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-06 22:02:55 [restartedMain] INFO  c.m.i.InventoryManagementApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-06 22:02:55 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-06 22:02:55 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-06 22:02:56 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data R2DBC repositories in DEFAULT mode.
2025-10-06 22:02:56 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 94 ms. Found 4 R2DBC repository interfaces.
2025-10-06 22:02:57 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-06 22:02:58 [restartedMain] INFO  c.m.i.i.config.R2dbcConfig - Database initialization configured
2025-10-06 22:02:58 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 22:02:58 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5f227a2b columns: 1 rows: 1 pos: -1
2025-10-06 22:02:58 [single-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:02:58 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:02:58 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6fe8fa42 columns: 1 rows: 1 pos: -1
2025-10-06 22:02:58 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 22:02:58 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2bfc2e35 columns: 1 rows: 1 pos: -1
2025-10-06 22:02:58 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 22:02:58 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@59e83f60 columns: 1 rows: 1 pos: -1
2025-10-06 22:02:58 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 22:02:58 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5b86924a columns: 1 rows: 1 pos: -1
2025-10-06 22:02:58 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 22:02:58 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2922a049 columns: 1 rows: 1 pos: -1
2025-10-06 22:02:58 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 22:02:58 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6365bede columns: 1 rows: 1 pos: -1
2025-10-06 22:02:58 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS inventory
2025-10-06 22:02:58 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 22:02:58 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7b6e9eed columns: 1 rows: 1 pos: -1
2025-10-06 22:02:58 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 22:02:58 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@14154708 columns: 1 rows: 1 pos: -1
2025-10-06 22:02:58 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS user_store_permissions
2025-10-06 22:02:58 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 22:02:58 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@28898d2b columns: 1 rows: 1 pos: -1
2025-10-06 22:02:58 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 22:02:58 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS products
2025-10-06 22:02:58 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@665445aa columns: 1 rows: 1 pos: -1
2025-10-06 22:02:58 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS stores
2025-10-06 22:02:58 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS users
2025-10-06 22:02:58 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS products ( id BIGINT AUTO_INCREMENT PRIMARY KEY, sku VARCHAR(50) NOT NULL UNIQUE, name VARCHAR(200) NOT NULL, description VARCHAR(500), is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 22:02:58 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS stores ( id BIGINT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100) NOT NULL UNIQUE, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 22:02:58 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS users ( id BIGINT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(50) NOT NULL UNIQUE, password_hash VARCHAR(255) NOT NULL, role VARCHAR(20) NOT NULL, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 22:02:58 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS inventory ( id BIGINT AUTO_INCREMENT PRIMARY KEY, product_id BIGINT NOT NULL, store_id BIGINT NOT NULL, available_qty INT NOT NULL DEFAULT 0, version INT NOT NULL DEFAULT 0, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (product_id) REFERENCES products(id), FOREIGN KEY (store_id) REFERENCES stores(id), UNIQUE(product_id, store_id) )
2025-10-06 22:02:58 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS user_store_permissions ( id BIGINT AUTO_INCREMENT PRIMARY KEY, user_id BIGINT NOT NULL, store_id BIGINT NOT NULL, FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (store_id) REFERENCES stores(id), UNIQUE(user_id, store_id) )
2025-10-06 22:02:58 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_inventory_product_id ON inventory(product_id)
2025-10-06 22:02:58 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_inventory_store_id ON inventory(store_id)
2025-10-06 22:02:58 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_user_store_permissions_user_id ON user_store_permissions(user_id)
2025-10-06 22:02:58 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_user_store_permissions_store_id ON user_store_permissions(store_id)
2025-10-06 22:02:58 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_products_sku ON products(sku)
2025-10-06 22:02:58 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_users_username ON users(username)
2025-10-06 22:02:58 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO stores (id, name, is_active, created_at, updated_at) VALUES (1, 'Shopping Dinosaurio Mall', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'Centro Maipu 712', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'Nuevo Centro Shopping', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 22:02:58 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO users (id, username, password_hash, role, is_active, created_at, updated_at) VALUES (1, 'admin', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'ADMIN', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'user_dinosaurio', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'user_maipu', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (4, 'user_nuevo_centro', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 22:02:58 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO user_store_permissions (id, user_id, store_id) VALUES (1, 2, 1), (2, 3, 2), (3, 4, 3)
2025-10-06 22:02:58 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO products (id, sku, name, description, is_active, created_at, updated_at) VALUES (1, 'REM-001-BL-M', 'Remera Básica Blanca M', 'Remera de algodón peinado 160gsm', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'REM-002-NG-L', 'Remera Básica Negra L', 'Remera cuello redondo negra', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'REM-003-AZ-S', 'Remera Azul S', 'Remera azul marino corte clásico', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (4, 'BUZ-001-GR-M', 'Buzo Hoodie Gris M', 'Buzo frisa liviano con capucha', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (5, 'BUZ-002-NG-L', 'Buzo Hoodie Negro L', 'Buzo de algodón grueso con bolsillo canguro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (6, 'PAN-001-NG-32', 'Pantalón Chino Negro 32', 'Pantalón tipo chino con elastano', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (7, 'PAN-002-AZ-34', 'Jeans Azul 34', 'Jeans corte slim fit azul oscuro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (8, 'BER-001-KH-M', 'Bermuda Cargo Khaki M', 'Bermuda con bolsillos laterales', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (9, 'BER-002-AZ-L', 'Bermuda Denim Azul L', 'Bermuda de jean azul clásico', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (10, 'CAM-001-BL-M', 'Camisa Blanca Oxford M', 'Camisa manga larga oxford blanco', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (11, 'CAM-002-CE-L', 'Camisa Celeste L', 'Camisa de poplin celeste claro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (12, 'CMP-001-NG-M', 'Campera Rompeviento Negra M', 'Campera liviana impermeable con cierre', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (13, 'CMP-002-AZ-L', 'Campera Puffer Azul L', 'Campera acolchada pluma sintética', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (14, 'ZAP-001-NG-42', 'Zapatillas Urbanas Negras 42', 'Zapatillas urbanas con suela EVA', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (15, 'ZAP-002-BL-41', 'Zapatillas Running Blancas 41', 'Zapatillas deportivas livianas', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (16, 'GOR-001-NG-U', 'Gorra Negra U', 'Gorra ajustable negra con visera curva', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (17, 'MED-001-BL-U', 'Pack Medias Blancas U', 'Pack x3 medias tobillera blancas', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 22:02:58 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO inventory (id, product_id, store_id, available_qty, version, updated_at) VALUES (1, 1, 1, 25, 0, CURRENT_TIMESTAMP), (2, 1, 2, 18, 0, CURRENT_TIMESTAMP), (3, 1, 3, 35, 0, CURRENT_TIMESTAMP), (4, 2, 1, 20, 0, CURRENT_TIMESTAMP), (5, 2, 2, 15, 0, CURRENT_TIMESTAMP), (6, 2, 3, 30, 0, CURRENT_TIMESTAMP), (7, 3, 1, 14, 0, CURRENT_TIMESTAMP), (8, 3, 2, 22, 0, CURRENT_TIMESTAMP), (9, 3, 3, 28, 0, CURRENT_TIMESTAMP), (10, 4, 1, 10, 0, CURRENT_TIMESTAMP), (11, 4, 2, 12, 0, CURRENT_TIMESTAMP), (12, 4, 3, 20, 0, CURRENT_TIMESTAMP), (13, 5, 1, 8, 0, CURRENT_TIMESTAMP), (14, 5, 2, 11, 0, CURRENT_TIMESTAMP), (15, 5, 3, 16, 0, CURRENT_TIMESTAMP), (16, 6, 1, 12, 0, CURRENT_TIMESTAMP), (17, 6, 2, 10, 0, CURRENT_TIMESTAMP), (18, 6, 3, 18, 0, CURRENT_TIMESTAMP), (19, 7, 1, 14, 0, CURRENT_TIMESTAMP), (20, 7, 2, 13, 0, CURRENT_TIMESTAMP), (21, 7, 3, 22, 0, CURRENT_TIMESTAMP), (22, 8, 1, 16, 0, CURRENT_TIMESTAMP), (23, 8, 2, 12, 0, CURRENT_TIMESTAMP), (24, 8, 3, 24, 0, CURRENT_TIMESTAMP), (25, 9, 1, 10, 0, CURRENT_TIMESTAMP), (26, 9, 2, 14, 0, CURRENT_TIMESTAMP), (27, 9, 3, 20, 0, CURRENT_TIMESTAMP), (28, 10, 1, 11, 0, CURRENT_TIMESTAMP), (29, 10, 2, 10, 0, CURRENT_TIMESTAMP), (30, 10, 3, 19, 0, CURRENT_TIMESTAMP), (31, 11, 1, 9, 0, CURRENT_TIMESTAMP), (32, 11, 2, 12, 0, CURRENT_TIMESTAMP), (33, 11, 3, 18, 0, CURRENT_TIMESTAMP), (34, 12, 1, 6, 0, CURRENT_TIMESTAMP), (35, 12, 2, 7, 0, CURRENT_TIMESTAMP), (36, 12, 3, 12, 0, CURRENT_TIMESTAMP), (37, 13, 1, 5, 0, CURRENT_TIMESTAMP), (38, 13, 2, 6, 0, CURRENT_TIMESTAMP), (39, 13, 3, 10, 0, CURRENT_TIMESTAMP), (40, 14, 1, 8, 0, CURRENT_TIMESTAMP), (41, 14, 2, 10, 0, CURRENT_TIMESTAMP), (42, 14, 3, 15, 0, CURRENT_TIMESTAMP), (43, 15, 1, 7, 0, CURRENT_TIMESTAMP), (44, 15, 2, 9, 0, CURRENT_TIMESTAMP), (45, 15, 3, 14, 0, CURRENT_TIMESTAMP), (46, 16, 1, 20, 0, CURRENT_TIMESTAMP), (47, 16, 2, 18, 0, CURRENT_TIMESTAMP), (48, 16, 3, 30, 0, CURRENT_TIMESTAMP), (49, 17, 1, 35, 0, CURRENT_TIMESTAMP), (50, 17, 2, 28, 0, CURRENT_TIMESTAMP), (51, 17, 3, 50, 0, CURRENT_TIMESTAMP)
2025-10-06 22:02:58 [Thread-18] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:02:58 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:02:58 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4fe2403b columns: 1 rows: 1 pos: -1
2025-10-06 22:02:58 [restartedMain] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: b27dc558-f5e0-4888-a891-cde54b6c8920

2025-10-06 22:02:58 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 4 endpoints beneath base path '/actuator'
2025-10-06 22:02:59 [restartedMain] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080 (http)
2025-10-06 22:02:59 [restartedMain] INFO  c.m.i.InventoryManagementApplication - Started InventoryManagementApplication in 3.618 seconds (process running for 4.145)
2025-10-06 22:02:59 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:02:59 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:02:59 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@672389dc columns: 1 rows: 1 pos: -1
2025-10-06 22:02:59 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:02:59 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@165ca165 columns: 1 rows: 1 pos: -1
2025-10-06 22:02:59 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:02:59 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:02:59 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@47ca1208 columns: 1 rows: 1 pos: -1
2025-10-06 22:03:06 [reactor-http-nio-3] INFO  c.m.i.i.a.input.rest.AuthController - POST /api/auth/login - Username: admin - IP: 0:0:0:0:0:0:0:1 - User-Agent: PostmanRuntime/7.48.0 - Authentication attempt
2025-10-06 22:03:06 [reactor-http-nio-3] INFO  c.m.i.a.service.AuthService - Authentication attempt for user: admin
2025-10-06 22:03:06 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:03:06 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:06 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3bc8ab07 columns: 1 rows: 1 pos: -1
2025-10-06 22:03:06 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 22:03:06 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@618791f6 columns: 7 rows: 1 pos: -1
2025-10-06 22:03:06 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:03:06 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:06 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@35d12c79 columns: 1 rows: 1 pos: -1
2025-10-06 22:03:06 [reactor-http-nio-3] INFO  c.m.i.i.security.JwtUtil - JWT token generated successfully for user: admin - Token expires in 86400000 ms
2025-10-06 22:03:06 [reactor-http-nio-3] INFO  c.m.i.a.service.AuthService - Authentication successful for user: admin
2025-10-06 22:03:06 [reactor-http-nio-3] INFO  c.m.i.i.a.input.rest.AuthController - Authentication successful - Username: admin - IP: 0:0:0:0:0:0:0:1 - Token generated successfully
2025-10-06 22:03:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:03:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@35ad6f22 columns: 1 rows: 1 pos: -1
2025-10-06 22:03:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 22:03:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@48b10231 columns: 7 rows: 1 pos: -1
2025-10-06 22:03:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:03:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1e64f506 columns: 1 rows: 1 pos: -1
2025-10-06 22:03:10 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:03:10 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:10 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@49bd96e3 columns: 1 rows: 1 pos: -1
2025-10-06 22:03:10 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 22:03:10 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4ffcc954 columns: 7 rows: 1 pos: -1
2025-10-06 22:03:10 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:03:10 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:10 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@9dd30e8 columns: 1 rows: 1 pos: -1
2025-10-06 22:03:10 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:03:10 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:10 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3a9ed888 columns: 1 rows: 1 pos: -1
2025-10-06 22:03:10 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 22:03:10 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4f967c0b columns: 7 rows: 1 pos: -1
2025-10-06 22:03:10 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:03:10 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:10 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3b6880e columns: 1 rows: 1 pos: -1
2025-10-06 22:03:10 [parallel-7] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/{{product}}/stores - User: admin - IP: 0:0:0:0:0:0:0:1 - Admin inventory query for all stores
2025-10-06 22:03:10 [parallel-7] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: {{product}}
2025-10-06 22:03:10 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:03:10 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:10 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2fad1527 columns: 1 rows: 1 pos: -1
2025-10-06 22:03:10 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.ID, products.sku, products.name, products.description, products.is_active, products.created_at, products.updated_at FROM products WHERE products.sku = $1 {1: '{{product}}'}
2025-10-06 22:03:10 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5f154415 columns: 7 rows: 0 pos: -1
2025-10-06 22:03:10 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:03:10 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:10 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@d3e06e4 columns: 1 rows: 1 pos: -1
2025-10-06 22:03:10 [parallel-7] ERROR c.m.i.a.service.InventoryService - Database error while fetching inventory for SKU {{product}}: Product not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Product not found
	at com.meli.inventorymanagement.application.service.InventoryService.getInventoryByProductSku(InventoryService.java:44)
	at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$getInventoryByProduct$3(InventoryController.java:46)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onNext(MonoFlatMapMany.java:163)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onSubscribe(MonoFlatMapMany.java:141)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
	at reactor.core.publisher.FluxDefer.subscribe(FluxDefer.java:54)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onComplete(FluxConcatArray.java:238)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
	at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
	at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
	at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
	at reactor.core.publisher.Operators.complete(Operators.java:137)
	at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
	at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:549)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:649)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:633)
	at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
	at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
	at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
	at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
	at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
	at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
	at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
	at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
	at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
	at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
	at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
	at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
	at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
	at reactor.core.publisher.Operators.error(Operators.java:198)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
	at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
	at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
	at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
	at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
	at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
	at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
	at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
	at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
	at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
	at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
	at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
	at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
	at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
	at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
	at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
	at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
	at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
	at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
	at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
	at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
	at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
	at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
	at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 22:03:10 [parallel-7] ERROR c.m.i.i.a.i.rest.InventoryController - Failed to retrieve inventory for product {{product}} - User: admin - IP: 0:0:0:0:0:0:0:1 - Error: Product not found
2025-10-06 22:03:10 [parallel-7] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Product not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Product not found
	at com.meli.inventorymanagement.application.service.InventoryService.getInventoryByProductSku(InventoryService.java:44)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProduct(String, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/%7B%7Bproduct%7D%7D/stores" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.getInventoryByProductSku(InventoryService.java:44)
		at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$getInventoryByProduct$3(InventoryController.java:46)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onNext(MonoFlatMapMany.java:163)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onSubscribe(MonoFlatMapMany.java:141)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
		at reactor.core.publisher.FluxDefer.subscribe(FluxDefer.java:54)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onComplete(FluxConcatArray.java:238)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 22:03:10 [parallel-7] ERROR c.m.i.i.e.GlobalExceptionHandler - Business exception: INV-001 - Product not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Product not found
	at com.meli.inventorymanagement.application.service.InventoryService.getInventoryByProductSku(InventoryService.java:44)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProduct(String, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/%7B%7Bproduct%7D%7D/stores" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.application.service.InventoryService.getInventoryByProductSku(InventoryService.java:44)
		at com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.lambda$getInventoryByProduct$3(InventoryController.java:46)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onNext(MonoFlatMapMany.java:163)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onSubscribe(MonoFlatMapMany.java:141)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
		at reactor.core.publisher.FluxDefer.subscribe(FluxDefer.java:54)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxConcatArray$ConcatArraySubscriber.onComplete(FluxConcatArray.java:238)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 22:03:47 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:03:47 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:47 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6eaeb80a columns: 1 rows: 1 pos: -1
2025-10-06 22:03:47 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 22:03:47 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7282570 columns: 7 rows: 1 pos: -1
2025-10-06 22:03:47 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:03:47 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:47 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@444d5dba columns: 1 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@254479f columns: 1 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6fc1a042 columns: 7 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@12b5fc45 columns: 1 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@756d348d columns: 1 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6eac38da columns: 7 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2550c4dd columns: 1 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/BUZ-001-GR-M/stores - User: admin - IP: 0:0:0:0:0:0:0:1 - Admin inventory query for all stores
2025-10-06 22:03:47 [parallel-12] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: BUZ-001-GR-M
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3b0c4d4 columns: 1 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.ID, products.sku, products.name, products.description, products.is_active, products.created_at, products.updated_at FROM products WHERE products.sku = $1 {1: 'BUZ-001-GR-M'}
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@20659e53 columns: 7 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4f24631f columns: 1 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1]
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3bf23164 columns: 1 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 {1: 'BUZ-001-GR-M'}
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7e1ffe0a columns: 6 rows: 3 pos: -1
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@71d60ecc columns: 1 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2964eee3 columns: 1 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(4 AS BIGINT)}
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@61ff012a columns: 7 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@331ccc0a columns: 1 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@24ee8fa7 columns: 1 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@723bf3e6 columns: 5 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@595a261b columns: 1 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@31fbad93 columns: 1 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(4 AS BIGINT)}
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@380dce6a columns: 7 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@29dfc812 columns: 1 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@130c97cf columns: 1 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(2 AS BIGINT)}
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@580aa407 columns: 5 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@697cb63c columns: 1 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@131e537f columns: 1 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(4 AS BIGINT)}
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@f82c948 columns: 7 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@521a35e7 columns: 1 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2aaf46de columns: 1 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(3 AS BIGINT)}
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@336b4d9a columns: 5 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:03:47 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@73eb81f7 columns: 1 rows: 1 pos: -1
2025-10-06 22:03:47 [parallel-12] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully retrieved inventory for product BUZ-001-GR-M - User: admin - IP: 0:0:0:0:0:0:0:1
2025-10-06 22:04:18 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:04:18 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:18 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4624482c columns: 1 rows: 1 pos: -1
2025-10-06 22:04:18 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 22:04:18 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@203bd736 columns: 7 rows: 1 pos: -1
2025-10-06 22:04:18 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:04:18 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:18 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7032a68b columns: 1 rows: 1 pos: -1
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2551cadc columns: 1 rows: 1 pos: -1
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4cebbecd columns: 7 rows: 1 pos: -1
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@36f8bdf8 columns: 1 rows: 1 pos: -1
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@72352cbe columns: 1 rows: 1 pos: -1
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@337de91d columns: 7 rows: 1 pos: -1
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@347d5a76 columns: 1 rows: 1 pos: -1
2025-10-06 22:04:18 [parallel-12] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/BUZ-001-GR-M/stores/2 - User: admin - IP: 0:0:0:0:0:0:0:1 - Store-specific inventory query
2025-10-06 22:04:18 [parallel-12] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: BUZ-001-GR-M in store: 2
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@21606acd columns: 1 rows: 1 pos: -1
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT 1 FROM stores WHERE stores.ID = $1 LIMIT 1 {1: CAST(2 AS BIGINT)}
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7ebca4c8 columns: 1 rows: 1 pos: -1
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@14aae8b5 columns: 1 rows: 1 pos: -1
2025-10-06 22:04:18 [parallel-12] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2431bef4 columns: 1 rows: 1 pos: -1
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'BUZ-001-GR-M', 2: CAST(2 AS BIGINT)}
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@51c6427d columns: 6 rows: 1 pos: -1
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6aa89b89 columns: 1 rows: 1 pos: -1
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7a38d72a columns: 1 rows: 1 pos: -1
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(4 AS BIGINT)}
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2e92fd77 columns: 7 rows: 1 pos: -1
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6d24e021 columns: 1 rows: 1 pos: -1
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6859cd39 columns: 1 rows: 1 pos: -1
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(2 AS BIGINT)}
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7043f09d columns: 5 rows: 1 pos: -1
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:18 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2472df9a columns: 1 rows: 1 pos: -1
2025-10-06 22:04:18 [parallel-12] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully retrieved inventory for product BUZ-001-GR-M in store 2 - Quantity: 12 - User: admin - IP: 0:0:0:0:0:0:0:1
2025-10-06 22:04:27 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:04:27 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:27 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@509bb186 columns: 1 rows: 1 pos: -1
2025-10-06 22:04:27 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 22:04:27 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5d5e68dd columns: 7 rows: 1 pos: -1
2025-10-06 22:04:27 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:04:27 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:27 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@27ce18 columns: 1 rows: 1 pos: -1
2025-10-06 22:04:27 [parallel-8] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:04:27 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:27 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@49b59bf0 columns: 1 rows: 1 pos: -1
2025-10-06 22:04:27 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 22:04:27 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@65baca18 columns: 7 rows: 1 pos: -1
2025-10-06 22:04:27 [parallel-8] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:04:27 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:27 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@e0bb19f columns: 1 rows: 1 pos: -1
2025-10-06 22:04:27 [reactor-http-nio-3] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [-20]; codes [Min.inventoryUpdateRequest.availableQty,Min.availableQty,Min.java.lang.Integer,Min]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty],0]; default message [Available quantity cannot be negative]] 
org.springframework.web.bind.support.WebExchangeBindException: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [-20]; codes [Min.inventoryUpdateRequest.availableQty,Min.availableQty,Min.java.lang.Integer,Min]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty],0]; default message [Available quantity cannot be negative]] 
	at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP PUT "/api/inventory/BUZ-001-GR-M/stores/12" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.lambda$readBody$5(AbstractMessageReaderArgumentResolver.java:210)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 22:04:27 [reactor-http-nio-3] ERROR c.m.i.i.e.GlobalExceptionHandler - Validation error
org.springframework.web.bind.support.WebExchangeBindException: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [-20]; codes [Min.inventoryUpdateRequest.availableQty,Min.availableQty,Min.java.lang.Integer,Min]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty],0]; default message [Available quantity cannot be negative]] 
	at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP PUT "/api/inventory/BUZ-001-GR-M/stores/12" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.lambda$readBody$5(AbstractMessageReaderArgumentResolver.java:210)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 22:04:39 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:04:39 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:39 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1cc1a09a columns: 1 rows: 1 pos: -1
2025-10-06 22:04:39 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 22:04:39 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@b9872c9 columns: 7 rows: 1 pos: -1
2025-10-06 22:04:39 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:04:39 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:39 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@515d8b44 columns: 1 rows: 1 pos: -1
2025-10-06 22:04:39 [parallel-11] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:04:39 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:39 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3f4633bf columns: 1 rows: 1 pos: -1
2025-10-06 22:04:39 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 22:04:39 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5b0ccd68 columns: 7 rows: 1 pos: -1
2025-10-06 22:04:39 [parallel-11] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:04:39 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:39 [parallel-11] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@bd4668c columns: 1 rows: 1 pos: -1
2025-10-06 22:04:39 [reactor-http-nio-3] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [-20]; codes [Min.inventoryUpdateRequest.availableQty,Min.availableQty,Min.java.lang.Integer,Min]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty],0]; default message [Available quantity cannot be negative]] 
org.springframework.web.bind.support.WebExchangeBindException: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [-20]; codes [Min.inventoryUpdateRequest.availableQty,Min.availableQty,Min.java.lang.Integer,Min]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty],0]; default message [Available quantity cannot be negative]] 
	at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP PUT "/api/inventory/BUZ-001-GR-M/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.lambda$readBody$5(AbstractMessageReaderArgumentResolver.java:210)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 22:04:39 [reactor-http-nio-3] ERROR c.m.i.i.e.GlobalExceptionHandler - Validation error
org.springframework.web.bind.support.WebExchangeBindException: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [-20]; codes [Min.inventoryUpdateRequest.availableQty,Min.availableQty,Min.java.lang.Integer,Min]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty],0]; default message [Available quantity cannot be negative]] 
	at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP PUT "/api/inventory/BUZ-001-GR-M/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.lambda$readBody$5(AbstractMessageReaderArgumentResolver.java:210)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@46fceb62 columns: 1 rows: 1 pos: -1
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3372adf9 columns: 7 rows: 1 pos: -1
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@464b46a1 columns: 1 rows: 1 pos: -1
2025-10-06 22:04:46 [parallel-2] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:04:46 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:46 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@35b4a5e3 columns: 1 rows: 1 pos: -1
2025-10-06 22:04:46 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 22:04:46 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4a844498 columns: 7 rows: 1 pos: -1
2025-10-06 22:04:46 [parallel-2] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:04:46 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:46 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2c10c707 columns: 1 rows: 1 pos: -1
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7d8de200 columns: 1 rows: 1 pos: -1
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@313ee15c columns: 7 rows: 1 pos: -1
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2c0544f4 columns: 1 rows: 1 pos: -1
2025-10-06 22:04:46 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - PUT /api/inventory/BUZ-001-GR-M/stores/1 - User: admin - IP: 0:0:0:0:0:0:0:1 - Setting absolute quantity to: 20
2025-10-06 22:04:46 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Updating inventory for product SKU: BUZ-001-GR-M in store: 1 with quantity: 20
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3aabed07 columns: 1 rows: 1 pos: -1
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.ID, products.sku, products.name, products.description, products.is_active, products.created_at, products.updated_at FROM products WHERE products.sku = $1 {1: 'BUZ-001-GR-M'}
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3adf703f columns: 7 rows: 1 pos: -1
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3385cbd2 columns: 1 rows: 1 pos: -1
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@173c0703 columns: 1 rows: 1 pos: -1
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@66cd36d0 columns: 5 rows: 1 pos: -1
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@333b96ca columns: 1 rows: 1 pos: -1
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i WHERE i.product_id = :productId AND i.store_id = :storeId] to [SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2]
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2b5512e7 columns: 1 rows: 1 pos: -1
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2 {1: CAST(4 AS BIGINT), 2: CAST(1 AS BIGINT)}
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6b406834 columns: 6 rows: 1 pos: -1
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@434aeb53 columns: 1 rows: 1 pos: -1
2025-10-06 22:04:46 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Updating existing inventory ID: 10
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@14b5d7a8 columns: 1 rows: 1 pos: -1
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  UPDATE inventory SET product_id = $1, store_id = $2, available_qty = $3, VERSION = $4, updated_at = $5 WHERE inventory.ID = $6 AND (inventory.VERSION = $7) {1: CAST(4 AS BIGINT), 2: CAST(1 AS BIGINT), 3: 20, 4: 1, 5: TIMESTAMP '2025-10-06 22:04:46.2715034', 6: CAST(10 AS BIGINT), 7: 0}
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@ef649a7 columns: 1 rows: 1 pos: -1
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@100c4b5d columns: 1 rows: 1 pos: -1
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(4 AS BIGINT)}
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@653d01ac columns: 7 rows: 1 pos: -1
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5cd39f9a columns: 1 rows: 1 pos: -1
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@23ca35ed columns: 1 rows: 1 pos: -1
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@48875a9c columns: 5 rows: 1 pos: -1
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:04:46 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1d054b3b columns: 1 rows: 1 pos: -1
2025-10-06 22:04:46 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully updated inventory for product BUZ-001-GR-M in store 1 - New quantity: 20 - User: admin - IP: 0:0:0:0:0:0:0:1
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@f9aa368 columns: 1 rows: 1 pos: -1
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@49250bc4 columns: 7 rows: 1 pos: -1
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@eca5743 columns: 1 rows: 1 pos: -1
2025-10-06 22:05:04 [parallel-12] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:05:04 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:04 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2d952d29 columns: 1 rows: 1 pos: -1
2025-10-06 22:05:04 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 22:05:04 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@49400b2e columns: 7 rows: 1 pos: -1
2025-10-06 22:05:04 [parallel-12] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:05:04 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:04 [parallel-12] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5e121f7f columns: 1 rows: 1 pos: -1
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@103d1740 columns: 1 rows: 1 pos: -1
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4ac3afce columns: 7 rows: 1 pos: -1
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7f9da20e columns: 1 rows: 1 pos: -1
2025-10-06 22:05:04 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - POST /api/inventory/BUZ-001-GR-M/stores/1/adjustments - User: admin - IP: 0:0:0:0:0:0:0:1 - Adjusting by: 40
2025-10-06 22:05:04 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: BUZ-001-GR-M in store: 1 by: 40
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@358d65fc columns: 1 rows: 1 pos: -1
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'BUZ-001-GR-M', 2: CAST(1 AS BIGINT)}
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2f677752 columns: 6 rows: 1 pos: -1
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6ac03f36 columns: 1 rows: 1 pos: -1
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@ab1abaa columns: 1 rows: 1 pos: -1
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  UPDATE inventory SET product_id = $1, store_id = $2, available_qty = $3, VERSION = $4, updated_at = $5 WHERE inventory.ID = $6 AND (inventory.VERSION = $7) {1: CAST(4 AS BIGINT), 2: CAST(1 AS BIGINT), 3: 60, 4: 2, 5: TIMESTAMP '2025-10-06 22:05:04.7340797', 6: CAST(10 AS BIGINT), 7: 1}
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4e83c224 columns: 1 rows: 1 pos: -1
2025-10-06 22:05:04 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Inventory adjusted successfully. New quantity: 60, Version: 2
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@52623d8a columns: 1 rows: 1 pos: -1
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(4 AS BIGINT)}
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3972d97b columns: 7 rows: 1 pos: -1
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@d793ce4 columns: 1 rows: 1 pos: -1
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@61227f10 columns: 1 rows: 1 pos: -1
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@67574023 columns: 5 rows: 1 pos: -1
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:04 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4b242542 columns: 1 rows: 1 pos: -1
2025-10-06 22:05:04 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully adjusted inventory for product BUZ-001-GR-M in store 1 by 40 - Final quantity: 60 - User: admin - IP: 0:0:0:0:0:0:0:1
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4a3fbe5f columns: 1 rows: 1 pos: -1
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@b2a5668 columns: 7 rows: 1 pos: -1
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@73c76863 columns: 1 rows: 1 pos: -1
2025-10-06 22:05:09 [parallel-8] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:05:09 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:09 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@61c9ce0e columns: 1 rows: 1 pos: -1
2025-10-06 22:05:09 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 22:05:09 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@51378025 columns: 7 rows: 1 pos: -1
2025-10-06 22:05:09 [parallel-8] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:05:09 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:09 [parallel-8] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1c133e34 columns: 1 rows: 1 pos: -1
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@562f5947 columns: 1 rows: 1 pos: -1
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3b6c7b2d columns: 7 rows: 1 pos: -1
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@74d581f0 columns: 1 rows: 1 pos: -1
2025-10-06 22:05:09 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - PUT /api/inventory/BUZ-001-GR-M/stores/1 - User: admin - IP: 0:0:0:0:0:0:0:1 - Setting absolute quantity to: 20
2025-10-06 22:05:09 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Updating inventory for product SKU: BUZ-001-GR-M in store: 1 with quantity: 20
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7f02b9f7 columns: 1 rows: 1 pos: -1
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.ID, products.sku, products.name, products.description, products.is_active, products.created_at, products.updated_at FROM products WHERE products.sku = $1 {1: 'BUZ-001-GR-M'}
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@47fc0b20 columns: 7 rows: 1 pos: -1
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6ea017e6 columns: 1 rows: 1 pos: -1
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2305786f columns: 1 rows: 1 pos: -1
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@721b5ce0 columns: 5 rows: 1 pos: -1
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2661aedd columns: 1 rows: 1 pos: -1
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i WHERE i.product_id = :productId AND i.store_id = :storeId] to [SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2]
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6fbc917 columns: 1 rows: 1 pos: -1
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2 {1: CAST(4 AS BIGINT), 2: CAST(1 AS BIGINT)}
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@498d1ad0 columns: 6 rows: 1 pos: -1
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@37281ece columns: 1 rows: 1 pos: -1
2025-10-06 22:05:09 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Updating existing inventory ID: 10
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6ddad728 columns: 1 rows: 1 pos: -1
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  UPDATE inventory SET product_id = $1, store_id = $2, available_qty = $3, VERSION = $4, updated_at = $5 WHERE inventory.ID = $6 AND (inventory.VERSION = $7) {1: CAST(4 AS BIGINT), 2: CAST(1 AS BIGINT), 3: 20, 4: 3, 5: TIMESTAMP '2025-10-06 22:05:09.4687903', 6: CAST(10 AS BIGINT), 7: 2}
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@47f32c79 columns: 1 rows: 1 pos: -1
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@28956d56 columns: 1 rows: 1 pos: -1
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(4 AS BIGINT)}
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@65f9cd68 columns: 7 rows: 1 pos: -1
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7a12a9bd columns: 1 rows: 1 pos: -1
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@52d794ac columns: 1 rows: 1 pos: -1
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@781b2798 columns: 5 rows: 1 pos: -1
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 22:05:09 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1aeb4dc2 columns: 1 rows: 1 pos: -1
2025-10-06 22:05:09 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully updated inventory for product BUZ-001-GR-M in store 1 - New quantity: 20 - User: admin - IP: 0:0:0:0:0:0:0:1
2025-10-06 22:05:42 [main] INFO  c.m.i.c.InventoryControllerTest - Starting InventoryControllerTest using Java 21.0.8 with PID 33312 (started by fedem in C:\Users\fedem\Documents\Github\inventory-management)
2025-10-06 22:05:42 [main] DEBUG c.m.i.c.InventoryControllerTest - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-06 22:05:42 [main] INFO  c.m.i.c.InventoryControllerTest - No active profile set, falling back to 1 default profile: "default"
2025-10-06 22:05:43 [main] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: 0a4660de-cab2-427d-9a30-09bcabae6fb7

2025-10-06 22:05:44 [main] INFO  c.m.i.c.InventoryControllerTest - Started InventoryControllerTest in 2.305 seconds (process running for 3.463)
2025-10-06 22:05:44 [parallel-2] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/REM-001-BL-M/stores - User: user - IP: unknown - Admin inventory query for all stores
2025-10-06 22:05:44 [parallel-2] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully retrieved inventory for product REM-001-BL-M - User: user - IP: unknown
2025-10-06 22:05:44 [parallel-4] INFO  c.m.i.i.a.i.rest.InventoryController - PUT /api/inventory/REM-001-BL-M/stores/1 - User: user - IP: unknown - Setting absolute quantity to: 30
2025-10-06 22:05:44 [parallel-4] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully updated inventory for product REM-001-BL-M in store 1 - New quantity: 30 - User: user - IP: unknown
2025-10-06 22:05:44 [parallel-6] INFO  c.m.i.i.a.i.rest.InventoryController - POST /api/inventory/REM-001-BL-M/stores/1/adjustments - User: user - IP: unknown - Adjusting by: 5
2025-10-06 22:05:44 [parallel-6] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully adjusted inventory for product REM-001-BL-M in store 1 by 5 - Final quantity: 30 - User: user - IP: unknown
2025-10-06 22:05:44 [parallel-10] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/REM-001-BL-M/stores/1 - User: user - IP: unknown - Store-specific inventory query
2025-10-06 22:05:44 [parallel-10] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully retrieved inventory for product REM-001-BL-M in store 1 - Quantity: 25 - User: user - IP: unknown
2025-10-06 22:05:44 [parallel-12] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [-5]; codes [Min.inventoryUpdateRequest.availableQty,Min.availableQty,Min.java.lang.Integer,Min]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty],0]; default message [Available quantity cannot be negative]] 
org.springframework.web.bind.support.WebExchangeBindException: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [-5]; codes [Min.inventoryUpdateRequest.availableQty,Min.availableQty,Min.java.lang.Integer,Min]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty],0]; default message [Available quantity cannot be negative]] 
	at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers$MutatorFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers$SetupMutatorFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP PUT "/api/inventory/REM-001-BL-M/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.lambda$readBody$5(AbstractMessageReaderArgumentResolver.java:210)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onComplete(FluxContextWrite.java:126)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoZip$ZipCoordinator.request(MonoZip.java:220)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:129)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onComplete(ReactorContextTestExecutionListener.java:130)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:121)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onNext(ReactorContextTestExecutionListener.java:120)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onNext(ReactorContextTestExecutionListener.java:120)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onComplete(ReactorContextTestExecutionListener.java:130)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onSubscribe(ReactorContextTestExecutionListener.java:115)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onNext(ReactorContextTestExecutionListener.java:120)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:317)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 22:05:44 [parallel-12] ERROR c.m.i.i.e.GlobalExceptionHandler - Validation error
org.springframework.web.bind.support.WebExchangeBindException: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [-5]; codes [Min.inventoryUpdateRequest.availableQty,Min.availableQty,Min.java.lang.Integer,Min]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty],0]; default message [Available quantity cannot be negative]] 
	at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers$MutatorFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers$SetupMutatorFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP PUT "/api/inventory/REM-001-BL-M/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.lambda$readBody$5(AbstractMessageReaderArgumentResolver.java:210)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onComplete(FluxContextWrite.java:126)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoZip$ZipCoordinator.request(MonoZip.java:220)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:129)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onComplete(ReactorContextTestExecutionListener.java:130)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:121)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onNext(ReactorContextTestExecutionListener.java:120)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onNext(ReactorContextTestExecutionListener.java:120)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onComplete(ReactorContextTestExecutionListener.java:130)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onSubscribe(ReactorContextTestExecutionListener.java:115)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onNext(ReactorContextTestExecutionListener.java:120)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:317)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 22:05:44 [main] INFO  c.m.i.a.service.InventoryService - Updating inventory for product SKU: REM-001-BL-M in store: 1 with quantity: -5
2025-10-06 22:05:44 [main] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: REM-001-BL-M
2025-10-06 22:05:44 [main] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: REM-001-BL-M in store: 1 by: 5
2025-10-06 22:05:44 [main] INFO  c.m.i.a.service.InventoryService - Inventory adjusted successfully. New quantity: 30, Version: 1
2025-10-06 22:05:44 [main] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: INVALID-SKU in store: 1 by: 5
2025-10-06 22:05:44 [main] ERROR c.m.i.a.service.InventoryService - Error adjusting inventory for SKU INVALID-SKU and store 1: Inventory not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Inventory not found
	at com.meli.inventorymanagement.application.service.InventoryService.adjustInventory(InventoryService.java:155)
	at com.meli.inventorymanagement.service.InventoryServiceTest.adjustInventory_InventoryNotFound(InventoryServiceTest.java:290)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:775)
	at org.junit.platform.commons.support.ReflectionSupport.invokeMethod(ReflectionSupport.java:479)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:161)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:152)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:91)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:112)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:94)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:87)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:216)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:212)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:137)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:201)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:170)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:94)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:59)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:142)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.junit.platform.launcher.core.InterceptingLauncher.lambda$execute$1(InterceptingLauncher.java:39)
	at org.junit.platform.launcher.core.ClasspathAlignmentCheckingLauncherInterceptor.intercept(ClasspathAlignmentCheckingLauncherInterceptor.java:25)
	at org.junit.platform.launcher.core.InterceptingLauncher.execute(InterceptingLauncher.java:38)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:63)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:231)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
2025-10-06 22:05:44 [main] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: INVALID-SKU
2025-10-06 22:05:44 [main] ERROR c.m.i.a.service.InventoryService - Database error while fetching inventory for SKU INVALID-SKU: Product not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Product not found
	at com.meli.inventorymanagement.application.service.InventoryService.getInventoryByProductSku(InventoryService.java:44)
	at com.meli.inventorymanagement.service.InventoryServiceTest.getInventoryByProductSku_ProductNotFound(InventoryServiceTest.java:128)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:775)
	at org.junit.platform.commons.support.ReflectionSupport.invokeMethod(ReflectionSupport.java:479)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:161)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:152)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:91)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:112)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:94)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:87)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:216)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:212)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:137)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:201)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:170)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:94)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:59)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:142)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.junit.platform.launcher.core.InterceptingLauncher.lambda$execute$1(InterceptingLauncher.java:39)
	at org.junit.platform.launcher.core.ClasspathAlignmentCheckingLauncherInterceptor.intercept(ClasspathAlignmentCheckingLauncherInterceptor.java:25)
	at org.junit.platform.launcher.core.InterceptingLauncher.execute(InterceptingLauncher.java:38)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:63)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:231)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
2025-10-06 22:05:44 [main] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: REM-001-BL-M in store: 1 by: -30
2025-10-06 22:05:44 [main] ERROR c.m.i.a.service.InventoryService - Error adjusting inventory for SKU REM-001-BL-M and store 1: Insufficient stock available
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Insufficient stock available
	at com.meli.inventorymanagement.application.service.InventoryService.lambda$adjustInventory$17(InventoryService.java:161)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.FluxRetryWhen.subscribe(FluxRetryWhen.java:81)
	at reactor.core.publisher.MonoRetryWhen.subscribeOrReturn(MonoRetryWhen.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.toVerifierAndSubscribe(DefaultStepVerifierBuilder.java:891)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:831)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:823)
	at com.meli.inventorymanagement.service.InventoryServiceTest.adjustInventory_InsufficientStock(InventoryServiceTest.java:274)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:775)
	at org.junit.platform.commons.support.ReflectionSupport.invokeMethod(ReflectionSupport.java:479)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:161)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:152)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:91)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:112)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:94)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:87)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:216)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:212)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:137)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:201)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:170)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:94)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:59)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:142)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.junit.platform.launcher.core.InterceptingLauncher.lambda$execute$1(InterceptingLauncher.java:39)
	at org.junit.platform.launcher.core.ClasspathAlignmentCheckingLauncherInterceptor.intercept(ClasspathAlignmentCheckingLauncherInterceptor.java:25)
	at org.junit.platform.launcher.core.InterceptingLauncher.execute(InterceptingLauncher.java:38)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:63)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:231)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
2025-10-06 22:05:44 [main] INFO  c.m.i.a.service.InventoryService - Updating inventory for product SKU: REM-001-BL-M in store: 1 with quantity: 30
2025-10-06 22:05:44 [main] INFO  c.m.i.a.service.InventoryService - Creating new inventory entry
2025-10-06 22:05:44 [main] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: REM-001-BL-M in store: 999
2025-10-06 22:05:44 [main] ERROR c.m.i.a.service.InventoryService - Database error while fetching inventory for SKU REM-001-BL-M and store 999: Store not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Store not found
	at com.meli.inventorymanagement.application.service.InventoryService.lambda$validateStoreExists$23(InventoryService.java:188)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:153)
	at reactor.core.publisher.MonoFlatMap.subscribeOrReturn(MonoFlatMap.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.toVerifierAndSubscribe(DefaultStepVerifierBuilder.java:891)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:831)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:823)
	at com.meli.inventorymanagement.service.InventoryServiceTest.getInventoryByProductSkuAndStore_StoreNotFound(InventoryServiceTest.java:181)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:775)
	at org.junit.platform.commons.support.ReflectionSupport.invokeMethod(ReflectionSupport.java:479)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:161)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:152)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:91)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:112)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:94)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:87)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:216)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:212)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:137)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:201)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:170)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:94)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:59)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:142)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.junit.platform.launcher.core.InterceptingLauncher.lambda$execute$1(InterceptingLauncher.java:39)
	at org.junit.platform.launcher.core.ClasspathAlignmentCheckingLauncherInterceptor.intercept(ClasspathAlignmentCheckingLauncherInterceptor.java:25)
	at org.junit.platform.launcher.core.InterceptingLauncher.execute(InterceptingLauncher.java:38)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:63)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:231)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
2025-10-06 22:05:44 [main] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: REM-001-BL-M in store: 1
2025-10-06 22:05:53 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.netty.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-06 22:05:53 [netty-shutdown] INFO  o.s.b.w.e.netty.GracefulShutdown - Graceful shutdown complete
2025-10-06 22:48:42 [main] INFO  c.m.i.c.InventoryControllerTest - Starting InventoryControllerTest using Java 21.0.8 with PID 12432 (started by fedem in C:\Users\fedem\Documents\Github\inventory-management)
2025-10-06 22:48:42 [main] DEBUG c.m.i.c.InventoryControllerTest - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-06 22:48:42 [main] INFO  c.m.i.c.InventoryControllerTest - No active profile set, falling back to 1 default profile: "default"
2025-10-06 22:48:44 [main] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: ed830c32-77b5-4fe9-b99a-54a1b6320ddf

2025-10-06 22:48:45 [main] INFO  c.m.i.c.InventoryControllerTest - Started InventoryControllerTest in 2.85 seconds (process running for 3.844)
2025-10-06 22:48:45 [parallel-2] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/REM-001-BL-M/stores - User: user - IP: unknown - Admin inventory query for all stores
2025-10-06 22:48:45 [parallel-2] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully retrieved inventory for product REM-001-BL-M - User: user - IP: unknown
2025-10-06 22:48:45 [parallel-4] INFO  c.m.i.i.a.i.rest.InventoryController - PUT /api/inventory/REM-001-BL-M/stores/1 - User: user - IP: unknown - Setting absolute quantity to: 30
2025-10-06 22:48:45 [parallel-4] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully updated inventory for product REM-001-BL-M in store 1 - New quantity: 30 - User: user - IP: unknown
2025-10-06 22:48:45 [parallel-6] INFO  c.m.i.i.a.i.rest.InventoryController - POST /api/inventory/REM-001-BL-M/stores/1/adjustments - User: user - IP: unknown - Adjusting by: 5
2025-10-06 22:48:45 [parallel-6] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully adjusted inventory for product REM-001-BL-M in store 1 by 5 - Final quantity: 30 - User: user - IP: unknown
2025-10-06 22:48:45 [parallel-10] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/REM-001-BL-M/stores/1 - User: user - IP: unknown - Store-specific inventory query
2025-10-06 22:48:45 [parallel-10] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully retrieved inventory for product REM-001-BL-M in store 1 - Quantity: 25 - User: user - IP: unknown
2025-10-06 22:48:45 [parallel-12] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [-5]; codes [Min.inventoryUpdateRequest.availableQty,Min.availableQty,Min.java.lang.Integer,Min]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty],0]; default message [Available quantity cannot be negative]] 
org.springframework.web.bind.support.WebExchangeBindException: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [-5]; codes [Min.inventoryUpdateRequest.availableQty,Min.availableQty,Min.java.lang.Integer,Min]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty],0]; default message [Available quantity cannot be negative]] 
	at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers$MutatorFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers$SetupMutatorFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP PUT "/api/inventory/REM-001-BL-M/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.lambda$readBody$5(AbstractMessageReaderArgumentResolver.java:210)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onComplete(FluxContextWrite.java:126)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoZip$ZipCoordinator.request(MonoZip.java:220)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:129)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onComplete(ReactorContextTestExecutionListener.java:130)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:121)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onNext(ReactorContextTestExecutionListener.java:120)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onNext(ReactorContextTestExecutionListener.java:120)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onComplete(ReactorContextTestExecutionListener.java:130)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onSubscribe(ReactorContextTestExecutionListener.java:115)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onNext(ReactorContextTestExecutionListener.java:120)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 22:48:45 [parallel-12] ERROR c.m.i.i.e.GlobalExceptionHandler - Validation error
org.springframework.web.bind.support.WebExchangeBindException: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [-5]; codes [Min.inventoryUpdateRequest.availableQty,Min.availableQty,Min.java.lang.Integer,Min]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty],0]; default message [Available quantity cannot be negative]] 
	at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers$MutatorFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers$SetupMutatorFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP PUT "/api/inventory/REM-001-BL-M/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.lambda$readBody$5(AbstractMessageReaderArgumentResolver.java:210)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onComplete(FluxContextWrite.java:126)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoZip$ZipCoordinator.request(MonoZip.java:220)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:129)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onComplete(ReactorContextTestExecutionListener.java:130)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:121)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onNext(ReactorContextTestExecutionListener.java:120)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onNext(ReactorContextTestExecutionListener.java:120)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onComplete(ReactorContextTestExecutionListener.java:130)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onSubscribe(ReactorContextTestExecutionListener.java:115)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onNext(ReactorContextTestExecutionListener.java:120)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 22:48:46 [main] INFO  c.m.i.a.service.InventoryService - Updating inventory for product SKU: REM-001-BL-M in store: 1 with quantity: -5
2025-10-06 22:48:46 [main] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: REM-001-BL-M
2025-10-06 22:48:46 [main] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: REM-001-BL-M in store: 1 by: 5
2025-10-06 22:48:46 [main] INFO  c.m.i.a.service.InventoryService - Inventory adjusted successfully. New quantity: 30, Version: 1
2025-10-06 22:48:46 [main] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: INVALID-SKU in store: 1 by: 5
2025-10-06 22:48:46 [main] ERROR c.m.i.a.service.InventoryService - Error adjusting inventory for SKU INVALID-SKU and store 1: Inventory not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Inventory not found
	at com.meli.inventorymanagement.application.service.InventoryService.adjustInventory(InventoryService.java:155)
	at com.meli.inventorymanagement.service.InventoryServiceTest.adjustInventory_InventoryNotFound(InventoryServiceTest.java:290)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:775)
	at org.junit.platform.commons.support.ReflectionSupport.invokeMethod(ReflectionSupport.java:479)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:161)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:152)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:91)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:112)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:94)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:87)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:216)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:212)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:137)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:201)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:170)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:94)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:59)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:142)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.junit.platform.launcher.core.InterceptingLauncher.lambda$execute$1(InterceptingLauncher.java:39)
	at org.junit.platform.launcher.core.ClasspathAlignmentCheckingLauncherInterceptor.intercept(ClasspathAlignmentCheckingLauncherInterceptor.java:25)
	at org.junit.platform.launcher.core.InterceptingLauncher.execute(InterceptingLauncher.java:38)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.apache.maven.surefire.junitplatform.LauncherAdapter.executeWithoutCancellationToken(LauncherAdapter.java:60)
	at org.apache.maven.surefire.junitplatform.LauncherAdapter.execute(LauncherAdapter.java:52)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:203)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:168)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:136)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
2025-10-06 22:48:46 [main] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: INVALID-SKU
2025-10-06 22:48:46 [main] ERROR c.m.i.a.service.InventoryService - Database error while fetching inventory for SKU INVALID-SKU: Product not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Product not found
	at com.meli.inventorymanagement.application.service.InventoryService.getInventoryByProductSku(InventoryService.java:44)
	at com.meli.inventorymanagement.service.InventoryServiceTest.getInventoryByProductSku_ProductNotFound(InventoryServiceTest.java:128)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:775)
	at org.junit.platform.commons.support.ReflectionSupport.invokeMethod(ReflectionSupport.java:479)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:161)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:152)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:91)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:112)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:94)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:87)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:216)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:212)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:137)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:201)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:170)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:94)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:59)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:142)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.junit.platform.launcher.core.InterceptingLauncher.lambda$execute$1(InterceptingLauncher.java:39)
	at org.junit.platform.launcher.core.ClasspathAlignmentCheckingLauncherInterceptor.intercept(ClasspathAlignmentCheckingLauncherInterceptor.java:25)
	at org.junit.platform.launcher.core.InterceptingLauncher.execute(InterceptingLauncher.java:38)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.apache.maven.surefire.junitplatform.LauncherAdapter.executeWithoutCancellationToken(LauncherAdapter.java:60)
	at org.apache.maven.surefire.junitplatform.LauncherAdapter.execute(LauncherAdapter.java:52)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:203)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:168)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:136)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
2025-10-06 22:48:46 [main] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: REM-001-BL-M in store: 1 by: -30
2025-10-06 22:48:46 [main] ERROR c.m.i.a.service.InventoryService - Error adjusting inventory for SKU REM-001-BL-M and store 1: Insufficient stock available
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Insufficient stock available
	at com.meli.inventorymanagement.application.service.InventoryService.lambda$adjustInventory$17(InventoryService.java:161)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.FluxRetryWhen.subscribe(FluxRetryWhen.java:81)
	at reactor.core.publisher.MonoRetryWhen.subscribeOrReturn(MonoRetryWhen.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.toVerifierAndSubscribe(DefaultStepVerifierBuilder.java:891)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:831)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:823)
	at com.meli.inventorymanagement.service.InventoryServiceTest.adjustInventory_InsufficientStock(InventoryServiceTest.java:274)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:775)
	at org.junit.platform.commons.support.ReflectionSupport.invokeMethod(ReflectionSupport.java:479)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:161)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:152)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:91)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:112)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:94)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:87)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:216)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:212)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:137)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:201)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:170)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:94)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:59)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:142)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.junit.platform.launcher.core.InterceptingLauncher.lambda$execute$1(InterceptingLauncher.java:39)
	at org.junit.platform.launcher.core.ClasspathAlignmentCheckingLauncherInterceptor.intercept(ClasspathAlignmentCheckingLauncherInterceptor.java:25)
	at org.junit.platform.launcher.core.InterceptingLauncher.execute(InterceptingLauncher.java:38)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.apache.maven.surefire.junitplatform.LauncherAdapter.executeWithoutCancellationToken(LauncherAdapter.java:60)
	at org.apache.maven.surefire.junitplatform.LauncherAdapter.execute(LauncherAdapter.java:52)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:203)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:168)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:136)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
2025-10-06 22:48:46 [main] INFO  c.m.i.a.service.InventoryService - Updating inventory for product SKU: REM-001-BL-M in store: 1 with quantity: 30
2025-10-06 22:48:46 [main] INFO  c.m.i.a.service.InventoryService - Creating new inventory entry
2025-10-06 22:48:46 [main] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: REM-001-BL-M in store: 999
2025-10-06 22:48:46 [main] ERROR c.m.i.a.service.InventoryService - Database error while fetching inventory for SKU REM-001-BL-M and store 999: Store not found
com.meli.inventorymanagement.infrastructure.exception.BusinessException: Store not found
	at com.meli.inventorymanagement.application.service.InventoryService.lambda$validateStoreExists$23(InventoryService.java:188)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:153)
	at reactor.core.publisher.MonoFlatMap.subscribeOrReturn(MonoFlatMap.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.toVerifierAndSubscribe(DefaultStepVerifierBuilder.java:891)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:831)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:823)
	at com.meli.inventorymanagement.service.InventoryServiceTest.getInventoryByProductSkuAndStore_StoreNotFound(InventoryServiceTest.java:181)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:775)
	at org.junit.platform.commons.support.ReflectionSupport.invokeMethod(ReflectionSupport.java:479)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:161)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:152)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:91)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:112)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:94)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:87)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:216)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:212)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:137)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:201)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:170)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:94)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:59)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:142)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.junit.platform.launcher.core.InterceptingLauncher.lambda$execute$1(InterceptingLauncher.java:39)
	at org.junit.platform.launcher.core.ClasspathAlignmentCheckingLauncherInterceptor.intercept(ClasspathAlignmentCheckingLauncherInterceptor.java:25)
	at org.junit.platform.launcher.core.InterceptingLauncher.execute(InterceptingLauncher.java:38)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.apache.maven.surefire.junitplatform.LauncherAdapter.executeWithoutCancellationToken(LauncherAdapter.java:60)
	at org.apache.maven.surefire.junitplatform.LauncherAdapter.execute(LauncherAdapter.java:52)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:203)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:168)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:136)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
2025-10-06 22:48:46 [main] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: REM-001-BL-M in store: 1
2025-10-06 23:07:35 [main] INFO  c.m.i.c.InventoryControllerTest - Starting InventoryControllerTest using Java 21.0.8 with PID 39000 (started by fedem in C:\Users\fedem\Documents\Github\inventory-management)
2025-10-06 23:07:35 [main] DEBUG c.m.i.c.InventoryControllerTest - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-06 23:07:35 [main] INFO  c.m.i.c.InventoryControllerTest - No active profile set, falling back to 1 default profile: "default"
2025-10-06 23:07:37 [main] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: c2e86832-895e-41ed-8804-f12c3831673d

2025-10-06 23:07:37 [main] INFO  c.m.i.c.InventoryControllerTest - Started InventoryControllerTest in 2.683 seconds (process running for 3.639)
2025-10-06 23:07:37 [parallel-2] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/REM-001-BL-M/stores - User: user - IP: unknown - Admin inventory query for all stores
2025-10-06 23:07:37 [parallel-2] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully retrieved inventory for product REM-001-BL-M - User: user - IP: unknown
2025-10-06 23:07:38 [parallel-4] INFO  c.m.i.i.a.i.rest.InventoryController - PUT /api/inventory/REM-001-BL-M/stores/1 - User: user - IP: unknown - Setting absolute quantity to: 30
2025-10-06 23:07:38 [parallel-4] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully updated inventory for product REM-001-BL-M in store 1 - New quantity: 30 - User: user - IP: unknown
2025-10-06 23:07:38 [parallel-6] INFO  c.m.i.i.a.i.rest.InventoryController - POST /api/inventory/REM-001-BL-M/stores/1/adjustments - User: user - IP: unknown - Adjusting by: 5
2025-10-06 23:07:38 [parallel-6] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully adjusted inventory for product REM-001-BL-M in store 1 by 5 - Final quantity: 30 - User: user - IP: unknown
2025-10-06 23:07:38 [parallel-10] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/REM-001-BL-M/stores/1 - User: user - IP: unknown - Store-specific inventory query
2025-10-06 23:07:38 [parallel-10] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully retrieved inventory for product REM-001-BL-M in store 1 - Quantity: 25 - User: user - IP: unknown
2025-10-06 23:07:38 [parallel-12] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [-5]; codes [Min.inventoryUpdateRequest.availableQty,Min.availableQty,Min.java.lang.Integer,Min]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty],0]; default message [Available quantity cannot be negative]] 
org.springframework.web.bind.support.WebExchangeBindException: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [-5]; codes [Min.inventoryUpdateRequest.availableQty,Min.availableQty,Min.java.lang.Integer,Min]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty],0]; default message [Available quantity cannot be negative]] 
	at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers$MutatorFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers$SetupMutatorFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP PUT "/api/inventory/REM-001-BL-M/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.lambda$readBody$5(AbstractMessageReaderArgumentResolver.java:210)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onComplete(FluxContextWrite.java:126)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoZip$ZipCoordinator.request(MonoZip.java:220)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:129)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onComplete(ReactorContextTestExecutionListener.java:130)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:121)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onNext(ReactorContextTestExecutionListener.java:120)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onNext(ReactorContextTestExecutionListener.java:120)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onComplete(ReactorContextTestExecutionListener.java:130)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onSubscribe(ReactorContextTestExecutionListener.java:115)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onNext(ReactorContextTestExecutionListener.java:120)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 23:07:38 [parallel-12] ERROR c.m.i.i.e.GlobalExceptionHandler - Validation error
org.springframework.web.bind.support.WebExchangeBindException: Validation failed for argument at index 2 in method: public reactor.core.publisher.Mono<com.meli.inventorymanagement.application.dto.InventoryResponse> com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController.updateInventory(java.lang.String,java.lang.Long,com.meli.inventorymanagement.application.dto.InventoryUpdateRequest,org.springframework.web.server.ServerWebExchange), with 1 error(s): [Field error in object 'inventoryUpdateRequest' on field 'availableQty': rejected value [-5]; codes [Min.inventoryUpdateRequest.availableQty,Min.availableQty,Min.java.lang.Integer,Min]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [inventoryUpdateRequest.availableQty,availableQty]; arguments []; default message [availableQty],0]; default message [Available quantity cannot be negative]] 
	at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers$MutatorFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers$SetupMutatorFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP PUT "/api/inventory/REM-001-BL-M/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.validate(AbstractMessageReaderArgumentResolver.java:289)
		at org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.lambda$readBody$5(AbstractMessageReaderArgumentResolver.java:210)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:185)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onComplete(FluxContextWrite.java:126)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoZip$ZipCoordinator.request(MonoZip.java:220)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onSubscribe(MonoIgnoreThen.java:135)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:129)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onComplete(ReactorContextTestExecutionListener.java:130)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:121)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onNext(ReactorContextTestExecutionListener.java:120)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onNext(ReactorContextTestExecutionListener.java:120)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onComplete(ReactorContextTestExecutionListener.java:130)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onSubscribe(ReactorContextTestExecutionListener.java:115)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at org.springframework.security.test.context.support.ReactorContextTestExecutionListener$DelegateTestExecutionListener$SecuritySubContext.onNext(ReactorContextTestExecutionListener.java:120)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 23:07:38 [main] INFO  c.m.i.a.service.InventoryService - Updating inventory for product SKU: REM-001-BL-M in store: 1 with quantity: -5
2025-10-06 23:07:38 [main] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: REM-001-BL-M
2025-10-06 23:07:38 [main] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: REM-001-BL-M in store: 1 by: 5
2025-10-06 23:07:38 [main] INFO  c.m.i.a.service.InventoryService - Inventory adjusted successfully. New quantity: 30, Version: 1
2025-10-06 23:07:38 [main] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: INVALID-SKU in store: 1 by: 5
2025-10-06 23:07:38 [main] ERROR c.m.i.a.service.InventoryService - Error adjusting inventory for SKU INVALID-SKU and store 1: Inventory not found
com.meli.inventorymanagement.domain.exception.BusinessException: Inventory not found
	at com.meli.inventorymanagement.application.service.InventoryService.adjustInventory(InventoryService.java:155)
	at com.meli.inventorymanagement.service.InventoryServiceTest.adjustInventory_InventoryNotFound(InventoryServiceTest.java:290)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:775)
	at org.junit.platform.commons.support.ReflectionSupport.invokeMethod(ReflectionSupport.java:479)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:161)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:152)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:91)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:112)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:94)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:87)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:216)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:212)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:137)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:201)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:170)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:94)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:59)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:142)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.junit.platform.launcher.core.InterceptingLauncher.lambda$execute$1(InterceptingLauncher.java:39)
	at org.junit.platform.launcher.core.ClasspathAlignmentCheckingLauncherInterceptor.intercept(ClasspathAlignmentCheckingLauncherInterceptor.java:25)
	at org.junit.platform.launcher.core.InterceptingLauncher.execute(InterceptingLauncher.java:38)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.apache.maven.surefire.junitplatform.LauncherAdapter.executeWithoutCancellationToken(LauncherAdapter.java:60)
	at org.apache.maven.surefire.junitplatform.LauncherAdapter.execute(LauncherAdapter.java:52)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:203)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:168)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:136)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
2025-10-06 23:07:38 [main] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: INVALID-SKU
2025-10-06 23:07:38 [main] ERROR c.m.i.a.service.InventoryService - Database error while fetching inventory for SKU INVALID-SKU: Product not found
com.meli.inventorymanagement.domain.exception.BusinessException: Product not found
	at com.meli.inventorymanagement.application.service.InventoryService.getInventoryByProductSku(InventoryService.java:44)
	at com.meli.inventorymanagement.service.InventoryServiceTest.getInventoryByProductSku_ProductNotFound(InventoryServiceTest.java:128)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:775)
	at org.junit.platform.commons.support.ReflectionSupport.invokeMethod(ReflectionSupport.java:479)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:161)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:152)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:91)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:112)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:94)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:87)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:216)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:212)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:137)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:201)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:170)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:94)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:59)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:142)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.junit.platform.launcher.core.InterceptingLauncher.lambda$execute$1(InterceptingLauncher.java:39)
	at org.junit.platform.launcher.core.ClasspathAlignmentCheckingLauncherInterceptor.intercept(ClasspathAlignmentCheckingLauncherInterceptor.java:25)
	at org.junit.platform.launcher.core.InterceptingLauncher.execute(InterceptingLauncher.java:38)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.apache.maven.surefire.junitplatform.LauncherAdapter.executeWithoutCancellationToken(LauncherAdapter.java:60)
	at org.apache.maven.surefire.junitplatform.LauncherAdapter.execute(LauncherAdapter.java:52)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:203)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:168)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:136)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
2025-10-06 23:07:38 [main] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: REM-001-BL-M in store: 1 by: -30
2025-10-06 23:07:38 [main] ERROR c.m.i.a.service.InventoryService - Error adjusting inventory for SKU REM-001-BL-M and store 1: Insufficient stock available
com.meli.inventorymanagement.domain.exception.BusinessException: Insufficient stock available
	at com.meli.inventorymanagement.application.service.InventoryService.lambda$adjustInventory$17(InventoryService.java:161)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
	at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
	at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
	at reactor.core.publisher.FluxRetryWhen.subscribe(FluxRetryWhen.java:81)
	at reactor.core.publisher.MonoRetryWhen.subscribeOrReturn(MonoRetryWhen.java:46)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.toVerifierAndSubscribe(DefaultStepVerifierBuilder.java:891)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:831)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:823)
	at com.meli.inventorymanagement.service.InventoryServiceTest.adjustInventory_InsufficientStock(InventoryServiceTest.java:274)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:775)
	at org.junit.platform.commons.support.ReflectionSupport.invokeMethod(ReflectionSupport.java:479)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:161)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:152)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:91)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:112)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:94)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:87)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:216)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:212)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:137)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:201)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:170)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:94)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:59)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:142)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.junit.platform.launcher.core.InterceptingLauncher.lambda$execute$1(InterceptingLauncher.java:39)
	at org.junit.platform.launcher.core.ClasspathAlignmentCheckingLauncherInterceptor.intercept(ClasspathAlignmentCheckingLauncherInterceptor.java:25)
	at org.junit.platform.launcher.core.InterceptingLauncher.execute(InterceptingLauncher.java:38)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.apache.maven.surefire.junitplatform.LauncherAdapter.executeWithoutCancellationToken(LauncherAdapter.java:60)
	at org.apache.maven.surefire.junitplatform.LauncherAdapter.execute(LauncherAdapter.java:52)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:203)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:168)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:136)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
2025-10-06 23:07:38 [main] INFO  c.m.i.a.service.InventoryService - Updating inventory for product SKU: REM-001-BL-M in store: 1 with quantity: 30
2025-10-06 23:07:38 [main] INFO  c.m.i.a.service.InventoryService - Creating new inventory entry
2025-10-06 23:07:38 [main] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: REM-001-BL-M in store: 999
2025-10-06 23:07:38 [main] ERROR c.m.i.a.service.InventoryService - Database error while fetching inventory for SKU REM-001-BL-M and store 999: Store not found
com.meli.inventorymanagement.domain.exception.BusinessException: Store not found
	at com.meli.inventorymanagement.application.service.InventoryService.lambda$validateStoreExists$23(InventoryService.java:188)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:153)
	at reactor.core.publisher.MonoFlatMap.subscribeOrReturn(MonoFlatMap.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
	at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.toVerifierAndSubscribe(DefaultStepVerifierBuilder.java:891)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:831)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:823)
	at com.meli.inventorymanagement.service.InventoryServiceTest.getInventoryByProductSkuAndStore_StoreNotFound(InventoryServiceTest.java:181)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:775)
	at org.junit.platform.commons.support.ReflectionSupport.invokeMethod(ReflectionSupport.java:479)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:161)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:152)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:91)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:112)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:94)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:87)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:216)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:212)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:137)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:201)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:170)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:94)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:59)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:142)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.junit.platform.launcher.core.InterceptingLauncher.lambda$execute$1(InterceptingLauncher.java:39)
	at org.junit.platform.launcher.core.ClasspathAlignmentCheckingLauncherInterceptor.intercept(ClasspathAlignmentCheckingLauncherInterceptor.java:25)
	at org.junit.platform.launcher.core.InterceptingLauncher.execute(InterceptingLauncher.java:38)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.apache.maven.surefire.junitplatform.LauncherAdapter.executeWithoutCancellationToken(LauncherAdapter.java:60)
	at org.apache.maven.surefire.junitplatform.LauncherAdapter.execute(LauncherAdapter.java:52)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:203)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:168)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:136)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
2025-10-06 23:07:38 [main] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: REM-001-BL-M in store: 1
2025-10-06 23:07:47 [restartedMain] INFO  c.m.i.InventoryManagementApplication - Starting InventoryManagementApplication using Java 21.0.8 with PID 39676 (C:\Users\fedem\Documents\Github\inventory-management\target\classes started by fedem in C:\Users\fedem\Documents\Github\inventory-management)
2025-10-06 23:07:47 [restartedMain] DEBUG c.m.i.InventoryManagementApplication - Running with Spring Boot v3.5.6, Spring v6.2.11
2025-10-06 23:07:47 [restartedMain] INFO  c.m.i.InventoryManagementApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-06 23:07:47 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-06 23:07:47 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-06 23:07:48 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data R2DBC repositories in DEFAULT mode.
2025-10-06 23:07:48 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 92 ms. Found 4 R2DBC repository interfaces.
2025-10-06 23:07:49 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-06 23:07:49 [restartedMain] INFO  c.m.i.i.config.R2dbcConfig - Database initialization configured
2025-10-06 23:07:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 23:07:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@cda74c9 columns: 1 rows: 1 pos: -1
2025-10-06 23:07:49 [single-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:07:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:07:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@25a0dcfc columns: 1 rows: 1 pos: -1
2025-10-06 23:07:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 23:07:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@55d91bff columns: 1 rows: 1 pos: -1
2025-10-06 23:07:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 23:07:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@63ed722a columns: 1 rows: 1 pos: -1
2025-10-06 23:07:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 23:07:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1557c062 columns: 1 rows: 1 pos: -1
2025-10-06 23:07:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 23:07:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7939a40e columns: 1 rows: 1 pos: -1
2025-10-06 23:07:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 23:07:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@64a24e35 columns: 1 rows: 1 pos: -1
2025-10-06 23:07:49 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS inventory
2025-10-06 23:07:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 23:07:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6cd60ca9 columns: 1 rows: 1 pos: -1
2025-10-06 23:07:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 23:07:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@47299581 columns: 1 rows: 1 pos: -1
2025-10-06 23:07:49 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS user_store_permissions
2025-10-06 23:07:49 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS products
2025-10-06 23:07:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 23:07:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@594e8c44 columns: 1 rows: 1 pos: -1
2025-10-06 23:07:49 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS stores
2025-10-06 23:07:49 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  DROP TABLE IF EXISTS users
2025-10-06 23:07:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CALL H2VERSION()
2025-10-06 23:07:49 [single-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@52c09f71 columns: 1 rows: 1 pos: -1
2025-10-06 23:07:49 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS products ( id BIGINT AUTO_INCREMENT PRIMARY KEY, sku VARCHAR(50) NOT NULL UNIQUE, name VARCHAR(200) NOT NULL, description VARCHAR(500), is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 23:07:49 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS stores ( id BIGINT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100) NOT NULL UNIQUE, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 23:07:49 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS users ( id BIGINT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(50) NOT NULL UNIQUE, password_hash VARCHAR(255) NOT NULL, role VARCHAR(20) NOT NULL, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP )
2025-10-06 23:07:49 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS inventory ( id BIGINT AUTO_INCREMENT PRIMARY KEY, product_id BIGINT NOT NULL, store_id BIGINT NOT NULL, available_qty INT NOT NULL DEFAULT 0, version INT NOT NULL DEFAULT 0, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (product_id) REFERENCES products(id), FOREIGN KEY (store_id) REFERENCES stores(id), UNIQUE(product_id, store_id) )
2025-10-06 23:07:49 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE TABLE IF NOT EXISTS user_store_permissions ( id BIGINT AUTO_INCREMENT PRIMARY KEY, user_id BIGINT NOT NULL, store_id BIGINT NOT NULL, FOREIGN KEY (user_id) REFERENCES users(id), FOREIGN KEY (store_id) REFERENCES stores(id), UNIQUE(user_id, store_id) )
2025-10-06 23:07:49 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_inventory_product_id ON inventory(product_id)
2025-10-06 23:07:49 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_inventory_store_id ON inventory(store_id)
2025-10-06 23:07:49 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_user_store_permissions_user_id ON user_store_permissions(user_id)
2025-10-06 23:07:49 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_user_store_permissions_store_id ON user_store_permissions(store_id)
2025-10-06 23:07:49 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_products_sku ON products(sku)
2025-10-06 23:07:49 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  CREATE INDEX IF NOT EXISTS idx_users_username ON users(username)
2025-10-06 23:07:49 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO stores (id, name, is_active, created_at, updated_at) VALUES (1, 'Shopping Dinosaurio Mall', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'Centro Maipu 712', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'Nuevo Centro Shopping', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 23:07:49 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO users (id, username, password_hash, role, is_active, created_at, updated_at) VALUES (1, 'admin', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'ADMIN', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'user_dinosaurio', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'user_maipu', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (4, 'user_nuevo_centro', '$2a$10$64K/otiwP59MWSCrAWD8XezUo5l.v5k0X9zaV3S8NqKKbabW72WEa', 'STORE_USER', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 23:07:49 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO user_store_permissions (id, user_id, store_id) VALUES (1, 2, 1), (2, 3, 2), (3, 4, 3)
2025-10-06 23:07:49 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO products (id, sku, name, description, is_active, created_at, updated_at) VALUES (1, 'REM-001-BL-M', 'Remera Básica Blanca M', 'Remera de algodón peinado 160gsm', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (2, 'REM-002-NG-L', 'Remera Básica Negra L', 'Remera cuello redondo negra', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (3, 'REM-003-AZ-S', 'Remera Azul S', 'Remera azul marino corte clásico', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (4, 'BUZ-001-GR-M', 'Buzo Hoodie Gris M', 'Buzo frisa liviano con capucha', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (5, 'BUZ-002-NG-L', 'Buzo Hoodie Negro L', 'Buzo de algodón grueso con bolsillo canguro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (6, 'PAN-001-NG-32', 'Pantalón Chino Negro 32', 'Pantalón tipo chino con elastano', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (7, 'PAN-002-AZ-34', 'Jeans Azul 34', 'Jeans corte slim fit azul oscuro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (8, 'BER-001-KH-M', 'Bermuda Cargo Khaki M', 'Bermuda con bolsillos laterales', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (9, 'BER-002-AZ-L', 'Bermuda Denim Azul L', 'Bermuda de jean azul clásico', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (10, 'CAM-001-BL-M', 'Camisa Blanca Oxford M', 'Camisa manga larga oxford blanco', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (11, 'CAM-002-CE-L', 'Camisa Celeste L', 'Camisa de poplin celeste claro', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (12, 'CMP-001-NG-M', 'Campera Rompeviento Negra M', 'Campera liviana impermeable con cierre', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (13, 'CMP-002-AZ-L', 'Campera Puffer Azul L', 'Campera acolchada pluma sintética', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (14, 'ZAP-001-NG-42', 'Zapatillas Urbanas Negras 42', 'Zapatillas urbanas con suela EVA', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (15, 'ZAP-002-BL-41', 'Zapatillas Running Blancas 41', 'Zapatillas deportivas livianas', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (16, 'GOR-001-NG-U', 'Gorra Negra U', 'Gorra ajustable negra con visera curva', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP), (17, 'MED-001-BL-U', 'Pack Medias Blancas U', 'Pack x3 medias tobillera blancas', TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
2025-10-06 23:07:49 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  INSERT INTO inventory (id, product_id, store_id, available_qty, version, updated_at) VALUES (1, 1, 1, 25, 0, CURRENT_TIMESTAMP), (2, 1, 2, 18, 0, CURRENT_TIMESTAMP), (3, 1, 3, 35, 0, CURRENT_TIMESTAMP), (4, 2, 1, 20, 0, CURRENT_TIMESTAMP), (5, 2, 2, 15, 0, CURRENT_TIMESTAMP), (6, 2, 3, 30, 0, CURRENT_TIMESTAMP), (7, 3, 1, 14, 0, CURRENT_TIMESTAMP), (8, 3, 2, 22, 0, CURRENT_TIMESTAMP), (9, 3, 3, 28, 0, CURRENT_TIMESTAMP), (10, 4, 1, 10, 0, CURRENT_TIMESTAMP), (11, 4, 2, 12, 0, CURRENT_TIMESTAMP), (12, 4, 3, 20, 0, CURRENT_TIMESTAMP), (13, 5, 1, 8, 0, CURRENT_TIMESTAMP), (14, 5, 2, 11, 0, CURRENT_TIMESTAMP), (15, 5, 3, 16, 0, CURRENT_TIMESTAMP), (16, 6, 1, 12, 0, CURRENT_TIMESTAMP), (17, 6, 2, 10, 0, CURRENT_TIMESTAMP), (18, 6, 3, 18, 0, CURRENT_TIMESTAMP), (19, 7, 1, 14, 0, CURRENT_TIMESTAMP), (20, 7, 2, 13, 0, CURRENT_TIMESTAMP), (21, 7, 3, 22, 0, CURRENT_TIMESTAMP), (22, 8, 1, 16, 0, CURRENT_TIMESTAMP), (23, 8, 2, 12, 0, CURRENT_TIMESTAMP), (24, 8, 3, 24, 0, CURRENT_TIMESTAMP), (25, 9, 1, 10, 0, CURRENT_TIMESTAMP), (26, 9, 2, 14, 0, CURRENT_TIMESTAMP), (27, 9, 3, 20, 0, CURRENT_TIMESTAMP), (28, 10, 1, 11, 0, CURRENT_TIMESTAMP), (29, 10, 2, 10, 0, CURRENT_TIMESTAMP), (30, 10, 3, 19, 0, CURRENT_TIMESTAMP), (31, 11, 1, 9, 0, CURRENT_TIMESTAMP), (32, 11, 2, 12, 0, CURRENT_TIMESTAMP), (33, 11, 3, 18, 0, CURRENT_TIMESTAMP), (34, 12, 1, 6, 0, CURRENT_TIMESTAMP), (35, 12, 2, 7, 0, CURRENT_TIMESTAMP), (36, 12, 3, 12, 0, CURRENT_TIMESTAMP), (37, 13, 1, 5, 0, CURRENT_TIMESTAMP), (38, 13, 2, 6, 0, CURRENT_TIMESTAMP), (39, 13, 3, 10, 0, CURRENT_TIMESTAMP), (40, 14, 1, 8, 0, CURRENT_TIMESTAMP), (41, 14, 2, 10, 0, CURRENT_TIMESTAMP), (42, 14, 3, 15, 0, CURRENT_TIMESTAMP), (43, 15, 1, 7, 0, CURRENT_TIMESTAMP), (44, 15, 2, 9, 0, CURRENT_TIMESTAMP), (45, 15, 3, 14, 0, CURRENT_TIMESTAMP), (46, 16, 1, 20, 0, CURRENT_TIMESTAMP), (47, 16, 2, 18, 0, CURRENT_TIMESTAMP), (48, 16, 3, 30, 0, CURRENT_TIMESTAMP), (49, 17, 1, 35, 0, CURRENT_TIMESTAMP), (50, 17, 2, 28, 0, CURRENT_TIMESTAMP), (51, 17, 3, 50, 0, CURRENT_TIMESTAMP)
2025-10-06 23:07:49 [Thread-18] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:07:49 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:07:49 [Thread-18] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@b6b97af columns: 1 rows: 1 pos: -1
2025-10-06 23:07:49 [restartedMain] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: 4fbe61b1-e95f-4d9e-aecb-cfcdf3a4279f

2025-10-06 23:07:50 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 4 endpoints beneath base path '/actuator'
2025-10-06 23:07:50 [restartedMain] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8080 (http)
2025-10-06 23:07:51 [restartedMain] INFO  c.m.i.InventoryManagementApplication - Started InventoryManagementApplication in 4.034 seconds (process running for 4.606)
2025-10-06 23:07:51 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:07:51 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:07:51 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@36b7cbac columns: 1 rows: 1 pos: -1
2025-10-06 23:07:51 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:07:51 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5d54d2ef columns: 1 rows: 1 pos: -1
2025-10-06 23:07:51 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:07:51 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:07:51 [RMI TCP Connection(4)-172.18.16.1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@115af1d5 columns: 1 rows: 1 pos: -1
2025-10-06 23:07:53 [reactor-http-nio-3] INFO  c.m.i.i.a.input.rest.AuthController - POST /api/auth/login - Username: admin - IP: 0:0:0:0:0:0:0:1 - User-Agent: PostmanRuntime/7.48.0 - Authentication attempt
2025-10-06 23:07:53 [reactor-http-nio-3] INFO  c.m.i.a.service.AuthService - Authentication attempt for user: admin
2025-10-06 23:07:53 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:07:53 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:07:53 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4bb2c90f columns: 1 rows: 1 pos: -1
2025-10-06 23:07:53 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 23:07:53 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5a7c6ec6 columns: 7 rows: 1 pos: -1
2025-10-06 23:07:53 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:07:53 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:07:53 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4b0c1110 columns: 1 rows: 1 pos: -1
2025-10-06 23:07:53 [reactor-http-nio-3] INFO  c.m.i.i.security.JwtUtil - JWT token generated successfully for user: admin - Token expires in 86400000 ms
2025-10-06 23:07:53 [reactor-http-nio-3] INFO  c.m.i.a.service.AuthService - Authentication successful for user: admin
2025-10-06 23:07:53 [reactor-http-nio-3] INFO  c.m.i.i.a.input.rest.AuthController - Authentication successful - Username: admin - IP: 0:0:0:0:0:0:0:1 - Token generated successfully
2025-10-06 23:07:56 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:07:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:07:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4ddc7c64 columns: 1 rows: 1 pos: -1
2025-10-06 23:07:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 23:07:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7e1dbb7e columns: 7 rows: 1 pos: -1
2025-10-06 23:07:56 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:07:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:07:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5565bb30 columns: 1 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1ee03601 columns: 1 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@a192288 columns: 7 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@76f66451 columns: 1 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] WARN  c.m.i.i.s.StorePermissionAspect - Could not extract storeId from method parameters
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7d1c269d columns: 1 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@162ee322 columns: 7 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2f063b3b columns: 1 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/BUZ-001-GR-M/stores - User: admin - IP: 0:0:0:0:0:0:0:1 - Admin inventory query for all stores
2025-10-06 23:07:56 [parallel-7] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: BUZ-001-GR-M
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7a815378 columns: 1 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.ID, products.sku, products.name, products.description, products.is_active, products.created_at, products.updated_at FROM products WHERE products.sku = $1 {1: 'BUZ-001-GR-M'}
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7ee3b44c columns: 7 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4f587f56 columns: 1 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1]
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@125832ce columns: 1 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 {1: 'BUZ-001-GR-M'}
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@21692937 columns: 6 rows: 3 pos: -1
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@609d3df columns: 1 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5ca2c2e1 columns: 1 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(4 AS BIGINT)}
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6ebf04ec columns: 7 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6d052bf columns: 1 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5aa1c853 columns: 1 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@794c4005 columns: 5 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1781ced1 columns: 1 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3454b4c1 columns: 1 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(4 AS BIGINT)}
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5fe4a0c1 columns: 7 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@29c4692c columns: 1 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@423f7f14 columns: 1 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(2 AS BIGINT)}
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6d1caf68 columns: 5 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@66aef41e columns: 1 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@57bf636d columns: 1 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(4 AS BIGINT)}
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@69ad9322 columns: 7 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@20baabfb columns: 1 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@903a6bd columns: 1 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(3 AS BIGINT)}
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@65fd597c columns: 5 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:07:56 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@c47378c columns: 1 rows: 1 pos: -1
2025-10-06 23:07:56 [parallel-7] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully retrieved inventory for product BUZ-001-GR-M - User: admin - IP: 0:0:0:0:0:0:0:1
2025-10-06 23:08:00 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@50b4f21d columns: 1 rows: 1 pos: -1
2025-10-06 23:08:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 23:08:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@73b20c columns: 7 rows: 1 pos: -1
2025-10-06 23:08:00 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:00 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@45fd717a columns: 1 rows: 1 pos: -1
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3e6ca740 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@14e3f463 columns: 7 rows: 1 pos: -1
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4acc7535 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3baad90c columns: 1 rows: 1 pos: -1
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@444367ab columns: 7 rows: 1 pos: -1
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3f279ec columns: 1 rows: 1 pos: -1
2025-10-06 23:08:00 [parallel-7] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/BUZ-001-GR-M/stores/2 - User: admin - IP: 0:0:0:0:0:0:0:1 - Store-specific inventory query
2025-10-06 23:08:00 [parallel-7] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: BUZ-001-GR-M in store: 2
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7a256071 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT 1 FROM stores WHERE stores.ID = $1 LIMIT 1 {1: CAST(2 AS BIGINT)}
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@256d37ec columns: 1 rows: 1 pos: -1
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3f74bc6c columns: 1 rows: 1 pos: -1
2025-10-06 23:08:00 [parallel-7] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@63928963 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'BUZ-001-GR-M', 2: CAST(2 AS BIGINT)}
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2d0d2de4 columns: 6 rows: 1 pos: -1
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@13f69e4c columns: 1 rows: 1 pos: -1
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@8ceacf columns: 1 rows: 1 pos: -1
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(4 AS BIGINT)}
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4ff4720a columns: 7 rows: 1 pos: -1
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@285afd5f columns: 1 rows: 1 pos: -1
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@236fffdd columns: 1 rows: 1 pos: -1
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(2 AS BIGINT)}
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@25003eee columns: 5 rows: 1 pos: -1
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:00 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@28da8bac columns: 1 rows: 1 pos: -1
2025-10-06 23:08:00 [parallel-7] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully retrieved inventory for product BUZ-001-GR-M in store 2 - Quantity: 12 - User: admin - IP: 0:0:0:0:0:0:0:1
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@649321d2 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@283b9708 columns: 7 rows: 1 pos: -1
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6e69ab0d columns: 1 rows: 1 pos: -1
2025-10-06 23:08:03 [parallel-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:03 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:03 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@a79b008 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:03 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 23:08:03 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@11dabfe5 columns: 7 rows: 1 pos: -1
2025-10-06 23:08:03 [parallel-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:03 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:03 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@66178362 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5c8e9b26 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4acfd3c8 columns: 7 rows: 1 pos: -1
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@39608411 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:03 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - PUT /api/inventory/BUZ-001-GR-M/stores/1 - User: admin - IP: 0:0:0:0:0:0:0:1 - Setting absolute quantity to: 20
2025-10-06 23:08:03 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Updating inventory for product SKU: BUZ-001-GR-M in store: 1 with quantity: 20
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4a869ee6 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.ID, products.sku, products.name, products.description, products.is_active, products.created_at, products.updated_at FROM products WHERE products.sku = $1 {1: 'BUZ-001-GR-M'}
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@77b888d3 columns: 7 rows: 1 pos: -1
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@76b90dd1 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3bfb339b columns: 1 rows: 1 pos: -1
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3c88b294 columns: 5 rows: 1 pos: -1
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3c0b0fef columns: 1 rows: 1 pos: -1
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i WHERE i.product_id = :productId AND i.store_id = :storeId] to [SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2]
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5cc19362 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2 {1: CAST(4 AS BIGINT), 2: CAST(1 AS BIGINT)}
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7b711020 columns: 6 rows: 1 pos: -1
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@516527dd columns: 1 rows: 1 pos: -1
2025-10-06 23:08:03 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Updating existing inventory ID: 10
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1725f3f4 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  UPDATE inventory SET product_id = $1, store_id = $2, available_qty = $3, VERSION = $4, updated_at = $5 WHERE inventory.ID = $6 AND (inventory.VERSION = $7) {1: CAST(4 AS BIGINT), 2: CAST(1 AS BIGINT), 3: 20, 4: 1, 5: TIMESTAMP '2025-10-06 23:08:03.3426108', 6: CAST(10 AS BIGINT), 7: 0}
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@568a1c79 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG c.m.i.i.a.o.p.InventoryPersistenceAdapter - Saved inventory with ID: 10
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@70b4d021 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(4 AS BIGINT)}
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@751d5f8 columns: 7 rows: 1 pos: -1
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@54eb645e columns: 1 rows: 1 pos: -1
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@bff6886 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4d31006a columns: 5 rows: 1 pos: -1
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4a01e31 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:03 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully updated inventory for product BUZ-001-GR-M in store 1 - New quantity: 20 - User: admin - IP: 0:0:0:0:0:0:0:1
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2c8336a columns: 1 rows: 1 pos: -1
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7767489 columns: 7 rows: 1 pos: -1
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@73984bc9 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:07 [parallel-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:07 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:07 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2ab045df columns: 1 rows: 1 pos: -1
2025-10-06 23:08:07 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 23:08:07 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2bd8a6e1 columns: 7 rows: 1 pos: -1
2025-10-06 23:08:07 [parallel-1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:07 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:07 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6905e181 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@22bd9e8b columns: 1 rows: 1 pos: -1
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@26e0ad99 columns: 7 rows: 1 pos: -1
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@636a555 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:07 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - POST /api/inventory/BUZ-001-GR-M/stores/1/adjustments - User: admin - IP: 0:0:0:0:0:0:0:1 - Adjusting by: 40
2025-10-06 23:08:07 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: BUZ-001-GR-M in store: 1 by: 40
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@73acee86 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'BUZ-001-GR-M', 2: CAST(1 AS BIGINT)}
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3a2f97ea columns: 6 rows: 1 pos: -1
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@a03cd38 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7642c8ac columns: 1 rows: 1 pos: -1
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  UPDATE inventory SET product_id = $1, store_id = $2, available_qty = $3, VERSION = $4, updated_at = $5 WHERE inventory.ID = $6 AND (inventory.VERSION = $7) {1: CAST(4 AS BIGINT), 2: CAST(1 AS BIGINT), 3: 60, 4: 2, 5: TIMESTAMP '2025-10-06 23:08:07.1738486', 6: CAST(10 AS BIGINT), 7: 1}
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@73d861ea columns: 1 rows: 1 pos: -1
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG c.m.i.i.a.o.p.InventoryPersistenceAdapter - Saved inventory with ID: 10
2025-10-06 23:08:07 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Inventory adjusted successfully. New quantity: 60, Version: 2
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@75db4e54 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(4 AS BIGINT)}
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3296314b columns: 7 rows: 1 pos: -1
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@8e3759f columns: 1 rows: 1 pos: -1
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@247a42f7 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7d37af4d columns: 5 rows: 1 pos: -1
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:07 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@609968f6 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:07 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully adjusted inventory for product BUZ-001-GR-M in store 1 by 40 - Final quantity: 60 - User: admin - IP: 0:0:0:0:0:0:0:1
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2e17d368 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1a0c89dc columns: 7 rows: 1 pos: -1
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3bb3c36e columns: 1 rows: 1 pos: -1
2025-10-06 23:08:10 [parallel-9] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:10 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:10 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@497572cd columns: 1 rows: 1 pos: -1
2025-10-06 23:08:10 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 23:08:10 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@38a20363 columns: 7 rows: 1 pos: -1
2025-10-06 23:08:10 [parallel-9] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:10 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:10 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@8561cb6 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@28108c80 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5fc536d4 columns: 7 rows: 1 pos: -1
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@fc8e953 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:10 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - PUT /api/inventory/BUZ-001-GR-M/stores/1 - User: admin - IP: 0:0:0:0:0:0:0:1 - Setting absolute quantity to: 20
2025-10-06 23:08:10 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Updating inventory for product SKU: BUZ-001-GR-M in store: 1 with quantity: 20
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@339dbeab columns: 1 rows: 1 pos: -1
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.ID, products.sku, products.name, products.description, products.is_active, products.created_at, products.updated_at FROM products WHERE products.sku = $1 {1: 'BUZ-001-GR-M'}
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@102b0d5e columns: 7 rows: 1 pos: -1
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2bc940fc columns: 1 rows: 1 pos: -1
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3d7669c4 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@15ae2941 columns: 5 rows: 1 pos: -1
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7f2be16b columns: 1 rows: 1 pos: -1
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i WHERE i.product_id = :productId AND i.store_id = :storeId] to [SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2]
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@159d5440 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2 {1: CAST(4 AS BIGINT), 2: CAST(1 AS BIGINT)}
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6bcf7f5e columns: 6 rows: 1 pos: -1
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@56b78008 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:10 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Updating existing inventory ID: 10
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@f71712c columns: 1 rows: 1 pos: -1
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  UPDATE inventory SET product_id = $1, store_id = $2, available_qty = $3, VERSION = $4, updated_at = $5 WHERE inventory.ID = $6 AND (inventory.VERSION = $7) {1: CAST(4 AS BIGINT), 2: CAST(1 AS BIGINT), 3: 20, 4: 3, 5: TIMESTAMP '2025-10-06 23:08:10.6199543', 6: CAST(10 AS BIGINT), 7: 2}
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6154d7d9 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG c.m.i.i.a.o.p.InventoryPersistenceAdapter - Saved inventory with ID: 10
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1df3db70 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(4 AS BIGINT)}
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@25f21c7d columns: 7 rows: 1 pos: -1
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@555b2bf2 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6354ad25 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1567fcd5 columns: 5 rows: 1 pos: -1
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:10 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4dd8f3bd columns: 1 rows: 1 pos: -1
2025-10-06 23:08:10 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully updated inventory for product BUZ-001-GR-M in store 1 - New quantity: 20 - User: admin - IP: 0:0:0:0:0:0:0:1
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3d8e5d2d columns: 1 rows: 1 pos: -1
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@58349f60 columns: 7 rows: 1 pos: -1
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@36221db0 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:14 [parallel-6] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:14 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:14 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@16823c6 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:14 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 23:08:14 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@75612ca6 columns: 7 rows: 1 pos: -1
2025-10-06 23:08:14 [parallel-6] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:14 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:14 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3103192a columns: 1 rows: 1 pos: -1
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@333ae483 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5d5fe8f1 columns: 7 rows: 1 pos: -1
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6806d68a columns: 1 rows: 1 pos: -1
2025-10-06 23:08:14 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - POST /api/inventory/BUZ-001-GR-M/stores/1/adjustments - User: admin - IP: 0:0:0:0:0:0:0:1 - Adjusting by: 40
2025-10-06 23:08:14 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: BUZ-001-GR-M in store: 1 by: 40
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@770c7011 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'BUZ-001-GR-M', 2: CAST(1 AS BIGINT)}
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1ab6dcef columns: 6 rows: 1 pos: -1
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6bd1bc5e columns: 1 rows: 1 pos: -1
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@25d27407 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  UPDATE inventory SET product_id = $1, store_id = $2, available_qty = $3, VERSION = $4, updated_at = $5 WHERE inventory.ID = $6 AND (inventory.VERSION = $7) {1: CAST(4 AS BIGINT), 2: CAST(1 AS BIGINT), 3: 60, 4: 4, 5: TIMESTAMP '2025-10-06 23:08:14.4164257', 6: CAST(10 AS BIGINT), 7: 3}
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3cadaa3 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG c.m.i.i.a.o.p.InventoryPersistenceAdapter - Saved inventory with ID: 10
2025-10-06 23:08:14 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Inventory adjusted successfully. New quantity: 60, Version: 4
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@76a38206 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(4 AS BIGINT)}
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7fe9daf2 columns: 7 rows: 1 pos: -1
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@8861a0e columns: 1 rows: 1 pos: -1
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@53506259 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@437fdb8b columns: 5 rows: 1 pos: -1
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:14 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@61012002 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:14 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully adjusted inventory for product BUZ-001-GR-M in store 1 by 40 - Final quantity: 60 - User: admin - IP: 0:0:0:0:0:0:0:1
2025-10-06 23:08:16 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:16 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:16 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@151dfbbf columns: 1 rows: 1 pos: -1
2025-10-06 23:08:16 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 23:08:16 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@70ddafd2 columns: 7 rows: 1 pos: -1
2025-10-06 23:08:16 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:16 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:16 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@52b06b9d columns: 1 rows: 1 pos: -1
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1b83cc32 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7f02c7f6 columns: 7 rows: 1 pos: -1
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@626256e columns: 1 rows: 1 pos: -1
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@63457cc columns: 1 rows: 1 pos: -1
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3694c67a columns: 7 rows: 1 pos: -1
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5d5fd99f columns: 1 rows: 1 pos: -1
2025-10-06 23:08:16 [parallel-3] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/BUZ-001-GR-M/stores/2 - User: admin - IP: 0:0:0:0:0:0:0:1 - Store-specific inventory query
2025-10-06 23:08:16 [parallel-3] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: BUZ-001-GR-M in store: 2
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@34de3c8a columns: 1 rows: 1 pos: -1
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT 1 FROM stores WHERE stores.ID = $1 LIMIT 1 {1: CAST(2 AS BIGINT)}
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@176e88af columns: 1 rows: 1 pos: -1
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3a06fd8c columns: 1 rows: 1 pos: -1
2025-10-06 23:08:16 [parallel-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1cb1688a columns: 1 rows: 1 pos: -1
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'BUZ-001-GR-M', 2: CAST(2 AS BIGINT)}
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@654fae44 columns: 6 rows: 1 pos: -1
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5a02bc3f columns: 1 rows: 1 pos: -1
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@344050cc columns: 1 rows: 1 pos: -1
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(4 AS BIGINT)}
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7a38729b columns: 7 rows: 1 pos: -1
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1db5272d columns: 1 rows: 1 pos: -1
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1250d13e columns: 1 rows: 1 pos: -1
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(2 AS BIGINT)}
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@ee43656 columns: 5 rows: 1 pos: -1
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:16 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3f0fdf3e columns: 1 rows: 1 pos: -1
2025-10-06 23:08:16 [parallel-3] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully retrieved inventory for product BUZ-001-GR-M in store 2 - Quantity: 12 - User: admin - IP: 0:0:0:0:0:0:0:1
2025-10-06 23:08:25 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@272c9c3c columns: 1 rows: 1 pos: -1
2025-10-06 23:08:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 23:08:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4c5e330e columns: 7 rows: 1 pos: -1
2025-10-06 23:08:25 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:25 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4e19adf1 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4ce4ae0a columns: 1 rows: 1 pos: -1
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@513096f6 columns: 7 rows: 1 pos: -1
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@55e6437f columns: 1 rows: 1 pos: -1
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6488e1fb columns: 1 rows: 1 pos: -1
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'admin'}
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@699b7 columns: 7 rows: 1 pos: -1
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@52f4817b columns: 1 rows: 1 pos: -1
2025-10-06 23:08:25 [parallel-10] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/BUZ-001-GR-M/stores/1 - User: admin - IP: 0:0:0:0:0:0:0:1 - Store-specific inventory query
2025-10-06 23:08:25 [parallel-10] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: BUZ-001-GR-M in store: 1
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1c1b5caa columns: 1 rows: 1 pos: -1
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT 1 FROM stores WHERE stores.ID = $1 LIMIT 1 {1: CAST(1 AS BIGINT)}
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6a92f90b columns: 1 rows: 1 pos: -1
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2183b922 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:25 [parallel-10] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1a1ca8e9 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'BUZ-001-GR-M', 2: CAST(1 AS BIGINT)}
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@68469d07 columns: 6 rows: 1 pos: -1
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@694bd059 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2a184b7f columns: 1 rows: 1 pos: -1
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(4 AS BIGINT)}
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@47292cfb columns: 7 rows: 1 pos: -1
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4f6eb181 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2905e657 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(1 AS BIGINT)}
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@23945e96 columns: 5 rows: 1 pos: -1
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:25 [parallel-10] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@14c14a1d columns: 1 rows: 1 pos: -1
2025-10-06 23:08:25 [parallel-10] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully retrieved inventory for product BUZ-001-GR-M in store 1 - Quantity: 60 - User: admin - IP: 0:0:0:0:0:0:0:1
2025-10-06 23:08:34 [reactor-http-nio-3] INFO  c.m.i.i.a.input.rest.AuthController - POST /api/auth/login - Username: user_nuevo_centro - IP: 0:0:0:0:0:0:0:1 - User-Agent: PostmanRuntime/7.48.0 - Authentication attempt
2025-10-06 23:08:34 [reactor-http-nio-3] INFO  c.m.i.a.service.AuthService - Authentication attempt for user: user_nuevo_centro
2025-10-06 23:08:34 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:34 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:34 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4463a44f columns: 1 rows: 1 pos: -1
2025-10-06 23:08:34 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_nuevo_centro'}
2025-10-06 23:08:34 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2a8e9fd2 columns: 7 rows: 1 pos: -1
2025-10-06 23:08:34 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:34 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:34 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@51bbb1bf columns: 1 rows: 1 pos: -1
2025-10-06 23:08:34 [reactor-http-nio-3] INFO  c.m.i.i.security.JwtUtil - JWT token generated successfully for user: user_nuevo_centro - Token expires in 86400000 ms
2025-10-06 23:08:34 [reactor-http-nio-3] INFO  c.m.i.a.service.AuthService - Authentication successful for user: user_nuevo_centro
2025-10-06 23:08:34 [reactor-http-nio-3] INFO  c.m.i.i.a.input.rest.AuthController - Authentication successful - Username: user_nuevo_centro - IP: 0:0:0:0:0:0:0:1 - Token generated successfully
2025-10-06 23:08:37 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@787027c2 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_nuevo_centro'}
2025-10-06 23:08:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3cb550cc columns: 7 rows: 1 pos: -1
2025-10-06 23:08:37 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:37 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@68a7e833 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:37 [parallel-9] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:37 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:37 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@127f2803 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:37 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_nuevo_centro'}
2025-10-06 23:08:37 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@eacbcaa columns: 7 rows: 1 pos: -1
2025-10-06 23:08:37 [parallel-9] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:37 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:37 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@49067598 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:37 [parallel-9] WARN  c.m.i.i.s.StorePermissionAspect - Could not extract storeId from method parameters
2025-10-06 23:08:37 [parallel-9] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:37 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:37 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@59697d9c columns: 1 rows: 1 pos: -1
2025-10-06 23:08:37 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_nuevo_centro'}
2025-10-06 23:08:37 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4ee7308 columns: 7 rows: 1 pos: -1
2025-10-06 23:08:37 [parallel-9] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:37 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:37 [parallel-9] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3edee8f columns: 1 rows: 1 pos: -1
2025-10-06 23:08:37 [parallel-9] WARN  c.m.i.i.s.StorePermissionAspect - User user_nuevo_centro attempted admin-only operation without admin role
2025-10-06 23:08:37 [parallel-9] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Administrator access required for this operation
com.meli.inventorymanagement.domain.exception.BusinessException: Administrator access required for this operation
	at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$1(StorePermissionAspect.java:58)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProduct(String, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/BUZ-001-GR-M/stores" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$1(StorePermissionAspect.java:58)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 23:08:37 [parallel-9] ERROR c.m.i.i.e.GlobalExceptionHandler - Business exception: AUTH-009 - Administrator access required for this operation
com.meli.inventorymanagement.domain.exception.BusinessException: Administrator access required for this operation
	at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$1(StorePermissionAspect.java:58)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProduct(String, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/BUZ-001-GR-M/stores" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$1(StorePermissionAspect.java:58)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 23:08:42 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:42 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:42 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@23a08a07 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:42 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_nuevo_centro'}
2025-10-06 23:08:42 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@70e40ad6 columns: 7 rows: 1 pos: -1
2025-10-06 23:08:42 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:42 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:42 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@121af0e3 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:42 [parallel-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@339871cc columns: 1 rows: 1 pos: -1
2025-10-06 23:08:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_nuevo_centro'}
2025-10-06 23:08:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@73f30c7d columns: 7 rows: 1 pos: -1
2025-10-06 23:08:42 [parallel-1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7f1f6506 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:42 [parallel-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@cc9f0cc columns: 1 rows: 1 pos: -1
2025-10-06 23:08:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_nuevo_centro'}
2025-10-06 23:08:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@131db6de columns: 7 rows: 1 pos: -1
2025-10-06 23:08:42 [parallel-1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7088d641 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:42 [parallel-1] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 23:08:42 [parallel-1] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@15ea4296 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_nuevo_centro', 2: CAST(1 AS BIGINT)}
2025-10-06 23:08:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@75983110 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:42 [parallel-1] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:42 [parallel-1] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6f6bbe8a columns: 1 rows: 1 pos: -1
2025-10-06 23:08:42 [parallel-1] WARN  c.m.i.i.s.StorePermissionAspect - User user_nuevo_centro denied access to store 1
2025-10-06 23:08:42 [parallel-1] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Access denied to the specified store
com.meli.inventorymanagement.domain.exception.BusinessException: Access denied to the specified store
	at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$0(StorePermissionAspect.java:81)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProductAndStore(String, Long, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/BUZ-001-GR-M/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$0(StorePermissionAspect.java:81)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:129)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 23:08:42 [parallel-1] ERROR c.m.i.i.e.GlobalExceptionHandler - Business exception: AUTH-008 - Access denied to the specified store
com.meli.inventorymanagement.domain.exception.BusinessException: Access denied to the specified store
	at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$0(StorePermissionAspect.java:81)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#getInventoryByProductAndStore(String, Long, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP GET "/api/inventory/BUZ-001-GR-M/stores/1" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$0(StorePermissionAspect.java:81)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:129)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:156)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:299)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:155)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:503)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerNext(FluxConcatMapNoPrefetch.java:259)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:865)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:291)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onNext(FluxFilterFuseable.java:118)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:191)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:87)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onNext(FluxConcatMapNoPrefetch.java:207)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:335)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.innerComplete(FluxConcatMapNoPrefetch.java:275)
		at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onComplete(FluxConcatMap.java:889)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onComplete(MonoFlatMap.java:189)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.request(FluxFlatMap.java:349)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.request(FluxPeekFuseable.java:783)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.request(FluxConcatMapNoPrefetch.java:339)
		at reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:108)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.request(FluxDefaultIfEmpty.java:98)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:437)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.request(MonoPeekTerminal.java:139)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:471)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onSubscribe(MonoPeekTerminal.java:152)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:70)
		at reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber.onSubscribe(FluxConcatMapNoPrefetch.java:164)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onComplete(FluxPeekFuseable.java:940)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2572)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:82)
		at reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:102)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:277)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:144)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:178)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onComplete(FluxDefaultIfEmpty.java:134)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onComplete(FluxFilter.java:166)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onComplete(FluxMap.java:275)
		at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1865)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.signalCached(MonoCacheTime.java:337)
		at reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber.onNext(MonoCacheTime.java:354)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoPublishOn$PublishOnSubscriber.run(MonoPublishOn.java:181)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:68)
		at reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:28)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
		at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 23:08:47 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:47 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:47 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5acd6b07 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:47 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_nuevo_centro'}
2025-10-06 23:08:47 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@e14495 columns: 7 rows: 1 pos: -1
2025-10-06 23:08:47 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:47 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:47 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@49e4876b columns: 1 rows: 1 pos: -1
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@10b8a565 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_nuevo_centro'}
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@547b0238 columns: 7 rows: 1 pos: -1
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2c8f2d26 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@39f54c30 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_nuevo_centro'}
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@505cce3b columns: 7 rows: 1 pos: -1
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@540bbdb5 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:47 [parallel-6] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7197dc14 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_nuevo_centro', 2: CAST(3 AS BIGINT)}
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2f0620b8 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@40ecf2bd columns: 1 rows: 1 pos: -1
2025-10-06 23:08:47 [parallel-6] INFO  c.m.i.i.a.i.rest.InventoryController - GET /api/inventory/BUZ-001-GR-M/stores/3 - User: user_nuevo_centro - IP: 0:0:0:0:0:0:0:1 - Store-specific inventory query
2025-10-06 23:08:47 [parallel-6] INFO  c.m.i.a.service.InventoryService - Fetching inventory for product SKU: BUZ-001-GR-M in store: 3
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1ef3373e columns: 1 rows: 1 pos: -1
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT 1 FROM stores WHERE stores.ID = $1 LIMIT 1 {1: CAST(3 AS BIGINT)}
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@392d5747 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@48f318ad columns: 1 rows: 1 pos: -1
2025-10-06 23:08:47 [parallel-6] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1c7a7d85 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'BUZ-001-GR-M', 2: CAST(3 AS BIGINT)}
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@57e27c21 columns: 6 rows: 1 pos: -1
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3ce33066 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@341add8a columns: 1 rows: 1 pos: -1
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(4 AS BIGINT)}
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@10256487 columns: 7 rows: 1 pos: -1
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2726117b columns: 1 rows: 1 pos: -1
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7e082be5 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(3 AS BIGINT)}
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6c83b3ec columns: 5 rows: 1 pos: -1
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:47 [parallel-6] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2d293d9f columns: 1 rows: 1 pos: -1
2025-10-06 23:08:47 [parallel-6] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully retrieved inventory for product BUZ-001-GR-M in store 3 - Quantity: 20 - User: user_nuevo_centro - IP: 0:0:0:0:0:0:0:1
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@28955c16 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_nuevo_centro'}
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@40d6f37c columns: 7 rows: 1 pos: -1
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@55311464 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:56 [parallel-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:56 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:56 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7409b2c4 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:56 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_nuevo_centro'}
2025-10-06 23:08:56 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@6cc0c9c0 columns: 7 rows: 1 pos: -1
2025-10-06 23:08:56 [parallel-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:56 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:56 [parallel-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@78b1e8ef columns: 1 rows: 1 pos: -1
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@784a7dc6 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_nuevo_centro'}
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3e953944 columns: 7 rows: 1 pos: -1
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@34ba66cd columns: 1 rows: 1 pos: -1
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@87dcc6a columns: 1 rows: 1 pos: -1
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_nuevo_centro', 2: CAST(3 AS BIGINT)}
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1c88f3d8 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@482b1726 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:56 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - PUT /api/inventory/BUZ-001-GR-M/stores/3 - User: user_nuevo_centro - IP: 0:0:0:0:0:0:0:1 - Setting absolute quantity to: 20
2025-10-06 23:08:56 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Updating inventory for product SKU: BUZ-001-GR-M in store: 3 with quantity: 20
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@58bd04f columns: 1 rows: 1 pos: -1
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.ID, products.sku, products.name, products.description, products.is_active, products.created_at, products.updated_at FROM products WHERE products.sku = $1 {1: 'BUZ-001-GR-M'}
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@378c410f columns: 7 rows: 1 pos: -1
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@691d0d18 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@671e1aa3 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(3 AS BIGINT)}
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7de5f5c4 columns: 5 rows: 1 pos: -1
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@331f5db2 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i WHERE i.product_id = :productId AND i.store_id = :storeId] to [SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2]
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@765a08f9 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i WHERE i.product_id = $1 AND i.store_id = $2 {1: CAST(4 AS BIGINT), 2: CAST(3 AS BIGINT)}
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@28a8a5 columns: 6 rows: 1 pos: -1
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@717bcc9f columns: 1 rows: 1 pos: -1
2025-10-06 23:08:56 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Updating existing inventory ID: 12
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@20f6562e columns: 1 rows: 1 pos: -1
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  UPDATE inventory SET product_id = $1, store_id = $2, available_qty = $3, VERSION = $4, updated_at = $5 WHERE inventory.ID = $6 AND (inventory.VERSION = $7) {1: CAST(4 AS BIGINT), 2: CAST(3 AS BIGINT), 3: 20, 4: 1, 5: TIMESTAMP '2025-10-06 23:08:56.8724352', 6: CAST(12 AS BIGINT), 7: 0}
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7ffa5ca6 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG c.m.i.i.a.o.p.InventoryPersistenceAdapter - Saved inventory with ID: 12
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3e300714 columns: 1 rows: 1 pos: -1
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(4 AS BIGINT)}
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2d382036 columns: 7 rows: 1 pos: -1
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@75af63e columns: 1 rows: 1 pos: -1
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5539f7ed columns: 1 rows: 1 pos: -1
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(3 AS BIGINT)}
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@380630be columns: 5 rows: 1 pos: -1
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:08:56 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@33c1098e columns: 1 rows: 1 pos: -1
2025-10-06 23:08:56 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully updated inventory for product BUZ-001-GR-M in store 3 - New quantity: 20 - User: user_nuevo_centro - IP: 0:0:0:0:0:0:0:1
2025-10-06 23:09:03 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:09:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:09:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@60635636 columns: 1 rows: 1 pos: -1
2025-10-06 23:09:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_nuevo_centro'}
2025-10-06 23:09:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5d799eac columns: 7 rows: 1 pos: -1
2025-10-06 23:09:03 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:09:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:09:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1a9695d1 columns: 1 rows: 1 pos: -1
2025-10-06 23:09:03 [parallel-2] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:09:03 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:09:03 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2683eff8 columns: 1 rows: 1 pos: -1
2025-10-06 23:09:03 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_nuevo_centro'}
2025-10-06 23:09:03 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@5616d2dd columns: 7 rows: 1 pos: -1
2025-10-06 23:09:03 [parallel-2] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:09:03 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:09:03 [parallel-2] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7b94541a columns: 1 rows: 1 pos: -1
2025-10-06 23:09:03 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:09:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:09:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@397286a0 columns: 1 rows: 1 pos: -1
2025-10-06 23:09:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_nuevo_centro'}
2025-10-06 23:09:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@66ab6b2c columns: 7 rows: 1 pos: -1
2025-10-06 23:09:03 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:09:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:09:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@475e75aa columns: 1 rows: 1 pos: -1
2025-10-06 23:09:03 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 23:09:03 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:09:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:09:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@577b4806 columns: 1 rows: 1 pos: -1
2025-10-06 23:09:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_nuevo_centro', 2: CAST(1 AS BIGINT)}
2025-10-06 23:09:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@72a00894 columns: 1 rows: 1 pos: -1
2025-10-06 23:09:03 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:09:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:09:03 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@9ff9b70 columns: 1 rows: 1 pos: -1
2025-10-06 23:09:03 [reactor-http-nio-3] WARN  c.m.i.i.s.StorePermissionAspect - User user_nuevo_centro denied access to store 1
2025-10-06 23:09:03 [reactor-http-nio-3] ERROR c.m.i.i.e.GlobalExceptionHandler - Error occurred: Access denied to the specified store
com.meli.inventorymanagement.domain.exception.BusinessException: Access denied to the specified store
	at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$0(StorePermissionAspect.java:81)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#adjustInventory(String, Long, InventoryAdjustmentRequest, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP POST "/api/inventory/BUZ-001-GR-M/stores/1/adjustments" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$0(StorePermissionAspect.java:81)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:129)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
		at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 23:09:03 [reactor-http-nio-3] ERROR c.m.i.i.e.GlobalExceptionHandler - Business exception: AUTH-008 - Access denied to the specified store
com.meli.inventorymanagement.domain.exception.BusinessException: Access denied to the specified store
	at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$0(StorePermissionAspect.java:81)
	Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: 
Error has been observed at the following site(s):
	*__checkpoint ⇢ Handler com.meli.inventorymanagement.infrastructure.adapter.input.rest.InventoryController#adjustInventory(String, Long, InventoryAdjustmentRequest, ServerWebExchange) [DispatcherHandler]
	*__checkpoint ⇢ com.meli.inventorymanagement.infrastructure.security.JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ AuthorizationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ExceptionTranslationWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ LogoutWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerRequestCacheWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ JwtAuthenticationFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ HttpHeaderWriterWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]
	*__checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]
	*__checkpoint ⇢ HTTP POST "/api/inventory/BUZ-001-GR-M/stores/1/adjustments" [ExceptionHandlingWebHandler]
Original Stack Trace:
		at com.meli.inventorymanagement.infrastructure.security.StorePermissionAspect.lambda$checkStorePermission$0(StorePermissionAspect.java:81)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:132)
		at reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:82)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onNext(FluxUsingWhen.java:348)
		at reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:251)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:129)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.Operators$MonoInnerProducerBase.complete(Operators.java:2864)
		at reactor.core.publisher.MonoSingle$SingleSubscriber.onComplete(MonoSingle.java:180)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredComplete(FluxUsingWhen.java:397)
		at reactor.core.publisher.FluxUsingWhen$CommitInner.onComplete(FluxUsingWhen.java:532)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2230)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:210)
		at reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:547)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerInner.onComplete(SimpleDequePool.java:788)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.pool.SimpleDequePool$QueuePoolRecyclerMono.subscribe(SimpleDequePool.java:901)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.Operators.complete(Operators.java:137)
		at reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:46)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:241)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onError(FluxFilter.java:157)
		at reactor.core.publisher.FluxFilter$FilterConditionalSubscriber.onError(FluxFilter.java:291)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:265)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.onComplete(FluxUsingWhen.java:389)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:850)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:612)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:592)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onComplete(FluxFlatMap.java:469)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onComplete(FluxMapFuseable.java:152)
		at reactor.core.publisher.FluxIterable$IterableSubscription.slowPath(FluxIterable.java:357)
		at reactor.core.publisher.FluxIterable$IterableSubscription.request(FluxIterable.java:294)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxFlatMap$FlatMapMain.onSubscribe(FluxFlatMap.java:373)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:96)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:201)
		at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:83)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8891)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.FluxFlatMap.subscribeOrReturn(FluxFlatMap.java:94)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen$ResourceSubscriber.onNext(FluxUsingWhen.java:198)
		at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:122)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.onNext(FluxRetry.java:88)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.SerializedSubscriber.onNext(SerializedSubscriber.java:99)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onNext(FluxTimeout.java:181)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:245)
		at reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:305)
		at io.r2dbc.pool.MonoDiscardOnCancel$MonoDiscardOnCancelSubscriber.onNext(MonoDiscardOnCancel.java:92)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:237)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:204)
		at reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onComplete(MonoIgnoreElements.java:89)
		at reactor.core.publisher.FluxHandle$HandleSubscriber.onComplete(FluxHandle.java:223)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:85)
		at reactor.core.publisher.MonoCallable$MonoCallableSubscription.request(MonoCallable.java:159)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoCallable.subscribe(MonoCallable.java:48)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at io.r2dbc.pool.MonoDiscardOnCancel.subscribe(MonoDiscardOnCancel.java:50)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.pool.AbstractPool$Borrower.deliver(AbstractPool.java:471)
		at reactor.pool.SimpleDequePool.lambda$drainLoop$8(SimpleDequePool.java:381)
		at reactor.core.scheduler.ImmediateScheduler.schedule(ImmediateScheduler.java:52)
		at reactor.pool.SimpleDequePool.drainLoop(SimpleDequePool.java:381)
		at reactor.pool.SimpleDequePool.pendingOffer(SimpleDequePool.java:625)
		at reactor.pool.SimpleDequePool.doAcquire(SimpleDequePool.java:306)
		at reactor.pool.AbstractPool$Borrower.request(AbstractPool.java:425)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.request(Operators.java:2330)
		at reactor.core.publisher.SerializedSubscriber.request(SerializedSubscriber.java:151)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.SerializedSubscriber.onSubscribe(SerializedSubscriber.java:65)
		at reactor.core.publisher.FluxTimeout$TimeoutMainSubscriber.onSubscribe(FluxTimeout.java:155)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.pool.SimpleDequePool$QueueBorrowerMono.subscribe(SimpleDequePool.java:743)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:53)
		at reactor.core.publisher.FluxRetry$RetrySubscriber.resubscribe(FluxRetry.java:120)
		at reactor.core.publisher.MonoRetry.subscribeOrReturn(MonoRetry.java:50)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:180)
		at reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:134)
		at reactor.core.publisher.Operators.error(Operators.java:198)
		at reactor.core.publisher.MonoError.subscribe(MonoError.java:53)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:105)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:202)
		at reactor.core.publisher.MonoFlatMapMany.subscribeOrReturn(MonoFlatMapMany.java:49)
		at reactor.core.publisher.Flux.subscribe(Flux.java:8876)
		at reactor.core.publisher.FluxUsingWhen.subscribe(FluxUsingWhen.java:94)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onNext(FluxFilter.java:113)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:224)
		at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2570)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.request(FluxMap.java:295)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.request(FluxFilter.java:186)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:2240)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxFilter$FilterSubscriber.onSubscribe(FluxFilter.java:85)
		at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onSubscribe(FluxMap.java:194)
		at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:55)
		at reactor.core.publisher.MonoDeferContextual.subscribe(MonoDeferContextual.java:55)
		at reactor.core.publisher.Mono.subscribe(Mono.java:4576)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.subscribeNext(MonoIgnoreThen.java:265)
		at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:51)
		at reactor.core.publisher.FluxFromMonoOperator.subscribe(FluxFromMonoOperator.java:85)
		at reactor.core.publisher.FluxDeferContextual.subscribe(FluxDeferContextual.java:57)
		at reactor.core.publisher.InternalMonoOperator.subscribe(InternalMonoOperator.java:76)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:165)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.complete(MonoIgnoreThen.java:294)
		at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onNext(MonoIgnoreThen.java:188)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.MonoZip$ZipCoordinator.signal(MonoZip.java:297)
		at reactor.core.publisher.MonoZip$ZipInner.onNext(MonoZip.java:478)
		at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:180)
		at reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:122)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:200)
		at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:74)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2096)
		at reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)
		at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)
		at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:481)
		at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:273)
		at reactor.netty.channel.FluxReceive.request(FluxReceive.java:131)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.request(FluxPeek.java:138)
		at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:164)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.request(Operators.java:2066)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.request(FluxFilterFuseable.java:411)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.request(FluxMapFuseable.java:360)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.request(FluxContextWrite.java:136)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.request(MonoFlatMap.java:194)
		at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2366)
		at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
		at reactor.core.publisher.MonoFlatMap$FlatMapMain.onSubscribe(MonoFlatMap.java:117)
		at reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onSubscribe(FluxContextWrite.java:101)
		at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onSubscribe(FluxMapFuseable.java:265)
		at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onSubscribe(FluxFilterFuseable.java:305)
		at reactor.core.publisher.Operators$BaseFluxToMonoOperator.onSubscribe(Operators.java:2050)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.core.publisher.FluxPeek$PeekSubscriber.onSubscribe(FluxPeek.java:171)
		at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:92)
		at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:170)
		at reactor.netty.channel.FluxReceive.lambda$subscribe$2(FluxReceive.java:148)
		at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
		at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
		at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
		at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
		at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:998)
		at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
		at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
		at java.base/java.lang.Thread.run(Thread.java:1583)
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@3d9d495d columns: 1 rows: 1 pos: -1
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_nuevo_centro'}
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4c93209e columns: 7 rows: 1 pos: -1
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@64ab89f5 columns: 1 rows: 1 pos: -1
2025-10-06 23:09:08 [parallel-7] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:09:08 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:09:08 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@29721701 columns: 1 rows: 1 pos: -1
2025-10-06 23:09:08 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_nuevo_centro'}
2025-10-06 23:09:08 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2290cbb9 columns: 7 rows: 1 pos: -1
2025-10-06 23:09:08 [parallel-7] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:09:08 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:09:08 [parallel-7] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@465d52e9 columns: 1 rows: 1 pos: -1
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@721a7a12 columns: 1 rows: 1 pos: -1
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT users.ID, users.username, users.password_hash, users.role, users.is_active, users.created_at, users.updated_at FROM users WHERE users.username = $1 {1: 'user_nuevo_centro'}
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@22b3a05 columns: 7 rows: 1 pos: -1
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@7e29332a columns: 1 rows: 1 pos: -1
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = :username AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = :storeId))] to [SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2))]
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@4e2fef8 columns: 1 rows: 1 pos: -1
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END FROM users u WHERE u.username = $1 AND (u.role = 'ADMIN' OR EXISTS (    SELECT 1 FROM user_store_permissions sp     WHERE sp.user_id = u.id AND sp.store_id = $2)) {1: 'user_nuevo_centro', 2: CAST(3 AS BIGINT)}
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@40188f01 columns: 1 rows: 1 pos: -1
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@38725c0b columns: 1 rows: 1 pos: -1
2025-10-06 23:09:08 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - POST /api/inventory/BUZ-001-GR-M/stores/3/adjustments - User: user_nuevo_centro - IP: 0:0:0:0:0:0:0:1 - Adjusting by: 40
2025-10-06 23:09:08 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Adjusting inventory for product SKU: BUZ-001-GR-M in store: 3 by: 40
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG o.s.d.r.core.NamedParameterExpander - Expanding SQL statement [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = :sku AND i.store_id = :storeId] to [SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2]
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2f90922b columns: 1 rows: 1 pos: -1
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT i.* FROM inventory i JOIN products p ON i.product_id = p.id WHERE p.sku = $1 AND i.store_id = $2 {1: 'BUZ-001-GR-M', 2: CAST(3 AS BIGINT)}
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2220369e columns: 6 rows: 1 pos: -1
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@2b48f490 columns: 1 rows: 1 pos: -1
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@55d4d2f1 columns: 1 rows: 1 pos: -1
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  UPDATE inventory SET product_id = $1, store_id = $2, available_qty = $3, VERSION = $4, updated_at = $5 WHERE inventory.ID = $6 AND (inventory.VERSION = $7) {1: CAST(4 AS BIGINT), 2: CAST(3 AS BIGINT), 3: 60, 4: 2, 5: TIMESTAMP '2025-10-06 23:09:08.1294741', 6: CAST(12 AS BIGINT), 7: 1}
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@f2985ef columns: 1 rows: 1 pos: -1
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG c.m.i.i.a.o.p.InventoryPersistenceAdapter - Saved inventory with ID: 12
2025-10-06 23:09:08 [reactor-http-nio-3] INFO  c.m.i.a.service.InventoryService - Inventory adjusted successfully. New quantity: 60, Version: 2
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@27e11881 columns: 1 rows: 1 pos: -1
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT products.* FROM products WHERE products.ID = $1 LIMIT 2 {1: CAST(4 AS BIGINT)}
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@1cadb14f columns: 7 rows: 1 pos: -1
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@176f9e8b columns: 1 rows: 1 pos: -1
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.pool.ConnectionPool - Obtaining new connection from the pool
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@49b3506d columns: 1 rows: 1 pos: -1
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT stores.* FROM stores WHERE stores.ID = $1 LIMIT 2 {1: CAST(3 AS BIGINT)}
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@19e974a9 columns: 5 rows: 1 pos: -1
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.pool.PooledConnection - Releasing connection
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Request:  SELECT CURRENT_TIMESTAMP
2025-10-06 23:09:08 [reactor-http-nio-3] DEBUG io.r2dbc.h2.client.SessionClient - Response: org.h2.result.LocalResult@67269f7c columns: 1 rows: 1 pos: -1
2025-10-06 23:09:08 [reactor-http-nio-3] INFO  c.m.i.i.a.i.rest.InventoryController - Successfully adjusted inventory for product BUZ-001-GR-M in store 3 by 40 - Final quantity: 60 - User: user_nuevo_centro - IP: 0:0:0:0:0:0:0:1
2025-10-06 23:09:15 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.netty.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-06 23:09:15 [netty-shutdown] INFO  o.s.b.w.e.netty.GracefulShutdown - Graceful shutdown complete
